=Grammar:

_blankspace: /[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment: '//' /.*/
access_mode: 'read' | 'write' | 'read_write'
additive_expression: multiplicative_expression | additive_expression plus multiplicative_expression | additive_expression minus multiplicative_expression
address_space: 'function' | 'private' | 'workgroup' | 'uniform' | 'storage'
and: '&'
and_and: '&&'
and_equal: '&='
argument_expression_list: paren_left argument_expression_list/0.1 paren_right
argument_expression_list/0.1: argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 | ε
argument_expression_list/0.1/0.0: argument_expression_list/0.1/0.0/0 | ε
argument_expression_list/0.1/0.0/0: argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 | ε
argument_expression_list/0.1/0.0/0/0.0: expression comma
argument_expression_list/0.1/0.2: comma | ε
array: 'array'
array_type_decl: 'array' less_than type_decl array_type_decl/0.3 greater_than
array_type_decl/0.3: comma element_count_expression | ε
arrow: '->'
assignment_statement: lhs_expression assignment_statement/0.1 expression
assignment_statement/0.1: equal | compound_assignment_operator
atomic: 'atomic'
attr: '@'
attrib_end: attrib_end/0.0 paren_right
attrib_end/0.0: comma | ε
attribute: attr 'align' paren_left expression attrib_end | attr 'binding' paren_left expression attrib_end | attr 'builtin' paren_left builtin_value_name attrib_end | attr 'const' | attr 'group' paren_left expression attrib_end | attr 'id' paren_left expression attrib_end | attr 'interpolate' paren_left interpolation_type_name attrib_end | attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end | attr 'invariant' | attr 'location' paren_left expression attrib_end | attr 'size' paren_left expression attrib_end | attr 'workgroup_size' paren_left expression attrib_end | attr 'workgroup_size' paren_left expression comma expression attrib_end | attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end | attr 'vertex' | attr 'fragment' | attr 'compute'
bang: '!'
binary_and_expression: unary_expression | binary_and_expression and unary_expression
binary_or_expression: unary_expression | binary_or_expression or unary_expression
binary_xor_expression: unary_expression | binary_xor_expression xor unary_expression
bitcast: 'bitcast'
bitwise_expression: binary_and_expression and unary_expression | binary_or_expression or unary_expression | binary_xor_expression xor unary_expression
bool: 'bool'
bool_literal: 'true' | 'false'
brace_left: '{'
brace_right: '}'
bracket_left: '['
bracket_right: ']'
break: 'break'
break_if_statement: 'break' 'if' expression semicolon
break_statement: 'break'
builtin_value_name: 'vertex_index' | 'instance_index' | 'position' | 'front_facing' | 'frag_depth' | 'local_invocation_id' | 'local_invocation_index' | 'global_invocation_id' | 'workgroup_id' | 'num_workgroups' | 'sample_index' | 'sample_mask'
callable: ident | type_decl_without_ident | vec_prefix | mat_prefix | 'array'
case: 'case'
case_compound_statement: brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right
case_compound_statement/0.1: case_compound_statement/0.1/0 | ε
case_compound_statement/0.1/0: statement case_compound_statement/0.1/0 | ε
case_compound_statement/0.2: fallthrough_statement | ε
case_selectors: expression case_selectors/0.1 case_selectors/0.2
case_selectors/0.1: case_selectors/0.1/0 | ε
case_selectors/0.1/0: case_selectors/0.1/0/0.0 case_selectors/0.1/0 | ε
case_selectors/0.1/0/0.0: comma expression
case_selectors/0.2: comma | ε
colon: ':'
comma: ','
compound_assignment_operator: plus_equal | minus_equal | times_equal | division_equal | modulo_equal | and_equal | or_equal | xor_equal | shift_right_equal | shift_left_equal
compound_statement: brace_left compound_statement/0.1 brace_right
compound_statement/0.1: compound_statement/0.1/0 | ε
compound_statement/0.1/0: statement compound_statement/0.1/0 | ε
const: 'const'
const_literal: int_literal | float_literal | bool_literal
continue: 'continue'
continue_statement: 'continue'
continuing: 'continuing'
continuing_compound_statement: brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right
continuing_compound_statement/0.1: continuing_compound_statement/0.1/0 | ε
continuing_compound_statement/0.1/0: statement continuing_compound_statement/0.1/0 | ε
continuing_compound_statement/0.2: break_if_statement | ε
continuing_statement: 'continuing' continuing_compound_statement
core_lhs_expression: ident | paren_left lhs_expression paren_right
decimal_float_literal: /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ | /[0-9]+[eE][+-]?[0-9]+[fh]?/ | /0[fh]/ | /[1-9][0-9]*[fh]/
decrement_statement: lhs_expression minus_minus
default: 'default'
depth_texture_type: 'texture_depth_2d' | 'texture_depth_2d_array' | 'texture_depth_cube' | 'texture_depth_cube_array' | 'texture_depth_multisampled_2d'
discard: 'discard'
division_equal: '/='
element_count_expression: additive_expression | bitwise_expression
else: 'else'
else_clause: 'else' compound_statement
else_if_clause: 'else' 'if' expression compound_statement
enable: 'enable'
enable_directive: 'enable' extension_name semicolon
equal: '='
equal_equal: '=='
expression: relational_expression | short_circuit_or_expression or_or relational_expression | short_circuit_and_expression and_and relational_expression | bitwise_expression
extension_name: 'f16'
fallthrough: 'fallthrough'
fallthrough_statement: 'fallthrough' semicolon
false: 'false'
float16: 'f16'
float32: 'f32'
float_literal: decimal_float_literal | hex_float_literal
fn: 'fn'
for: 'for'
for_header: for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4
for_header/0.0: for_init | ε
for_header/0.2: expression | ε
for_header/0.4: for_update | ε
for_init: variable_statement | increment_statement | decrement_statement | assignment_statement | func_call_statement
for_statement: 'for' paren_left for_header paren_right compound_statement
for_update: increment_statement | decrement_statement | assignment_statement | func_call_statement
forward_slash: '/'
func_call_statement: ident argument_expression_list
function: 'function'
function_decl: function_decl/0.0 function_header compound_statement
function_decl/0.0: function_decl/0.0/0 | ε
function_decl/0.0/0: attribute function_decl/0.0/0 | ε
function_header: 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5
function_header/0.3: param_list | ε
function_header/0.5: arrow function_header/0.5/0.1 type_decl | ε
function_header/0.5/0.1: function_header/0.5/0.1/0 | ε
function_header/0.5/0.1/0: attribute function_header/0.5/0.1/0 | ε
global_constant_decl: 'const' global_constant_decl/0.1 equal expression | global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3
global_constant_decl/0.1: ident | variable_ident_decl
global_constant_decl/1.0: global_constant_decl/1.0/0 | ε
global_constant_decl/1.0/0: attribute global_constant_decl/1.0/0 | ε
global_constant_decl/1.2: ident | variable_ident_decl
global_constant_decl/1.3: equal expression | ε
global_decl: semicolon | global_variable_decl semicolon | global_constant_decl semicolon | type_alias_decl semicolon | struct_decl | function_decl | static_assert_statement semicolon
global_directive: enable_directive
global_variable_decl: global_variable_decl/0.0 variable_decl global_variable_decl/0.2
global_variable_decl/0.0: global_variable_decl/0.0/0 | ε
global_variable_decl/0.0/0: attribute global_variable_decl/0.0/0 | ε
global_variable_decl/0.2: equal expression | ε
greater_than: '>'
greater_than_equal: '>='
hex_float_literal: /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
ident: ident_pattern_token
ident_pattern_token: /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if: 'if'
if_clause: 'if' expression compound_statement
if_statement: if_clause if_statement/0.1 if_statement/0.2
if_statement/0.1: if_statement/0.1/0 | ε
if_statement/0.1/0: else_if_clause if_statement/0.1/0 | ε
if_statement/0.2: else_clause | ε
increment_statement: lhs_expression plus_plus
int32: 'i32'
int_literal: /0[xX][0-9a-fA-F]+[iu]?/ | /0[iu]?/ | /[1-9][0-9]*[iu]?/
interpolation_sample_name: 'center' | 'centroid' | 'sample'
interpolation_type_name: 'perspective' | 'linear' | 'flat'
language: translation_unit EndOfText
less_than: '<'
less_than_equal: '<='
let: 'let'
lhs_expression: lhs_expression/0.0 core_lhs_expression lhs_expression/0.2
lhs_expression/0.0: lhs_expression/0.0/0 | ε
lhs_expression/0.0/0: lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 | ε
lhs_expression/0.0/0/0.0: star | and
lhs_expression/0.2: postfix_expression | ε
loop: 'loop'
loop_statement: 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right
loop_statement/0.2: loop_statement/0.2/0 | ε
loop_statement/0.2/0: statement loop_statement/0.2/0 | ε
loop_statement/0.3: continuing_statement | ε
mat2x2: 'mat2x2'
mat2x3: 'mat2x3'
mat2x4: 'mat2x4'
mat3x2: 'mat3x2'
mat3x3: 'mat3x3'
mat3x4: 'mat3x4'
mat4x2: 'mat4x2'
mat4x3: 'mat4x3'
mat4x4: 'mat4x4'
mat_prefix: 'mat2x2' | 'mat2x3' | 'mat2x4' | 'mat3x2' | 'mat3x3' | 'mat3x4' | 'mat4x2' | 'mat4x3' | 'mat4x4'
member_ident: ident_pattern_token
minus: '-'
minus_equal: '-='
minus_minus: '--'
modulo: '%'
modulo_equal: '%='
multiplicative_expression: unary_expression | multiplicative_expression star unary_expression | multiplicative_expression forward_slash unary_expression | multiplicative_expression modulo unary_expression
multisampled_texture_type: 'texture_multisampled_2d'
not_equal: '!='
or: '|'
or_equal: '|='
or_or: '||'
override: 'override'
param: param/0.0 variable_ident_decl
param/0.0: param/0.0/0 | ε
param/0.0/0: attribute param/0.0/0 | ε
param_list: param_list/0.0 param param_list/0.2
param_list/0.0: param_list/0.0/0 | ε
param_list/0.0/0: param_list/0.0/0/0.0 param_list/0.0/0 | ε
param_list/0.0/0/0.0: param comma
param_list/0.2: comma | ε
paren_expression: paren_left expression paren_right
paren_left: '('
paren_right: ')'
period: '.'
plus: '+'
plus_equal: '+='
plus_plus: '++'
pointer: 'ptr'
postfix_expression: bracket_left expression bracket_right postfix_expression/0.3 | period member_ident postfix_expression/1.2 | period swizzle_name postfix_expression/2.2
postfix_expression/0.3: postfix_expression | ε
postfix_expression/1.2: postfix_expression | ε
postfix_expression/2.2: postfix_expression | ε
primary_expression: ident | callable argument_expression_list | const_literal | paren_expression | 'bitcast' less_than type_decl greater_than paren_expression
private: 'private'
relational_expression: shift_expression | shift_expression less_than shift_expression | shift_expression greater_than shift_expression | shift_expression less_than_equal shift_expression | shift_expression greater_than_equal shift_expression | shift_expression equal_equal shift_expression | shift_expression not_equal shift_expression
return: 'return'
return_statement: 'return' return_statement/0.1
return_statement/0.1: expression | ε
sampled_texture_type: 'texture_1d' | 'texture_2d' | 'texture_2d_array' | 'texture_3d' | 'texture_cube' | 'texture_cube_array'
sampler: 'sampler'
sampler_comparison: 'sampler_comparison'
sampler_type: 'sampler' | 'sampler_comparison'
semicolon: ';'
shift_expression: additive_expression | unary_expression shift_left unary_expression | unary_expression shift_right unary_expression
shift_left: '<<'
shift_left_equal: '<<='
shift_right: '>>'
shift_right_equal: '>>='
short_circuit_and_expression: relational_expression | short_circuit_and_expression and_and relational_expression
short_circuit_or_expression: relational_expression | short_circuit_or_expression or_or relational_expression
singular_expression: primary_expression singular_expression/0.1
singular_expression/0.1: postfix_expression | ε
star: '*'
statement: semicolon | return_statement semicolon | if_statement | switch_statement | loop_statement | for_statement | while_statement | func_call_statement semicolon | variable_statement semicolon | break_statement semicolon | continue_statement semicolon | 'discard' semicolon | assignment_statement semicolon | compound_statement | increment_statement semicolon | decrement_statement semicolon | static_assert_statement semicolon
static_assert: 'static_assert'
static_assert_statement: 'static_assert' expression
storage: 'storage'
storage_texture_type: 'texture_storage_1d' | 'texture_storage_2d' | 'texture_storage_2d_array' | 'texture_storage_3d'
struct: 'struct'
struct_body_decl: brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right
struct_body_decl/0.1: struct_body_decl/0.1/0 | ε
struct_body_decl/0.1/0: struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 | ε
struct_body_decl/0.1/0/0.0: struct_member comma
struct_body_decl/0.3: comma | ε
struct_decl: 'struct' ident struct_body_decl
struct_member: struct_member/0.0 member_ident colon type_decl
struct_member/0.0: struct_member/0.0/0 | ε
struct_member/0.0/0: attribute struct_member/0.0/0 | ε
switch: 'switch'
switch_body: 'case' case_selectors switch_body/0.2 case_compound_statement | 'default' switch_body/1.1 case_compound_statement
switch_body/0.2: colon | ε
switch_body/1.1: colon | ε
switch_statement: 'switch' expression brace_left switch_statement/0.3 brace_right
switch_statement/0.3: switch_statement/0.3/0
switch_statement/0.3/0: switch_body switch_statement/0.3/0 | ε
swizzle_name: '/[rgba]/' | '/[rgba][rgba]/' | '/[rgba][rgba][rgba]/' | '/[rgba][rgba][rgba][rgba]/' | '/[xyzw]/' | '/[xyzw][xyzw]/' | '/[xyzw][xyzw][xyzw]/' | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format: 'rgba8unorm' | 'rgba8snorm' | 'rgba8uint' | 'rgba8sint' | 'rgba16uint' | 'rgba16sint' | 'rgba16float' | 'r32uint' | 'r32sint' | 'r32float' | 'rg32uint' | 'rg32sint' | 'rg32float' | 'rgba32uint' | 'rgba32sint' | 'rgba32float'
texture_1d: 'texture_1d'
texture_2d: 'texture_2d'
texture_2d_array: 'texture_2d_array'
texture_3d: 'texture_3d'
texture_and_sampler_types: sampler_type | depth_texture_type | sampled_texture_type less_than type_decl greater_than | multisampled_texture_type less_than type_decl greater_than | storage_texture_type less_than texel_format comma access_mode greater_than
texture_cube: 'texture_cube'
texture_cube_array: 'texture_cube_array'
texture_depth_2d: 'texture_depth_2d'
texture_depth_2d_array: 'texture_depth_2d_array'
texture_depth_cube: 'texture_depth_cube'
texture_depth_cube_array: 'texture_depth_cube_array'
texture_depth_multisampled_2d: 'texture_depth_multisampled_2d'
texture_multisampled_2d: 'texture_multisampled_2d'
texture_storage_1d: 'texture_storage_1d'
texture_storage_2d: 'texture_storage_2d'
texture_storage_2d_array: 'texture_storage_2d_array'
texture_storage_3d: 'texture_storage_3d'
tilde: '~'
times_equal: '*='
translation_unit: translation_unit/0.0 translation_unit/0.1
translation_unit/0.0: translation_unit/0.0/0 | ε
translation_unit/0.0/0: global_directive translation_unit/0.0/0 | ε
translation_unit/0.1: translation_unit/0.1/0 | ε
translation_unit/0.1/0: global_decl translation_unit/0.1/0 | ε
true: 'true'
type: 'type'
type_alias_decl: 'type' ident equal type_decl
type_decl: ident | type_decl_without_ident
type_decl_without_ident: 'bool' | float32 | float16 | int32 | uint32 | pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than | array_type_decl | texture_and_sampler_types
type_decl_without_ident/7.5: comma access_mode | ε
uint32: 'u32'
unary_expression: singular_expression | minus unary_expression | bang unary_expression | tilde unary_expression | star unary_expression | and unary_expression
underscore: '_'
uniform: 'uniform'
var: 'var'
variable_decl: 'var' variable_decl/0.1 variable_decl/0.2
variable_decl/0.1: variable_qualifier | ε
variable_decl/0.2: ident | variable_ident_decl
variable_ident_decl: ident colon type_decl
variable_qualifier: less_than address_space variable_qualifier/0.2 greater_than
variable_qualifier/0.2: comma access_mode | ε
variable_statement: variable_decl | 'let' variable_statement/2.1 equal expression | 'const' variable_statement/3.1 equal expression
variable_statement/2.1: ident | variable_ident_decl
variable_statement/3.1: ident | variable_ident_decl
vec2: 'vec2'
vec3: 'vec3'
vec4: 'vec4'
vec_prefix: 'vec2' | 'vec3' | 'vec4'
while: 'while'
while_statement: 'while' expression compound_statement
workgroup: 'workgroup'
xor: '^'
xor_equal: '^='

=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' global_constant_decl/0.1 equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'static_assert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_decl : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#5
global_directive -> 'enable' · extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
extension_name -> · 'f16' : {';'}

#6
global_directive -> 'enable' extension_name · semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#7
extension_name -> 'f16' · : {';'}

#8
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#9
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#10
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#11
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' global_constant_decl/0.1 equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'static_assert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_decl : {';'}

#12
global_decl -> semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#13
global_decl -> global_variable_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#14
global_decl -> global_constant_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#15
global_decl -> type_alias_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#16
global_decl -> struct_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#17
global_decl -> function_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#18
global_decl -> static_assert_statement · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#19
semicolon -> ';' · : {'!' '&' '(' ')' '*' '-' ';' '@' 'array' 'bitcast' 'bool' 'break' 'const' 'continue' 'continuing' 'discard' 'enable' 'f16' 'f32' 'fallthrough' 'false' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'static_assert' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'type' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#20
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}

#21
global_constant_decl -> 'const' · global_constant_decl/0.1 equal expression : {';'}
global_constant_decl/0.1 -> · ident : {'='}
global_constant_decl/0.1 -> · variable_ident_decl : {'='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}

#22
global_constant_decl -> global_constant_decl/1.0 · 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}

#23
type_alias_decl -> 'type' · ident equal type_decl : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}

#24
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#25
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_header -> · 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}

#26
static_assert_statement -> 'static_assert' · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#27
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#28
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {'override'}

#29
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#30
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#31
attribute -> attr · 'align' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'binding' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'compute' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'const' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'fragment' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'group' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'id' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'invariant' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'location' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'vertex' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#32
attr -> '@' · : {'const'}

#33
attribute -> attr 'align' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#34
attribute -> attr 'binding' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#35
attribute -> attr 'builtin' · paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#36
attribute -> attr 'const' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#37
attribute -> attr 'group' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#38
attribute -> attr 'id' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#39
attribute -> attr 'interpolate' · paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'interpolate' · paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#40
attribute -> attr 'invariant' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#41
attribute -> attr 'location' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#42
attribute -> attr 'size' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#43
attribute -> attr 'workgroup_size' · paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' · paren_left expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' · paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#44
attribute -> attr 'vertex' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#45
attribute -> attr 'fragment' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#46
attribute -> attr 'compute' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#47
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#48
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {'override'}

#49
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#50
static_assert_statement -> 'static_assert' expression · : {';'}

#51
expression -> relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> relational_expression · : {'&&'}
short_circuit_or_expression -> relational_expression · : {'||'}

#52
expression -> short_circuit_or_expression · or_or relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression · or_or relational_expression : {'||'}
or_or -> · '||' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#53
expression -> short_circuit_and_expression · and_and relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression · and_and relational_expression : {'&&'}
and_and -> · '&&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#54
expression -> bitwise_expression · : {')' ',' ':' ';' ']' '{'}

#55
relational_expression -> shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
equal_equal -> · '==' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
greater_than -> · '>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
greater_than_equal -> · '>=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
less_than -> · '<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
less_than_equal -> · '<=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
not_equal -> · '!=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#56
binary_and_expression -> binary_and_expression · and unary_expression : {'&'}
bitwise_expression -> binary_and_expression · and unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#57
binary_or_expression -> binary_or_expression · or unary_expression : {'|'}
bitwise_expression -> binary_or_expression · or unary_expression : {')' ',' ':' ';' '>' ']' '{'}
or -> · '|' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#58
binary_xor_expression -> binary_xor_expression · xor unary_expression : {'^'}
bitwise_expression -> binary_xor_expression · xor unary_expression : {')' ',' ':' ';' '>' ']' '{'}
xor -> · '^' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#59
additive_expression -> additive_expression · minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> additive_expression · plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> additive_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#60
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#61
additive_expression -> multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#62
unary_expression -> singular_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#63
unary_expression -> minus · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#64
unary_expression -> bang · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#65
unary_expression -> tilde · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#66
unary_expression -> star · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#67
unary_expression -> and · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#68
singular_expression -> primary_expression · singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
singular_expression/0.1 -> · postfix_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#69
minus -> '-' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#70
bang -> '!' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#71
tilde -> '~' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#72
star -> '*' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#73
and -> '&' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#74
callable -> ident · : {'('}
primary_expression -> ident · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#75
primary_expression -> callable · argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#76
primary_expression -> const_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#77
primary_expression -> paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#78
primary_expression -> 'bitcast' · less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#79
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}

#80
callable -> type_decl_without_ident · : {'('}

#81
callable -> vec_prefix · : {'('}

#82
callable -> mat_prefix · : {'('}

#83
array_type_decl -> 'array' · less_than type_decl array_type_decl/0.3 greater_than : {'('}
callable -> 'array' · : {'('}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#84
const_literal -> int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#85
const_literal -> float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#86
const_literal -> bool_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#87
paren_expression -> paren_left · expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')'}
bitwise_expression -> · binary_or_expression or unary_expression : {')'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')'}
expression -> · relational_expression : {')'}
expression -> · short_circuit_and_expression and_and relational_expression : {')'}
expression -> · short_circuit_or_expression or_or relational_expression : {')'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#88
type_decl_without_ident -> 'bool' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#89
type_decl_without_ident -> float32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#90
type_decl_without_ident -> float16 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#91
type_decl_without_ident -> int32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#92
type_decl_without_ident -> uint32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#93
type_decl_without_ident -> pointer · less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'function' 'private' 'storage' 'uniform' 'workgroup'}

#94
type_decl_without_ident -> array_type_decl · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#95
type_decl_without_ident -> texture_and_sampler_types · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#96
vec_prefix -> 'vec2' · : {'('}

#97
vec_prefix -> 'vec3' · : {'('}

#98
vec_prefix -> 'vec4' · : {'('}

#99
mat_prefix -> 'mat2x2' · : {'('}

#100
mat_prefix -> 'mat2x3' · : {'('}

#101
mat_prefix -> 'mat2x4' · : {'('}

#102
mat_prefix -> 'mat3x2' · : {'('}

#103
mat_prefix -> 'mat3x3' · : {'('}

#104
mat_prefix -> 'mat3x4' · : {'('}

#105
mat_prefix -> 'mat4x2' · : {'('}

#106
mat_prefix -> 'mat4x3' · : {'('}

#107
mat_prefix -> 'mat4x4' · : {'('}

#108
int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#109
int_literal -> /0[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#110
int_literal -> /[1-9][0-9]*[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#111
float_literal -> decimal_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#112
float_literal -> hex_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#113
bool_literal -> 'true' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#114
bool_literal -> 'false' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#115
paren_left -> '(' · : {'!' '&' '(' ')' '*' '-' ';' '@' 'array' 'bitcast' 'bool' 'const' 'f16' 'f32' 'false' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'var' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#116
float32 -> 'f32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#117
float16 -> 'f16' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#118
int32 -> 'i32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#119
uint32 -> 'u32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#120
pointer -> 'ptr' · : {'<'}

#121
texture_and_sampler_types -> sampler_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#122
texture_and_sampler_types -> depth_texture_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#123
texture_and_sampler_types -> sampled_texture_type · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#124
texture_and_sampler_types -> multisampled_texture_type · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#125
texture_and_sampler_types -> storage_texture_type · less_than texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {}

#126
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#127
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#128
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#129
decimal_float_literal -> /0[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#130
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#131
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#132
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#133
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#134
sampler_type -> 'sampler' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#135
sampler_type -> 'sampler_comparison' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#136
depth_texture_type -> 'texture_depth_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#137
depth_texture_type -> 'texture_depth_2d_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#138
depth_texture_type -> 'texture_depth_cube' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#139
depth_texture_type -> 'texture_depth_cube_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#140
depth_texture_type -> 'texture_depth_multisampled_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#141
sampled_texture_type -> 'texture_1d' · : {'<'}

#142
sampled_texture_type -> 'texture_2d' · : {'<'}

#143
sampled_texture_type -> 'texture_2d_array' · : {'<'}

#144
sampled_texture_type -> 'texture_3d' · : {'<'}

#145
sampled_texture_type -> 'texture_cube' · : {'<'}

#146
sampled_texture_type -> 'texture_cube_array' · : {'<'}

#147
multisampled_texture_type -> 'texture_multisampled_2d' · : {'<'}

#148
storage_texture_type -> 'texture_storage_1d' · : {'<'}

#149
storage_texture_type -> 'texture_storage_2d' · : {'<'}

#150
storage_texture_type -> 'texture_storage_2d_array' · : {'<'}

#151
storage_texture_type -> 'texture_storage_3d' · : {'<'}

#152
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#153
function_header -> 'fn' · ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#154
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl -> · brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#155
type_alias_decl -> 'type' ident · equal type_decl : {';'}
equal -> · '=' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#156
global_constant_decl -> global_constant_decl/1.0 'override' · global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.2 -> · ident : {';' '='}
global_constant_decl/1.2 -> · variable_ident_decl : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
variable_ident_decl -> · ident colon type_decl : {';' '='}

#157
global_constant_decl -> 'const' global_constant_decl/0.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#158
global_constant_decl/0.1 -> ident · : {'='}
variable_ident_decl -> ident · colon type_decl : {'='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#159
global_constant_decl/0.1 -> variable_ident_decl · : {'='}

#160
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
global_variable_decl/0.2 -> · equal expression : {';'}

#161
variable_decl -> 'var' · variable_decl/0.1 variable_decl/0.2 : {';' '='}
less_than -> · '<' : {'function' 'private' 'storage' 'uniform' 'workgroup'}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · less_than address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#162
global_decl -> static_assert_statement semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#163
global_decl -> type_alias_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#164
global_decl -> global_constant_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#165
global_decl -> global_variable_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#166
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#167
global_directive -> 'enable' extension_name semicolon · : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#168
variable_decl -> 'var' variable_decl/0.1 · variable_decl/0.2 : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
variable_decl/0.2 -> · ident : {';' '='}
variable_decl/0.2 -> · variable_ident_decl : {';' '='}
variable_ident_decl -> · ident colon type_decl : {';' '='}

#169
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#170
variable_qualifier -> less_than · address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {',' '>'}
address_space -> · 'private' : {',' '>'}
address_space -> · 'storage' : {',' '>'}
address_space -> · 'uniform' : {',' '>'}
address_space -> · 'workgroup' : {',' '>'}

#171
less_than -> '<' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'function' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'private' 'ptr' 'sampler' 'sampler_comparison' 'storage' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'uniform' 'vec2' 'vec3' 'vec4' 'workgroup' '~'}

#172
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {';'}

#173
global_variable_decl/0.2 -> equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#174
equal -> '=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#175
variable_ident_decl -> ident colon · type_decl : {')' ',' ';' '='}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_2d' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_2d_array' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_cube' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_cube_array' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {')' ',' ';' '='}
float16 -> · 'f16' : {')' ',' ';' '='}
float32 -> · 'f32' : {')' ',' ';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ',' ';' '='}
int32 -> · 'i32' : {')' ',' ';' '='}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {')' ',' ';' '='}
sampler_type -> · 'sampler_comparison' : {')' ',' ';' '='}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {')' ',' ';' '='}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {')' ',' ';' '='}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {')' ',' ';' '='}
texture_and_sampler_types -> · sampler_type : {')' ',' ';' '='}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {')' ',' ';' '='}
type_decl -> · ident : {')' ',' ';' '='}
type_decl -> · type_decl_without_ident : {')' ',' ';' '='}
type_decl_without_ident -> · 'bool' : {')' ',' ';' '='}
type_decl_without_ident -> · array_type_decl : {')' ',' ';' '='}
type_decl_without_ident -> · float16 : {')' ',' ';' '='}
type_decl_without_ident -> · float32 : {')' ',' ';' '='}
type_decl_without_ident -> · int32 : {')' ',' ';' '='}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {')' ',' ';' '='}
type_decl_without_ident -> · texture_and_sampler_types : {')' ',' ';' '='}
type_decl_without_ident -> · uint32 : {')' ',' ';' '='}
uint32 -> · 'u32' : {')' ',' ';' '='}

#176
colon -> ':' · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' '{'}

#177
global_constant_decl -> 'const' global_constant_decl/0.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#178
global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 · global_constant_decl/1.3 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
global_constant_decl/1.3 -> · equal expression : {';'}

#179
global_constant_decl/1.2 -> ident · : {';' '='}
variable_ident_decl -> ident · colon type_decl : {';' '='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#180
global_constant_decl/1.2 -> variable_ident_decl · : {';' '='}

#181
type_alias_decl -> 'type' ident equal · type_decl : {';'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {';'}
depth_texture_type -> · 'texture_depth_2d' : {';'}
depth_texture_type -> · 'texture_depth_2d_array' : {';'}
depth_texture_type -> · 'texture_depth_cube' : {';'}
depth_texture_type -> · 'texture_depth_cube_array' : {';'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';'}
float16 -> · 'f16' : {';'}
float32 -> · 'f32' : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}
int32 -> · 'i32' : {';'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';'}
sampler_type -> · 'sampler_comparison' : {';'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {';'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {';'}
texture_and_sampler_types -> · sampler_type : {';'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {';'}
type_decl -> · ident : {';'}
type_decl -> · type_decl_without_ident : {';'}
type_decl_without_ident -> · 'bool' : {';'}
type_decl_without_ident -> · array_type_decl : {';'}
type_decl_without_ident -> · float16 : {';'}
type_decl_without_ident -> · float32 : {';'}
type_decl_without_ident -> · int32 : {';'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {';'}
type_decl_without_ident -> · texture_and_sampler_types : {';'}
type_decl_without_ident -> · uint32 : {';'}
uint32 -> · 'u32' : {';'}

#182
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#183
struct_body_decl -> brace_left · struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_body_decl/0.1 -> · struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0 -> · struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0/0.0 -> · struct_member comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#184
brace_left -> '{' · : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#185
function_header -> 'fn' ident · paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
paren_left -> · '(' : {')' '@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#186
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#187
compound_statement -> brace_left · compound_statement/0.1 brace_right : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1 -> · compound_statement/0.1/0 : {'}'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#188
texture_and_sampler_types -> storage_texture_type less_than · texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
texel_format -> · 'r32float' : {','}
texel_format -> · 'r32sint' : {','}
texel_format -> · 'r32uint' : {','}
texel_format -> · 'rg32float' : {','}
texel_format -> · 'rg32sint' : {','}
texel_format -> · 'rg32uint' : {','}
texel_format -> · 'rgba16float' : {','}
texel_format -> · 'rgba16sint' : {','}
texel_format -> · 'rgba16uint' : {','}
texel_format -> · 'rgba32float' : {','}
texel_format -> · 'rgba32sint' : {','}
texel_format -> · 'rgba32uint' : {','}
texel_format -> · 'rgba8sint' : {','}
texel_format -> · 'rgba8snorm' : {','}
texel_format -> · 'rgba8uint' : {','}
texel_format -> · 'rgba8unorm' : {','}

#189
texture_and_sampler_types -> multisampled_texture_type less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#190
texture_and_sampler_types -> sampled_texture_type less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#191
type_decl_without_ident -> pointer less_than · address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#192
paren_expression -> paren_left expression · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#193
array_type_decl -> 'array' less_than · type_decl array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_decl -> · ident : {',' '>'}
type_decl -> · type_decl_without_ident : {',' '>'}
type_decl_without_ident -> · 'bool' : {',' '>'}
type_decl_without_ident -> · array_type_decl : {',' '>'}
type_decl_without_ident -> · float16 : {',' '>'}
type_decl_without_ident -> · float32 : {',' '>'}
type_decl_without_ident -> · int32 : {',' '>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '>'}
type_decl_without_ident -> · texture_and_sampler_types : {',' '>'}
type_decl_without_ident -> · uint32 : {',' '>'}
uint32 -> · 'u32' : {',' '>'}

#194
primary_expression -> 'bitcast' less_than · type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#195
primary_expression -> callable argument_expression_list · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#196
argument_expression_list -> paren_left · argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1 -> · argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.0 -> · argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0 -> · argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0/0.0 -> · expression comma : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {','}
bitwise_expression -> · binary_or_expression or unary_expression : {','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression and_and relational_expression : {','}
expression -> · short_circuit_or_expression or_or relational_expression : {','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#197
singular_expression -> primary_expression singular_expression/0.1 · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#198
singular_expression/0.1 -> postfix_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#199
postfix_expression -> bracket_left · expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {']'}
bitwise_expression -> · binary_or_expression or unary_expression : {']'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {']'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {']'}
expression -> · relational_expression : {']'}
expression -> · short_circuit_and_expression and_and relational_expression : {']'}
expression -> · short_circuit_or_expression or_or relational_expression : {']'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ']' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#200
postfix_expression -> period · member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> period · swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#201
bracket_left -> '[' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#202
period -> '.' · : {}

#203
unary_expression -> and unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#204
unary_expression -> star unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#205
unary_expression -> tilde unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#206
unary_expression -> bang unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#207
unary_expression -> minus unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#208
multiplicative_expression -> multiplicative_expression star · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#209
multiplicative_expression -> multiplicative_expression forward_slash · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#210
multiplicative_expression -> multiplicative_expression modulo · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#211
forward_slash -> '/' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#212
modulo -> '%' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#213
shift_expression -> unary_expression shift_left · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#214
shift_expression -> unary_expression shift_right · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#215
shift_left -> '<<' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#216
shift_right -> '>>' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#217
additive_expression -> additive_expression plus · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#218
additive_expression -> additive_expression minus · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#219
plus -> '+' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#220
binary_xor_expression -> binary_xor_expression xor · unary_expression : {'^'}
bitwise_expression -> binary_xor_expression xor · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
const_literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
const_literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · const_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '^' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#221
xor -> '^' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#222
binary_or_expression -> binary_or_expression or · unary_expression : {'|'}
bitwise_expression -> binary_or_expression or · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
const_literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
const_literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · const_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '{' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#223
or -> '|' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#224
binary_and_expression -> binary_and_expression and · unary_expression : {'&'}
bitwise_expression -> binary_and_expression and · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
bool_literal -> · 'true' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
const_literal -> · float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
const_literal -> · int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /0[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'&' '(' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · const_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · ident : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · bang unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · minus unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · singular_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · star unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · tilde unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#225
relational_expression -> shift_expression less_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#226
relational_expression -> shift_expression greater_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#227
relational_expression -> shift_expression less_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#228
relational_expression -> shift_expression greater_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#229
relational_expression -> shift_expression equal_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#230
relational_expression -> shift_expression not_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#231
greater_than -> '>' · : {'!' '&' '(' ')' '*' ',' '-' ';' '=' '>' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#232
less_than_equal -> '<=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#233
greater_than_equal -> '>=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#234
equal_equal -> '==' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#235
not_equal -> '!=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#236
expression -> short_circuit_and_expression and_and · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and · relational_expression : {'&&'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
relational_expression -> · shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#237
and_and -> '&&' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#238
expression -> short_circuit_or_expression or_or · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or · relational_expression : {'||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
relational_expression -> · shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#239
or_or -> '||' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#240
attribute -> attr 'workgroup_size' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left · expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left · expression comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#241
attribute -> attr 'size' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#242
attribute -> attr 'location' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#243
attribute -> attr 'interpolate' paren_left · interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'interpolate' paren_left · interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#244
attribute -> attr 'id' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#245
attribute -> attr 'group' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#246
attribute -> attr 'builtin' paren_left · builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#247
attribute -> attr 'binding' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#248
attribute -> attr 'align' paren_left · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#249
attribute -> attr 'align' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#250
attribute -> attr 'binding' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#251
attribute -> attr 'builtin' paren_left builtin_value_name · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#252
builtin_value_name -> 'vertex_index' · : {')' ','}

#253
builtin_value_name -> 'instance_index' · : {')' ','}

#254
builtin_value_name -> 'position' · : {')' ','}

#255
builtin_value_name -> 'front_facing' · : {')' ','}

#256
builtin_value_name -> 'frag_depth' · : {')' ','}

#257
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#258
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#259
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#260
builtin_value_name -> 'workgroup_id' · : {')' ','}

#261
builtin_value_name -> 'num_workgroups' · : {')' ','}

#262
builtin_value_name -> 'sample_index' · : {')' ','}

#263
builtin_value_name -> 'sample_mask' · : {')' ','}

#264
attribute -> attr 'group' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#265
attribute -> attr 'id' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#266
attribute -> attr 'interpolate' paren_left interpolation_type_name · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'interpolate' paren_left interpolation_type_name · comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#267
interpolation_type_name -> 'perspective' · : {')' ','}

#268
interpolation_type_name -> 'linear' · : {')' ','}

#269
interpolation_type_name -> 'flat' · : {')' ','}

#270
attribute -> attr 'location' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#271
attribute -> attr 'size' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#272
attribute -> attr 'workgroup_size' paren_left expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left expression · comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left expression · comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#273
expression -> short_circuit_or_expression or_or relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression · : {'||'}

#274
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#275
expression -> short_circuit_and_expression and_and relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression · : {'&&'}

#276
relational_expression -> shift_expression not_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#277
relational_expression -> shift_expression equal_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#278
relational_expression -> shift_expression greater_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#279
relational_expression -> shift_expression less_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#280
relational_expression -> shift_expression greater_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#281
relational_expression -> shift_expression less_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#282
binary_and_expression -> binary_and_expression and unary_expression · : {'&'}
bitwise_expression -> binary_and_expression and unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#283
binary_or_expression -> binary_or_expression or unary_expression · : {'|'}
bitwise_expression -> binary_or_expression or unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#284
binary_xor_expression -> binary_xor_expression xor unary_expression · : {'^'}
bitwise_expression -> binary_xor_expression xor unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#285
additive_expression -> additive_expression minus multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#286
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#287
additive_expression -> additive_expression plus multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#288
shift_expression -> unary_expression shift_right unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#289
shift_expression -> unary_expression shift_left unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#290
multiplicative_expression -> multiplicative_expression modulo unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#291
multiplicative_expression -> multiplicative_expression forward_slash unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#292
multiplicative_expression -> multiplicative_expression star unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#293
postfix_expression -> period member_ident · postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/1.2 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#294
postfix_expression -> period swizzle_name · postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/2.2 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#295
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#296
swizzle_name -> '/[rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#297
swizzle_name -> '/[rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#298
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#299
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#300
swizzle_name -> '/[xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#301
swizzle_name -> '/[xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#302
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#303
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#304
postfix_expression -> bracket_left expression · bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_right -> · ']' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#305
argument_expression_list -> paren_left argument_expression_list/0.1 · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#306
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 · expression argument_expression_list/0.1/0.2 : {')'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#307
argument_expression_list/0.1/0.0 -> argument_expression_list/0.1/0.0/0 · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#308
argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 · argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0 -> · argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0/0.0 -> · expression comma : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {','}
bitwise_expression -> · binary_or_expression or unary_expression : {','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression and_and relational_expression : {','}
expression -> · short_circuit_or_expression or_or relational_expression : {','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#309
argument_expression_list/0.1/0.0/0/0.0 -> expression · comma : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#310
primary_expression -> 'bitcast' less_than type_decl · greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
greater_than -> · '>' : {'('}

#311
type_decl -> ident · : {')' ',' ';' '=' '>' '{' '}'}

#312
type_decl -> type_decl_without_ident · : {')' ',' ';' '=' '>' '{' '}'}

#313
array_type_decl -> 'array' · less_than type_decl array_type_decl/0.3 greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#314
array_type_decl -> 'array' less_than type_decl · array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl/0.3 -> · comma element_count_expression : {'>'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#315
paren_expression -> paren_left expression paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#316
paren_right -> ')' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '->' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' '{' '|' '|=' '||' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#317
type_decl_without_ident -> pointer less_than address_space · comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#318
address_space -> 'function' · : {',' '>'}

#319
address_space -> 'private' · : {',' '>'}

#320
address_space -> 'workgroup' · : {',' '>'}

#321
address_space -> 'uniform' · : {',' '>'}

#322
address_space -> 'storage' · : {',' '>'}

#323
texture_and_sampler_types -> sampled_texture_type less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#324
texture_and_sampler_types -> multisampled_texture_type less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#325
texture_and_sampler_types -> storage_texture_type less_than texel_format · comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}

#326
texel_format -> 'rgba8unorm' · : {','}

#327
texel_format -> 'rgba8snorm' · : {','}

#328
texel_format -> 'rgba8uint' · : {','}

#329
texel_format -> 'rgba8sint' · : {','}

#330
texel_format -> 'rgba16uint' · : {','}

#331
texel_format -> 'rgba16sint' · : {','}

#332
texel_format -> 'rgba16float' · : {','}

#333
texel_format -> 'r32uint' · : {','}

#334
texel_format -> 'r32sint' · : {','}

#335
texel_format -> 'r32float' · : {','}

#336
texel_format -> 'rg32uint' · : {','}

#337
texel_format -> 'rg32sint' · : {','}

#338
texel_format -> 'rg32float' · : {','}

#339
texel_format -> 'rgba32uint' · : {','}

#340
texel_format -> 'rgba32sint' · : {','}

#341
texel_format -> 'rgba32float' · : {','}

#342
compound_statement -> brace_left compound_statement/0.1 · brace_right : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
brace_right -> · '}' : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#343
compound_statement/0.1 -> compound_statement/0.1/0 · : {'}'}

#344
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#345
statement -> semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#346
statement -> return_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#347
statement -> if_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#348
statement -> switch_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#349
statement -> loop_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#350
statement -> for_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#351
statement -> while_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#352
statement -> func_call_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#353
statement -> variable_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#354
statement -> break_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#355
statement -> continue_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#356
statement -> 'discard' · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#357
statement -> assignment_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#358
statement -> compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#359
statement -> increment_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#360
statement -> decrement_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#361
statement -> static_assert_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#362
return_statement -> 'return' · return_statement/0.1 : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> · expression : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#363
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1 -> · if_statement/0.1/0 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#364
switch_statement -> 'switch' · expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#365
loop_statement -> 'loop' · brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#366
for_statement -> 'for' · paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*' ';' 'const' 'let' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#367
while_statement -> 'while' · expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#368
func_call_statement -> ident · argument_expression_list : {')' ';'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {')' ';'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#369
variable_statement -> variable_decl · : {';'}

#370
variable_statement -> 'let' · variable_statement/2.1 equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}
variable_statement/2.1 -> · ident : {'='}
variable_statement/2.1 -> · variable_ident_decl : {'='}

#371
variable_statement -> 'const' · variable_statement/3.1 equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}
variable_statement/3.1 -> · ident : {'='}
variable_statement/3.1 -> · variable_ident_decl : {'='}

#372
break_statement -> 'break' · : {';'}

#373
continue_statement -> 'continue' · : {';'}

#374
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression · minus_minus : {')' ';'}
increment_statement -> lhs_expression · plus_plus : {')' ';'}
and_equal -> · '&=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
assignment_statement/0.1 -> · equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · and_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · division_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · minus_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · modulo_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · or_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · plus_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · shift_left_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · shift_right_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · times_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · xor_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
division_equal -> · '/=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
minus_equal -> · '-=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
minus_minus -> · '--' : {')' ';'}
modulo_equal -> · '%=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
or_equal -> · '|=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus_equal -> · '+=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus_plus -> · '++' : {')' ';'}
shift_left_equal -> · '<<=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right_equal -> · '>>=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
times_equal -> · '*=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
xor_equal -> · '^=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#375
if_clause -> 'if' · expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#376
lhs_expression -> lhs_expression/0.0 · core_lhs_expression lhs_expression/0.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}

#377
lhs_expression/0.0 -> lhs_expression/0.0/0 · : {'('}

#378
lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 · lhs_expression/0.0/0 : {'('}
and -> · '&' : {'&' '(' '*'}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#379
lhs_expression/0.0/0/0.0 -> star · : {'&' '(' '*'}

#380
lhs_expression/0.0/0/0.0 -> and · : {'&' '(' '*'}

#381
function_header -> 'fn' ident paren_left · function_header/0.3 paren_right function_header/0.5 : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.3 -> · param_list : {')'}
param -> · param/0.0 variable_ident_decl : {','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list -> · param_list/0.0 param param_list/0.2 : {')'}
param_list/0.0 -> · param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0 -> · param_list/0.0/0/0.0 param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0/0.0 -> · param comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#382
struct_body_decl -> brace_left struct_body_decl/0.1 · struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#383
struct_body_decl/0.1 -> struct_body_decl/0.1/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#384
struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 · struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_body_decl/0.1/0 -> · struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0/0.0 -> · struct_member comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#385
struct_body_decl/0.1/0/0.0 -> struct_member · comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#386
struct_member -> struct_member/0.0 · member_ident colon type_decl : {',' '}'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#387
struct_member/0.0 -> struct_member/0.0/0 · : {}

#388
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#389
type_alias_decl -> 'type' ident equal type_decl · : {';'}

#390
global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 · : {';'}

#391
global_constant_decl/1.3 -> equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#392
global_constant_decl -> 'const' global_constant_decl/0.1 equal expression · : {';'}

#393
variable_ident_decl -> ident colon type_decl · : {')' ',' ';' '='}

#394
global_variable_decl/0.2 -> equal expression · : {';'}

#395
variable_qualifier -> less_than address_space · variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {}
variable_qualifier/0.2 -> · comma access_mode : {'>'}

#396
variable_decl -> 'var' variable_decl/0.1 variable_decl/0.2 · : {';' '='}

#397
variable_decl/0.2 -> ident · : {';' '='}
variable_ident_decl -> ident · colon type_decl : {';' '='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#398
variable_decl/0.2 -> variable_ident_decl · : {';' '='}

#399
variable_qualifier -> less_than address_space variable_qualifier/0.2 · greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
greater_than -> · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#400
variable_qualifier/0.2 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#401
comma -> ',' · : {'!' '&' '(' ')' '*' '-' ':' '@' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#402
global_constant_decl/1.3 -> equal expression · : {';'}

#403
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#404
struct_member -> struct_member/0.0 member_ident · colon type_decl : {',' '}'}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#405
struct_body_decl/0.1/0/0.0 -> struct_member comma · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#406
struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#407
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member · struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
comma -> · ',' : {'}'}
struct_body_decl/0.3 -> · comma : {'}'}

#408
function_header -> 'fn' ident paren_left function_header/0.3 · paren_right function_header/0.5 : {'{'}
paren_right -> · ')' : {'->' '{'}

#409
function_header/0.3 -> param_list · : {')'}

#410
param_list -> param_list/0.0 · param param_list/0.2 : {')'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> · param/0.0 variable_ident_decl : {')' ','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#411
param_list/0.0 -> param_list/0.0/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#412
param_list/0.0/0 -> param_list/0.0/0/0.0 · param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> · param/0.0 variable_ident_decl : {','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0 -> · param_list/0.0/0/0.0 param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0/0.0 -> · param comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#413
param_list/0.0/0/0.0 -> param · comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#414
param -> param/0.0 · variable_ident_decl : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
variable_ident_decl -> · ident colon type_decl : {')' ','}

#415
param/0.0 -> param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#416
param/0.0/0 -> attribute · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#417
lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 · : {'('}

#418
lhs_expression -> lhs_expression/0.0 core_lhs_expression · lhs_expression/0.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
lhs_expression/0.2 -> · postfix_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#419
core_lhs_expression -> ident · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#420
core_lhs_expression -> paren_left · lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
and -> · '&' : {'&' '(' '*'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {')'}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#421
if_clause -> 'if' expression · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#422
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {')' ';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ';'}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#423
increment_statement -> lhs_expression plus_plus · : {')' ';'}

#424
decrement_statement -> lhs_expression minus_minus · : {')' ';'}

#425
assignment_statement/0.1 -> equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#426
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#427
plus_plus -> '++' · : {')' ';'}

#428
minus_minus -> '--' · : {')' ';'}

#429
compound_assignment_operator -> plus_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#430
compound_assignment_operator -> minus_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#431
compound_assignment_operator -> times_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#432
compound_assignment_operator -> division_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#433
compound_assignment_operator -> modulo_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#434
compound_assignment_operator -> and_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#435
compound_assignment_operator -> or_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#436
compound_assignment_operator -> xor_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#437
compound_assignment_operator -> shift_right_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#438
compound_assignment_operator -> shift_left_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#439
plus_equal -> '+=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#440
minus_equal -> '-=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#441
times_equal -> '*=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#442
division_equal -> '/=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#443
modulo_equal -> '%=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#444
and_equal -> '&=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#445
or_equal -> '|=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#446
xor_equal -> '^=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#447
shift_right_equal -> '>>=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#448
shift_left_equal -> '<<=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#449
variable_statement -> 'const' variable_statement/3.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#450
variable_ident_decl -> ident · colon type_decl : {'='}
variable_statement/3.1 -> ident · : {'='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#451
variable_statement/3.1 -> variable_ident_decl · : {'='}

#452
variable_statement -> 'let' variable_statement/2.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#453
variable_ident_decl -> ident · colon type_decl : {'='}
variable_statement/2.1 -> ident · : {'='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#454
variable_statement/2.1 -> variable_ident_decl · : {'='}

#455
func_call_statement -> ident argument_expression_list · : {')' ';'}

#456
while_statement -> 'while' expression · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#457
for_statement -> 'for' paren_left · for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_header -> · for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
for_header/0.0 -> · for_init : {';'}
for_init -> · assignment_statement : {';'}
for_init -> · decrement_statement : {';'}
for_init -> · func_call_statement : {';'}
for_init -> · increment_statement : {';'}
for_init -> · variable_statement : {';'}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}

#458
loop_statement -> 'loop' brace_left · loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'continuing' '}'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#459
switch_statement -> 'switch' expression · brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'case' 'default' '}'}

#460
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> · 'else' compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> · else_clause : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#461
if_statement/0.1 -> if_statement/0.1/0 · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#462
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#463
else_if_clause -> 'else' · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#464
return_statement -> 'return' return_statement/0.1 · : {';'}

#465
return_statement/0.1 -> expression · : {';'}

#466
statement -> static_assert_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#467
statement -> decrement_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#468
statement -> increment_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#469
statement -> assignment_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#470
statement -> 'discard' semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#471
statement -> continue_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#472
statement -> break_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#473
statement -> variable_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#474
statement -> func_call_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#475
statement -> return_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#476
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {'}'}

#477
compound_statement -> brace_left compound_statement/0.1 brace_right · : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#478
brace_right -> '}' · : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#479
texture_and_sampler_types -> storage_texture_type less_than texel_format comma · access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#480
texture_and_sampler_types -> multisampled_texture_type less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#481
texture_and_sampler_types -> sampled_texture_type less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#482
type_decl_without_ident -> pointer less_than address_space comma · type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_decl -> · ident : {',' '>'}
type_decl -> · type_decl_without_ident : {',' '>'}
type_decl_without_ident -> · 'bool' : {',' '>'}
type_decl_without_ident -> · array_type_decl : {',' '>'}
type_decl_without_ident -> · float16 : {',' '>'}
type_decl_without_ident -> · float32 : {',' '>'}
type_decl_without_ident -> · int32 : {',' '>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '>'}
type_decl_without_ident -> · texture_and_sampler_types : {',' '>'}
type_decl_without_ident -> · uint32 : {',' '>'}
uint32 -> · 'u32' : {',' '>'}

#483
array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#484
array_type_decl/0.3 -> comma · element_count_expression : {'>'}
additive_expression -> · additive_expression minus multiplicative_expression : {'+' '-' '>'}
additive_expression -> · additive_expression plus multiplicative_expression : {'+' '-' '>'}
additive_expression -> · multiplicative_expression : {'+' '-' '>'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'>'}
bitwise_expression -> · binary_or_expression or unary_expression : {'>'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'>'}
bool_literal -> · 'false' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
bool_literal -> · 'true' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
const_literal -> · float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
const_literal -> · int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /0[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
element_count_expression -> · additive_expression : {'>'}
element_count_expression -> · bitwise_expression : {'>'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
float_literal -> · hex_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&' '(' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · callable argument_expression_list : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · const_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · ident : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · bang unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · minus unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · singular_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · star unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · tilde unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#485
primary_expression -> 'bitcast' less_than type_decl greater_than · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#486
argument_expression_list/0.1/0.0/0/0.0 -> expression comma · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#487
argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#488
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression · argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.2 -> · comma : {')'}
comma -> · ',' : {')'}

#489
argument_expression_list -> paren_left argument_expression_list/0.1 paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#490
postfix_expression -> bracket_left expression bracket_right · postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/0.3 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#491
bracket_right -> ']' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#492
postfix_expression -> period swizzle_name postfix_expression/2.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#493
postfix_expression/2.2 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#494
postfix_expression -> period member_ident postfix_expression/1.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#495
postfix_expression/1.2 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#496
attribute -> attr 'workgroup_size' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#497
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left expression comma · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left expression comma · expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#498
attrib_end -> attrib_end/0.0 · paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#499
attribute -> attr 'size' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#500
attrib_end/0.0 -> comma · : {')'}

#501
attribute -> attr 'location' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#502
attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#503
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'interpolate' paren_left interpolation_type_name comma · interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#504
attribute -> attr 'id' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#505
attribute -> attr 'group' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#506
attribute -> attr 'builtin' paren_left builtin_value_name attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#507
attribute -> attr 'binding' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#508
attribute -> attr 'align' paren_left expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#509
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#510
interpolation_sample_name -> 'center' · : {')' ','}

#511
interpolation_sample_name -> 'centroid' · : {')' ','}

#512
interpolation_sample_name -> 'sample' · : {')' ','}

#513
attrib_end -> attrib_end/0.0 paren_right · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#514
attribute -> attr 'workgroup_size' paren_left expression comma expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left expression comma expression · comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#515
postfix_expression -> bracket_left expression bracket_right postfix_expression/0.3 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#516
postfix_expression/0.3 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#517
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 · : {')'}

#518
argument_expression_list/0.1/0.2 -> comma · : {')'}

#519
primary_expression -> 'bitcast' less_than type_decl greater_than paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#520
array_type_decl/0.3 -> comma element_count_expression · : {'>'}

#521
additive_expression -> additive_expression · minus multiplicative_expression : {'+' '-' '>'}
additive_expression -> additive_expression · plus multiplicative_expression : {'+' '-' '>'}
element_count_expression -> additive_expression · : {'>'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#522
element_count_expression -> bitwise_expression · : {'>'}

#523
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'%' '*' '+' '-' '/' '>'}

#524
array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#525
type_decl_without_ident -> pointer less_than address_space comma type_decl · type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}
type_decl_without_ident/7.5 -> · comma access_mode : {'>'}

#526
texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#527
access_mode -> 'read' · : {'>'}

#528
access_mode -> 'write' · : {'>'}

#529
access_mode -> 'read_write' · : {'>'}

#530
else_if_clause -> 'else' 'if' · expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#531
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#532
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#533
if_statement/0.2 -> else_clause · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#534
else_clause -> 'else' · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#535
switch_statement -> 'switch' expression brace_left · switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body -> · 'case' case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
switch_body -> · 'default' switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
switch_statement/0.3 -> · switch_statement/0.3/0 : {'}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#536
loop_statement -> 'loop' brace_left loop_statement/0.2 · loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.3 -> · continuing_statement : {'}'}

#537
loop_statement/0.2 -> loop_statement/0.2/0 · : {'continuing' '}'}

#538
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {'continuing' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#539
for_statement -> 'for' paren_left for_header · paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'{'}

#540
for_header -> for_header/0.0 · semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'!' '&' '(' '*' '-' ';' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#541
for_header/0.0 -> for_init · : {';'}

#542
for_init -> variable_statement · : {';'}

#543
for_init -> increment_statement · : {';'}

#544
for_init -> decrement_statement · : {';'}

#545
for_init -> assignment_statement · : {';'}

#546
for_init -> func_call_statement · : {';'}

#547
while_statement -> 'while' expression compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#548
variable_statement -> 'let' variable_statement/2.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#549
variable_statement -> 'const' variable_statement/3.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#550
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {')' ';'}

#551
if_clause -> 'if' expression compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#552
core_lhs_expression -> paren_left lhs_expression · paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_right -> · ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#553
lhs_expression -> lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#554
lhs_expression/0.2 -> postfix_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#555
param/0.0/0 -> attribute param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#556
param -> param/0.0 variable_ident_decl · : {')' ','}

#557
variable_ident_decl -> ident · colon type_decl : {')' ','}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#558
param_list/0.0/0/0.0 -> param comma · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#559
param_list/0.0/0 -> param_list/0.0/0/0.0 param_list/0.0/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#560
param_list -> param_list/0.0 param · param_list/0.2 : {')'}
comma -> · ',' : {')'}
param_list/0.2 -> · comma : {')'}

#561
function_header -> 'fn' ident paren_left function_header/0.3 paren_right · function_header/0.5 : {'{'}
arrow -> · '->' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5 -> · arrow function_header/0.5/0.1 type_decl : {'{'}

#562
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 · brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_right -> · '}' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#563
struct_body_decl/0.3 -> comma · : {'}'}

#564
struct_member -> struct_member/0.0 member_ident colon · type_decl : {',' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '}'}
depth_texture_type -> · 'texture_depth_2d' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '}'}
float16 -> · 'f16' : {',' '}'}
float32 -> · 'f32' : {',' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '}'}
int32 -> · 'i32' : {',' '}'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '}'}
sampler_type -> · 'sampler_comparison' : {',' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '}'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '}'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '}'}
texture_and_sampler_types -> · sampler_type : {',' '}'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '}'}
type_decl -> · ident : {',' '}'}
type_decl -> · type_decl_without_ident : {',' '}'}
type_decl_without_ident -> · 'bool' : {',' '}'}
type_decl_without_ident -> · array_type_decl : {',' '}'}
type_decl_without_ident -> · float16 : {',' '}'}
type_decl_without_ident -> · float32 : {',' '}'}
type_decl_without_ident -> · int32 : {',' '}'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '}'}
type_decl_without_ident -> · texture_and_sampler_types : {',' '}'}
type_decl_without_ident -> · uint32 : {',' '}'}
uint32 -> · 'u32' : {',' '}'}

#565
variable_qualifier/0.2 -> comma access_mode · : {'>'}

#566
variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#567
struct_member -> struct_member/0.0 member_ident colon type_decl · : {',' '}'}

#568
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#569
function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 · : {'{'}

#570
function_header/0.5 -> arrow · function_header/0.5/0.1 type_decl : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'compute' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'const' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'fragment' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'invariant' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'vertex' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#571
arrow -> '->' · : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#572
param_list -> param_list/0.0 param param_list/0.2 · : {')'}

#573
param_list/0.2 -> comma · : {')'}

#574
core_lhs_expression -> paren_left lhs_expression paren_right · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#575
variable_statement -> 'const' variable_statement/3.1 equal expression · : {';'}

#576
variable_statement -> 'let' variable_statement/2.1 equal expression · : {';'}

#577
for_header -> for_header/0.0 semicolon · for_header/0.2 semicolon for_header/0.4 : {')'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
for_header/0.2 -> · expression : {';'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#578
for_statement -> 'for' paren_left for_header paren_right · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#579
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {'continuing' '}'}

#580
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 · brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#581
loop_statement/0.3 -> continuing_statement · : {'}'}

#582
continuing_statement -> 'continuing' · continuing_compound_statement : {'}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_compound_statement -> · brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}

#583
switch_statement -> 'switch' expression brace_left switch_statement/0.3 · brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#584
switch_statement/0.3 -> switch_statement/0.3/0 · : {'}'}

#585
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {'}'}
switch_body -> · 'case' case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
switch_body -> · 'default' switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#586
switch_body -> 'case' · case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selectors -> · expression case_selectors/0.1 case_selectors/0.2 : {':' '{'}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#587
switch_body -> 'default' · switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
switch_body/1.1 -> · colon : {'{'}

#588
else_clause -> 'else' compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#589
else_if_clause -> 'else' 'if' expression · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#590
texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#591
type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#592
type_decl_without_ident/7.5 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#593
attribute -> attr 'workgroup_size' paren_left expression comma expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#594
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left expression comma expression comma · expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#595
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#596
attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#597
type_decl_without_ident/7.5 -> comma access_mode · : {'>'}

#598
type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#599
else_if_clause -> 'else' 'if' expression compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#600
switch_body -> 'default' switch_body/1.1 · case_compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_compound_statement -> · brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}

#601
switch_body/1.1 -> colon · : {'{'}

#602
switch_body -> 'case' case_selectors · switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
switch_body/0.2 -> · colon : {'{'}

#603
case_selectors -> expression · case_selectors/0.1 case_selectors/0.2 : {':' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma expression : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#604
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {'}'}

#605
switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#606
continuing_statement -> 'continuing' continuing_compound_statement · : {'}'}

#607
continuing_compound_statement -> brace_left · continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break' '}'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#608
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#609
for_statement -> 'for' paren_left for_header paren_right compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#610
for_header -> for_header/0.0 semicolon for_header/0.2 · semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'&' '(' ')' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#611
for_header/0.2 -> expression · : {';'}

#612
function_header/0.5 -> arrow function_header/0.5/0.1 · type_decl : {'{'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'{'}
depth_texture_type -> · 'texture_depth_2d' : {'{'}
depth_texture_type -> · 'texture_depth_2d_array' : {'{'}
depth_texture_type -> · 'texture_depth_cube' : {'{'}
depth_texture_type -> · 'texture_depth_cube_array' : {'{'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'{'}
float16 -> · 'f16' : {'{'}
float32 -> · 'f32' : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}
int32 -> · 'i32' : {'{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'{'}
sampler_type -> · 'sampler_comparison' : {'{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'{'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'{'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'{'}
texture_and_sampler_types -> · sampler_type : {'{'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'{'}
type_decl -> · ident : {'{'}
type_decl -> · type_decl_without_ident : {'{'}
type_decl_without_ident -> · 'bool' : {'{'}
type_decl_without_ident -> · array_type_decl : {'{'}
type_decl_without_ident -> · float16 : {'{'}
type_decl_without_ident -> · float32 : {'{'}
type_decl_without_ident -> · int32 : {'{'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'{'}
type_decl_without_ident -> · texture_and_sampler_types : {'{'}
type_decl_without_ident -> · uint32 : {'{'}
uint32 -> · 'u32' : {'{'}

#613
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#614
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'compute' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'const' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'fragment' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'invariant' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'vertex' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#615
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#616
function_header/0.5 -> arrow function_header/0.5/0.1 type_decl · : {'{'}

#617
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon · for_header/0.4 : {')'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {')'}
decrement_statement -> · lhs_expression minus_minus : {')'}
for_header/0.4 -> · for_update : {')'}
for_update -> · assignment_statement : {')'}
for_update -> · decrement_statement : {')'}
for_update -> · func_call_statement : {')'}
for_update -> · increment_statement : {')'}
func_call_statement -> · ident argument_expression_list : {')'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
increment_statement -> · lhs_expression plus_plus : {')'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#618
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 · continuing_compound_statement/0.2 brace_right : {'}'}
break_if_statement -> · 'break' 'if' expression semicolon : {'}'}
continuing_compound_statement/0.2 -> · break_if_statement : {'}'}

#619
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break' '}'}

#620
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#621
case_selectors -> expression case_selectors/0.1 · case_selectors/0.2 : {':' '{'}
case_selectors/0.2 -> · comma : {':' '{'}
comma -> · ',' : {':' '{'}

#622
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '{'}

#623
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma expression : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#624
case_selectors/0.1/0/0.0 -> comma · expression : {',' ':' '{'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#625
switch_body -> 'case' case_selectors switch_body/0.2 · case_compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_compound_statement -> · brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}

#626
switch_body/0.2 -> colon · : {'{'}

#627
switch_body -> 'default' switch_body/1.1 case_compound_statement · : {'case' 'default' '}'}

#628
case_compound_statement -> brace_left · case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
case_compound_statement/0.1 -> · case_compound_statement/0.1/0 : {'fallthrough' '}'}
case_compound_statement/0.1/0 -> · statement case_compound_statement/0.1/0 : {'fallthrough' '}'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#629
attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#630
case_compound_statement -> brace_left case_compound_statement/0.1 · case_compound_statement/0.2 brace_right : {'case' 'default' '}'}
case_compound_statement/0.2 -> · fallthrough_statement : {'}'}
fallthrough_statement -> · 'fallthrough' semicolon : {'}'}

#631
case_compound_statement/0.1 -> case_compound_statement/0.1/0 · : {'fallthrough' '}'}

#632
case_compound_statement/0.1/0 -> statement · case_compound_statement/0.1/0 : {'fallthrough' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
case_compound_statement/0.1/0 -> · statement case_compound_statement/0.1/0 : {'fallthrough' '}'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#633
switch_body -> 'case' case_selectors switch_body/0.2 case_compound_statement · : {'case' 'default' '}'}

#634
case_selectors/0.1/0/0.0 -> comma expression · : {',' ':' '{'}

#635
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '{'}

#636
case_selectors -> expression case_selectors/0.1 case_selectors/0.2 · : {':' '{'}

#637
case_selectors/0.2 -> comma · : {':' '{'}

#638
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break' '}'}

#639
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 · brace_right : {'}'}
brace_right -> · '}' : {'}'}

#640
continuing_compound_statement/0.2 -> break_if_statement · : {'}'}

#641
break_if_statement -> 'break' · 'if' expression semicolon : {'}'}

#642
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 · : {')'}

#643
for_header/0.4 -> for_update · : {')'}

#644
for_update -> increment_statement · : {')'}

#645
for_update -> decrement_statement · : {')'}

#646
for_update -> assignment_statement · : {')'}

#647
for_update -> func_call_statement · : {')'}

#648
break_if_statement -> 'break' 'if' · expression semicolon : {'}'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#649
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right · : {'}'}

#650
case_compound_statement/0.1/0 -> statement case_compound_statement/0.1/0 · : {'fallthrough' '}'}

#651
case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 · brace_right : {'case' 'default' '}'}
brace_right -> · '}' : {'case' 'default' '}'}

#652
case_compound_statement/0.2 -> fallthrough_statement · : {'}'}

#653
fallthrough_statement -> 'fallthrough' · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#654
fallthrough_statement -> 'fallthrough' semicolon · : {'}'}

#655
case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right · : {'case' 'default' '}'}

#656
break_if_statement -> 'break' 'if' expression · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#657
break_if_statement -> 'break' 'if' expression semicolon · : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 extension_name -> 'f16' ·
r#2 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#3 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#4 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#5 global_decl -> semicolon ·
r#6 global_decl -> struct_decl ·
r#7 global_decl -> function_decl ·
r#8 semicolon -> ';' ·
r#9 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#10 global_constant_decl/1.0 -> global_constant_decl/1.0/0 ·
r#11 function_decl/0.0 -> function_decl/0.0/0 ·
r#12 attr -> '@' ·
r#13 attribute -> attr 'const' ·
r#14 attribute -> attr 'invariant' ·
r#15 attribute -> attr 'vertex' ·
r#16 attribute -> attr 'fragment' ·
r#17 attribute -> attr 'compute' ·
r#18 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#19 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 ·
r#20 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#21 static_assert_statement -> 'static_assert' expression ·
r#22 expression -> relational_expression ·
r#23 short_circuit_or_expression -> relational_expression ·
r#24 short_circuit_and_expression -> relational_expression ·
r#25 expression -> bitwise_expression ·
r#26 relational_expression -> shift_expression ·
r#27 shift_expression -> additive_expression ·
r#28 binary_and_expression -> unary_expression ·
r#29 binary_or_expression -> unary_expression ·
r#30 binary_xor_expression -> unary_expression ·
r#31 multiplicative_expression -> unary_expression ·
r#32 additive_expression -> multiplicative_expression ·
r#33 unary_expression -> singular_expression ·
r#34 minus -> '-' ·
r#35 bang -> '!' ·
r#36 tilde -> '~' ·
r#37 star -> '*' ·
r#38 and -> '&' ·
r#39 primary_expression -> ident ·
r#40 callable -> ident ·
r#41 primary_expression -> const_literal ·
r#42 primary_expression -> paren_expression ·
r#43 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#44 callable -> type_decl_without_ident ·
r#45 callable -> vec_prefix ·
r#46 callable -> mat_prefix ·
r#47 callable -> 'array' ·
r#48 const_literal -> int_literal ·
r#49 const_literal -> float_literal ·
r#50 const_literal -> bool_literal ·
r#51 type_decl_without_ident -> 'bool' ·
r#52 type_decl_without_ident -> float32 ·
r#53 type_decl_without_ident -> float16 ·
r#54 type_decl_without_ident -> int32 ·
r#55 type_decl_without_ident -> uint32 ·
r#56 type_decl_without_ident -> array_type_decl ·
r#57 type_decl_without_ident -> texture_and_sampler_types ·
r#58 vec_prefix -> 'vec2' ·
r#59 vec_prefix -> 'vec3' ·
r#60 vec_prefix -> 'vec4' ·
r#61 mat_prefix -> 'mat2x2' ·
r#62 mat_prefix -> 'mat2x3' ·
r#63 mat_prefix -> 'mat2x4' ·
r#64 mat_prefix -> 'mat3x2' ·
r#65 mat_prefix -> 'mat3x3' ·
r#66 mat_prefix -> 'mat3x4' ·
r#67 mat_prefix -> 'mat4x2' ·
r#68 mat_prefix -> 'mat4x3' ·
r#69 mat_prefix -> 'mat4x4' ·
r#70 int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#71 int_literal -> /0[iu]?/ ·
r#72 int_literal -> /[1-9][0-9]*[iu]?/ ·
r#73 float_literal -> decimal_float_literal ·
r#74 float_literal -> hex_float_literal ·
r#75 bool_literal -> 'true' ·
r#76 bool_literal -> 'false' ·
r#77 paren_left -> '(' ·
r#78 float32 -> 'f32' ·
r#79 float16 -> 'f16' ·
r#80 int32 -> 'i32' ·
r#81 uint32 -> 'u32' ·
r#82 pointer -> 'ptr' ·
r#83 texture_and_sampler_types -> sampler_type ·
r#84 texture_and_sampler_types -> depth_texture_type ·
r#85 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#86 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#87 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#88 decimal_float_literal -> /0[fh]/ ·
r#89 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#90 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#91 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#92 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#93 sampler_type -> 'sampler' ·
r#94 sampler_type -> 'sampler_comparison' ·
r#95 depth_texture_type -> 'texture_depth_2d' ·
r#96 depth_texture_type -> 'texture_depth_2d_array' ·
r#97 depth_texture_type -> 'texture_depth_cube' ·
r#98 depth_texture_type -> 'texture_depth_cube_array' ·
r#99 depth_texture_type -> 'texture_depth_multisampled_2d' ·
r#100 sampled_texture_type -> 'texture_1d' ·
r#101 sampled_texture_type -> 'texture_2d' ·
r#102 sampled_texture_type -> 'texture_2d_array' ·
r#103 sampled_texture_type -> 'texture_3d' ·
r#104 sampled_texture_type -> 'texture_cube' ·
r#105 sampled_texture_type -> 'texture_cube_array' ·
r#106 multisampled_texture_type -> 'texture_multisampled_2d' ·
r#107 storage_texture_type -> 'texture_storage_1d' ·
r#108 storage_texture_type -> 'texture_storage_2d' ·
r#109 storage_texture_type -> 'texture_storage_2d_array' ·
r#110 storage_texture_type -> 'texture_storage_3d' ·
r#111 global_constant_decl/0.1 -> ident ·
r#112 global_constant_decl/0.1 -> variable_ident_decl ·
r#113 global_decl -> static_assert_statement semicolon ·
r#114 global_decl -> type_alias_decl semicolon ·
r#115 global_decl -> global_constant_decl semicolon ·
r#116 global_decl -> global_variable_decl semicolon ·
r#117 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#118 global_directive -> 'enable' extension_name semicolon ·
r#119 variable_decl/0.1 -> variable_qualifier ·
r#120 less_than -> '<' ·
r#121 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ·
r#122 equal -> '=' ·
r#123 colon -> ':' ·
r#124 global_constant_decl/1.2 -> ident ·
r#125 global_constant_decl/1.2 -> variable_ident_decl ·
r#126 struct_decl -> 'struct' ident struct_body_decl ·
r#127 brace_left -> '{' ·
r#128 function_decl -> function_decl/0.0 function_header compound_statement ·
r#129 primary_expression -> callable argument_expression_list ·
r#130 singular_expression -> primary_expression singular_expression/0.1 ·
r#131 singular_expression/0.1 -> postfix_expression ·
r#132 bracket_left -> '[' ·
r#133 unary_expression -> and unary_expression ·
r#134 unary_expression -> star unary_expression ·
r#135 unary_expression -> tilde unary_expression ·
r#136 unary_expression -> bang unary_expression ·
r#137 unary_expression -> minus unary_expression ·
r#138 forward_slash -> '/' ·
r#139 modulo -> '%' ·
r#140 shift_left -> '<<' ·
r#141 shift_right -> '>>' ·
r#142 plus -> '+' ·
r#143 xor -> '^' ·
r#144 or -> '|' ·
r#145 greater_than -> '>' ·
r#146 less_than_equal -> '<=' ·
r#147 greater_than_equal -> '>=' ·
r#148 equal_equal -> '==' ·
r#149 not_equal -> '!=' ·
r#150 and_and -> '&&' ·
r#151 or_or -> '||' ·
r#152 builtin_value_name -> 'vertex_index' ·
r#153 builtin_value_name -> 'instance_index' ·
r#154 builtin_value_name -> 'position' ·
r#155 builtin_value_name -> 'front_facing' ·
r#156 builtin_value_name -> 'frag_depth' ·
r#157 builtin_value_name -> 'local_invocation_id' ·
r#158 builtin_value_name -> 'local_invocation_index' ·
r#159 builtin_value_name -> 'global_invocation_id' ·
r#160 builtin_value_name -> 'workgroup_id' ·
r#161 builtin_value_name -> 'num_workgroups' ·
r#162 builtin_value_name -> 'sample_index' ·
r#163 builtin_value_name -> 'sample_mask' ·
r#164 interpolation_type_name -> 'perspective' ·
r#165 interpolation_type_name -> 'linear' ·
r#166 interpolation_type_name -> 'flat' ·
r#167 expression -> short_circuit_or_expression or_or relational_expression ·
r#168 short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression ·
r#169 expression -> short_circuit_and_expression and_and relational_expression ·
r#170 short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression ·
r#171 relational_expression -> shift_expression not_equal shift_expression ·
r#172 relational_expression -> shift_expression equal_equal shift_expression ·
r#173 relational_expression -> shift_expression greater_than_equal shift_expression ·
r#174 relational_expression -> shift_expression less_than_equal shift_expression ·
r#175 relational_expression -> shift_expression greater_than shift_expression ·
r#176 relational_expression -> shift_expression less_than shift_expression ·
r#177 bitwise_expression -> binary_and_expression and unary_expression ·
r#178 binary_and_expression -> binary_and_expression and unary_expression ·
r#179 bitwise_expression -> binary_or_expression or unary_expression ·
r#180 binary_or_expression -> binary_or_expression or unary_expression ·
r#181 bitwise_expression -> binary_xor_expression xor unary_expression ·
r#182 binary_xor_expression -> binary_xor_expression xor unary_expression ·
r#183 additive_expression -> additive_expression minus multiplicative_expression ·
r#184 additive_expression -> additive_expression plus multiplicative_expression ·
r#185 shift_expression -> unary_expression shift_right unary_expression ·
r#186 shift_expression -> unary_expression shift_left unary_expression ·
r#187 multiplicative_expression -> multiplicative_expression modulo unary_expression ·
r#188 multiplicative_expression -> multiplicative_expression forward_slash unary_expression ·
r#189 multiplicative_expression -> multiplicative_expression star unary_expression ·
r#190 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#191 swizzle_name -> '/[rgba]/' ·
r#192 swizzle_name -> '/[rgba][rgba]/' ·
r#193 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#194 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#195 swizzle_name -> '/[xyzw]/' ·
r#196 swizzle_name -> '/[xyzw][xyzw]/' ·
r#197 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#198 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#199 argument_expression_list/0.1/0.0 -> argument_expression_list/0.1/0.0/0 ·
r#200 type_decl -> ident ·
r#201 type_decl -> type_decl_without_ident ·
r#202 paren_expression -> paren_left expression paren_right ·
r#203 paren_right -> ')' ·
r#204 address_space -> 'function' ·
r#205 address_space -> 'private' ·
r#206 address_space -> 'workgroup' ·
r#207 address_space -> 'uniform' ·
r#208 address_space -> 'storage' ·
r#209 texel_format -> 'rgba8unorm' ·
r#210 texel_format -> 'rgba8snorm' ·
r#211 texel_format -> 'rgba8uint' ·
r#212 texel_format -> 'rgba8sint' ·
r#213 texel_format -> 'rgba16uint' ·
r#214 texel_format -> 'rgba16sint' ·
r#215 texel_format -> 'rgba16float' ·
r#216 texel_format -> 'r32uint' ·
r#217 texel_format -> 'r32sint' ·
r#218 texel_format -> 'r32float' ·
r#219 texel_format -> 'rg32uint' ·
r#220 texel_format -> 'rg32sint' ·
r#221 texel_format -> 'rg32float' ·
r#222 texel_format -> 'rgba32uint' ·
r#223 texel_format -> 'rgba32sint' ·
r#224 texel_format -> 'rgba32float' ·
r#225 compound_statement/0.1 -> compound_statement/0.1/0 ·
r#226 statement -> semicolon ·
r#227 statement -> if_statement ·
r#228 statement -> switch_statement ·
r#229 statement -> loop_statement ·
r#230 statement -> for_statement ·
r#231 statement -> while_statement ·
r#232 statement -> compound_statement ·
r#233 variable_statement -> variable_decl ·
r#234 break_statement -> 'break' ·
r#235 continue_statement -> 'continue' ·
r#236 lhs_expression/0.0 -> lhs_expression/0.0/0 ·
r#237 lhs_expression/0.0/0/0.0 -> star ·
r#238 lhs_expression/0.0/0/0.0 -> and ·
r#239 struct_body_decl/0.1 -> struct_body_decl/0.1/0 ·
r#240 type_alias_decl -> 'type' ident equal type_decl ·
r#241 global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 ·
r#242 global_constant_decl -> 'const' global_constant_decl/0.1 equal expression ·
r#243 variable_ident_decl -> ident colon type_decl ·
r#244 global_variable_decl/0.2 -> equal expression ·
r#245 variable_decl -> 'var' variable_decl/0.1 variable_decl/0.2 ·
r#246 variable_decl/0.2 -> ident ·
r#247 variable_decl/0.2 -> variable_ident_decl ·
r#248 comma -> ',' ·
r#249 global_constant_decl/1.3 -> equal expression ·
r#250 struct_body_decl/0.1/0/0.0 -> struct_member comma ·
r#251 struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 ·
r#252 function_header/0.3 -> param_list ·
r#253 param_list/0.0 -> param_list/0.0/0 ·
r#254 param/0.0 -> param/0.0/0 ·
r#255 lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 ·
r#256 core_lhs_expression -> ident ·
r#257 increment_statement -> lhs_expression plus_plus ·
r#258 decrement_statement -> lhs_expression minus_minus ·
r#259 assignment_statement/0.1 -> equal ·
r#260 assignment_statement/0.1 -> compound_assignment_operator ·
r#261 plus_plus -> '++' ·
r#262 minus_minus -> '--' ·
r#263 compound_assignment_operator -> plus_equal ·
r#264 compound_assignment_operator -> minus_equal ·
r#265 compound_assignment_operator -> times_equal ·
r#266 compound_assignment_operator -> division_equal ·
r#267 compound_assignment_operator -> modulo_equal ·
r#268 compound_assignment_operator -> and_equal ·
r#269 compound_assignment_operator -> or_equal ·
r#270 compound_assignment_operator -> xor_equal ·
r#271 compound_assignment_operator -> shift_right_equal ·
r#272 compound_assignment_operator -> shift_left_equal ·
r#273 plus_equal -> '+=' ·
r#274 minus_equal -> '-=' ·
r#275 times_equal -> '*=' ·
r#276 division_equal -> '/=' ·
r#277 modulo_equal -> '%=' ·
r#278 and_equal -> '&=' ·
r#279 or_equal -> '|=' ·
r#280 xor_equal -> '^=' ·
r#281 shift_right_equal -> '>>=' ·
r#282 shift_left_equal -> '<<=' ·
r#283 variable_statement/3.1 -> ident ·
r#284 variable_statement/3.1 -> variable_ident_decl ·
r#285 variable_statement/2.1 -> ident ·
r#286 variable_statement/2.1 -> variable_ident_decl ·
r#287 func_call_statement -> ident argument_expression_list ·
r#288 if_statement/0.1 -> if_statement/0.1/0 ·
r#289 return_statement -> 'return' return_statement/0.1 ·
r#290 return_statement/0.1 -> expression ·
r#291 statement -> static_assert_statement semicolon ·
r#292 statement -> decrement_statement semicolon ·
r#293 statement -> increment_statement semicolon ·
r#294 statement -> assignment_statement semicolon ·
r#295 statement -> 'discard' semicolon ·
r#296 statement -> continue_statement semicolon ·
r#297 statement -> break_statement semicolon ·
r#298 statement -> variable_statement semicolon ·
r#299 statement -> func_call_statement semicolon ·
r#300 statement -> return_statement semicolon ·
r#301 compound_statement/0.1/0 -> statement compound_statement/0.1/0 ·
r#302 compound_statement -> brace_left compound_statement/0.1 brace_right ·
r#303 brace_right -> '}' ·
r#304 texture_and_sampler_types -> multisampled_texture_type less_than type_decl greater_than ·
r#305 texture_and_sampler_types -> sampled_texture_type less_than type_decl greater_than ·
r#306 argument_expression_list/0.1/0.0/0/0.0 -> expression comma ·
r#307 argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 ·
r#308 argument_expression_list -> paren_left argument_expression_list/0.1 paren_right ·
r#309 bracket_right -> ']' ·
r#310 postfix_expression -> period swizzle_name postfix_expression/2.2 ·
r#311 postfix_expression/2.2 -> postfix_expression ·
r#312 postfix_expression -> period member_ident postfix_expression/1.2 ·
r#313 postfix_expression/1.2 -> postfix_expression ·
r#314 attribute -> attr 'workgroup_size' paren_left expression attrib_end ·
r#315 attrib_end/0.0 -> comma ·
r#316 attribute -> attr 'size' paren_left expression attrib_end ·
r#317 attribute -> attr 'location' paren_left expression attrib_end ·
r#318 attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end ·
r#319 attribute -> attr 'id' paren_left expression attrib_end ·
r#320 attribute -> attr 'group' paren_left expression attrib_end ·
r#321 attribute -> attr 'builtin' paren_left builtin_value_name attrib_end ·
r#322 attribute -> attr 'binding' paren_left expression attrib_end ·
r#323 attribute -> attr 'align' paren_left expression attrib_end ·
r#324 interpolation_sample_name -> 'center' ·
r#325 interpolation_sample_name -> 'centroid' ·
r#326 interpolation_sample_name -> 'sample' ·
r#327 attrib_end -> attrib_end/0.0 paren_right ·
r#328 postfix_expression -> bracket_left expression bracket_right postfix_expression/0.3 ·
r#329 postfix_expression/0.3 -> postfix_expression ·
r#330 argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 ·
r#331 argument_expression_list/0.1/0.2 -> comma ·
r#332 primary_expression -> 'bitcast' less_than type_decl greater_than paren_expression ·
r#333 array_type_decl/0.3 -> comma element_count_expression ·
r#334 element_count_expression -> additive_expression ·
r#335 element_count_expression -> bitwise_expression ·
r#336 array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 greater_than ·
r#337 access_mode -> 'read' ·
r#338 access_mode -> 'write' ·
r#339 access_mode -> 'read_write' ·
r#340 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#341 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#342 if_statement/0.2 -> else_clause ·
r#343 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#344 for_header/0.0 -> for_init ·
r#345 for_init -> variable_statement ·
r#346 for_init -> increment_statement ·
r#347 for_init -> decrement_statement ·
r#348 for_init -> assignment_statement ·
r#349 for_init -> func_call_statement ·
r#350 while_statement -> 'while' expression compound_statement ·
r#351 assignment_statement -> lhs_expression assignment_statement/0.1 expression ·
r#352 if_clause -> 'if' expression compound_statement ·
r#353 lhs_expression -> lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 ·
r#354 lhs_expression/0.2 -> postfix_expression ·
r#355 param/0.0/0 -> attribute param/0.0/0 ·
r#356 param -> param/0.0 variable_ident_decl ·
r#357 param_list/0.0/0/0.0 -> param comma ·
r#358 param_list/0.0/0 -> param_list/0.0/0/0.0 param_list/0.0/0 ·
r#359 struct_body_decl/0.3 -> comma ·
r#360 variable_qualifier/0.2 -> comma access_mode ·
r#361 variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than ·
r#362 struct_member -> struct_member/0.0 member_ident colon type_decl ·
r#363 struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right ·
r#364 function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 ·
r#365 arrow -> '->' ·
r#366 param_list -> param_list/0.0 param param_list/0.2 ·
r#367 param_list/0.2 -> comma ·
r#368 core_lhs_expression -> paren_left lhs_expression paren_right ·
r#369 variable_statement -> 'const' variable_statement/3.1 equal expression ·
r#370 variable_statement -> 'let' variable_statement/2.1 equal expression ·
r#371 loop_statement/0.2/0 -> statement loop_statement/0.2/0 ·
r#372 loop_statement/0.3 -> continuing_statement ·
r#373 switch_statement/0.3 -> switch_statement/0.3/0 ·
r#374 else_clause -> 'else' compound_statement ·
r#375 texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than ·
r#376 attribute -> attr 'workgroup_size' paren_left expression comma expression attrib_end ·
r#377 attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end ·
r#378 type_decl_without_ident/7.5 -> comma access_mode ·
r#379 type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than ·
r#380 else_if_clause -> 'else' 'if' expression compound_statement ·
r#381 switch_body/1.1 -> colon ·
r#382 switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 ·
r#383 switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right ·
r#384 continuing_statement -> 'continuing' continuing_compound_statement ·
r#385 loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right ·
r#386 for_statement -> 'for' paren_left for_header paren_right compound_statement ·
r#387 for_header/0.2 -> expression ·
r#388 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#389 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#390 function_header/0.5 -> arrow function_header/0.5/0.1 type_decl ·
r#391 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#392 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#393 switch_body/0.2 -> colon ·
r#394 switch_body -> 'default' switch_body/1.1 case_compound_statement ·
r#395 attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end ·
r#396 case_compound_statement/0.1 -> case_compound_statement/0.1/0 ·
r#397 switch_body -> 'case' case_selectors switch_body/0.2 case_compound_statement ·
r#398 case_selectors/0.1/0/0.0 -> comma expression ·
r#399 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#400 case_selectors -> expression case_selectors/0.1 case_selectors/0.2 ·
r#401 case_selectors/0.2 -> comma ·
r#402 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·
r#403 continuing_compound_statement/0.2 -> break_if_statement ·
r#404 for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 ·
r#405 for_header/0.4 -> for_update ·
r#406 for_update -> increment_statement ·
r#407 for_update -> decrement_statement ·
r#408 for_update -> assignment_statement ·
r#409 for_update -> func_call_statement ·
r#410 continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right ·
r#411 case_compound_statement/0.1/0 -> statement case_compound_statement/0.1/0 ·
r#412 case_compound_statement/0.2 -> fallthrough_statement ·
r#413 fallthrough_statement -> 'fallthrough' semicolon ·
r#414 case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right ·
r#415 break_if_statement -> 'break' 'if' expression semicolon ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#19
[#2 '@']: s#32
[#2 'const']: s#21
[#2 'static_assert']: s#26
[#2 'struct']: s#24
[#2 'type']: s#23
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'const']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'static_assert']: r#0
[#3 'struct']: r#0
[#3 'type']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'f16']: s#7
[#6 ';']: s#19
[#7 ';']: r#1
[#8 ';']: r#2
[#8 '@']: r#2
[#8 'const']: r#2
[#8 'fn']: r#2
[#8 'override']: r#2
[#8 'static_assert']: r#2
[#8 'struct']: r#2
[#8 'type']: r#2
[#8 'var']: r#2
[#8 EndOfText]: r#2
[#9 EndOfText]: r#3
[#10 EndOfText]: r#4
[#11 ';']: s#19
[#11 '@']: s#32
[#11 'const']: s#21
[#11 'static_assert']: s#26
[#11 'struct']: s#24
[#11 'type']: s#23
[#12 ';']: r#5
[#12 '@']: r#5
[#12 'const']: r#5
[#12 'fn']: r#5
[#12 'override']: r#5
[#12 'static_assert']: r#5
[#12 'struct']: r#5
[#12 'type']: r#5
[#12 'var']: r#5
[#12 EndOfText]: r#5
[#13 ';']: s#19
[#14 ';']: s#19
[#15 ';']: s#19
[#16 ';']: r#6
[#16 '@']: r#6
[#16 'const']: r#6
[#16 'fn']: r#6
[#16 'override']: r#6
[#16 'static_assert']: r#6
[#16 'struct']: r#6
[#16 'type']: r#6
[#16 'var']: r#6
[#16 EndOfText]: r#6
[#17 ';']: r#7
[#17 '@']: r#7
[#17 'const']: r#7
[#17 'fn']: r#7
[#17 'override']: r#7
[#17 'static_assert']: r#7
[#17 'struct']: r#7
[#17 'type']: r#7
[#17 'var']: r#7
[#17 EndOfText]: r#7
[#18 ';']: s#19
[#19 '!']: r#8
[#19 '&']: r#8
[#19 '(']: r#8
[#19 ')']: r#8
[#19 '*']: r#8
[#19 '-']: r#8
[#19 ';']: r#8
[#19 '@']: r#8
[#19 'array']: r#8
[#19 'bitcast']: r#8
[#19 'bool']: r#8
[#19 'break']: r#8
[#19 'const']: r#8
[#19 'continue']: r#8
[#19 'continuing']: r#8
[#19 'discard']: r#8
[#19 'enable']: r#8
[#19 'f16']: r#8
[#19 'f32']: r#8
[#19 'fallthrough']: r#8
[#19 'false']: r#8
[#19 'fn']: r#8
[#19 'for']: r#8
[#19 'i32']: r#8
[#19 'if']: r#8
[#19 'let']: r#8
[#19 'loop']: r#8
[#19 'mat2x2']: r#8
[#19 'mat2x3']: r#8
[#19 'mat2x4']: r#8
[#19 'mat3x2']: r#8
[#19 'mat3x3']: r#8
[#19 'mat3x4']: r#8
[#19 'mat4x2']: r#8
[#19 'mat4x3']: r#8
[#19 'mat4x4']: r#8
[#19 'override']: r#8
[#19 'ptr']: r#8
[#19 'return']: r#8
[#19 'sampler']: r#8
[#19 'sampler_comparison']: r#8
[#19 'static_assert']: r#8
[#19 'struct']: r#8
[#19 'switch']: r#8
[#19 'texture_1d']: r#8
[#19 'texture_2d']: r#8
[#19 'texture_2d_array']: r#8
[#19 'texture_3d']: r#8
[#19 'texture_cube']: r#8
[#19 'texture_cube_array']: r#8
[#19 'texture_depth_2d']: r#8
[#19 'texture_depth_2d_array']: r#8
[#19 'texture_depth_cube']: r#8
[#19 'texture_depth_cube_array']: r#8
[#19 'texture_depth_multisampled_2d']: r#8
[#19 'texture_multisampled_2d']: r#8
[#19 'texture_storage_1d']: r#8
[#19 'texture_storage_2d']: r#8
[#19 'texture_storage_2d_array']: r#8
[#19 'texture_storage_3d']: r#8
[#19 'true']: r#8
[#19 'type']: r#8
[#19 'u32']: r#8
[#19 'var']: r#8
[#19 'vec2']: r#8
[#19 'vec3']: r#8
[#19 'vec4']: r#8
[#19 'while']: r#8
[#19 '{']: r#8
[#19 '}']: r#8
[#19 '~']: r#8
[#19 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#8
[#19 EndOfText]: r#8
[#20 'var']: s#161
[#21 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#22 'override']: s#156
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#24 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#25 'fn']: s#153
[#26 '!']: s#70
[#26 '&']: s#73
[#26 '(']: s#115
[#26 '*']: s#72
[#26 '-']: s#69
[#26 'array']: s#83
[#26 'bitcast']: s#78
[#26 'bool']: s#88
[#26 'f16']: s#117
[#26 'f32']: s#116
[#26 'false']: s#114
[#26 'i32']: s#118
[#26 'mat2x2']: s#99
[#26 'mat2x3']: s#100
[#26 'mat2x4']: s#101
[#26 'mat3x2']: s#102
[#26 'mat3x3']: s#103
[#26 'mat3x4']: s#104
[#26 'mat4x2']: s#105
[#26 'mat4x3']: s#106
[#26 'mat4x4']: s#107
[#26 'ptr']: s#120
[#26 'sampler']: s#134
[#26 'sampler_comparison']: s#135
[#26 'texture_1d']: s#141
[#26 'texture_2d']: s#142
[#26 'texture_2d_array']: s#143
[#26 'texture_3d']: s#144
[#26 'texture_cube']: s#145
[#26 'texture_cube_array']: s#146
[#26 'texture_depth_2d']: s#136
[#26 'texture_depth_2d_array']: s#137
[#26 'texture_depth_cube']: s#138
[#26 'texture_depth_cube_array']: s#139
[#26 'texture_depth_multisampled_2d']: s#140
[#26 'texture_multisampled_2d']: s#147
[#26 'texture_storage_1d']: s#148
[#26 'texture_storage_2d']: s#149
[#26 'texture_storage_2d_array']: s#150
[#26 'texture_storage_3d']: s#151
[#26 'true']: s#113
[#26 'u32']: s#119
[#26 'vec2']: s#96
[#26 'vec3']: s#97
[#26 'vec4']: s#98
[#26 '~']: s#71
[#26 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#26 /0[fh]/]: s#129
[#26 /0[iu]?/]: s#109
[#26 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#26 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#26 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#26 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#26 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#26 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#26 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#26 /[1-9][0-9]*[fh]/]: s#130
[#26 /[1-9][0-9]*[iu]?/]: s#110
[#27 'var']: r#9
[#28 'override']: r#10
[#29 'fn']: r#11
[#30 '@']: s#32
[#31 'align']: s#33
[#31 'binding']: s#34
[#31 'builtin']: s#35
[#31 'compute']: s#46
[#31 'const']: s#36
[#31 'fragment']: s#45
[#31 'group']: s#37
[#31 'id']: s#38
[#31 'interpolate']: s#39
[#31 'invariant']: s#40
[#31 'location']: s#41
[#31 'size']: s#42
[#31 'vertex']: s#44
[#31 'workgroup_size']: s#43
[#32 'const']: r#12
[#33 '(']: s#115
[#34 '(']: s#115
[#35 '(']: s#115
[#36 '@']: r#13
[#36 'array']: r#13
[#36 'bool']: r#13
[#36 'f16']: r#13
[#36 'f32']: r#13
[#36 'fn']: r#13
[#36 'i32']: r#13
[#36 'override']: r#13
[#36 'ptr']: r#13
[#36 'sampler']: r#13
[#36 'sampler_comparison']: r#13
[#36 'texture_1d']: r#13
[#36 'texture_2d']: r#13
[#36 'texture_2d_array']: r#13
[#36 'texture_3d']: r#13
[#36 'texture_cube']: r#13
[#36 'texture_cube_array']: r#13
[#36 'texture_depth_2d']: r#13
[#36 'texture_depth_2d_array']: r#13
[#36 'texture_depth_cube']: r#13
[#36 'texture_depth_cube_array']: r#13
[#36 'texture_depth_multisampled_2d']: r#13
[#36 'texture_multisampled_2d']: r#13
[#36 'texture_storage_1d']: r#13
[#36 'texture_storage_2d']: r#13
[#36 'texture_storage_2d_array']: r#13
[#36 'texture_storage_3d']: r#13
[#36 'u32']: r#13
[#36 'var']: r#13
[#36 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#13
[#37 '(']: s#115
[#38 '(']: s#115
[#39 '(']: s#115
[#40 '@']: r#14
[#40 'array']: r#14
[#40 'bool']: r#14
[#40 'f16']: r#14
[#40 'f32']: r#14
[#40 'fn']: r#14
[#40 'i32']: r#14
[#40 'override']: r#14
[#40 'ptr']: r#14
[#40 'sampler']: r#14
[#40 'sampler_comparison']: r#14
[#40 'texture_1d']: r#14
[#40 'texture_2d']: r#14
[#40 'texture_2d_array']: r#14
[#40 'texture_3d']: r#14
[#40 'texture_cube']: r#14
[#40 'texture_cube_array']: r#14
[#40 'texture_depth_2d']: r#14
[#40 'texture_depth_2d_array']: r#14
[#40 'texture_depth_cube']: r#14
[#40 'texture_depth_cube_array']: r#14
[#40 'texture_depth_multisampled_2d']: r#14
[#40 'texture_multisampled_2d']: r#14
[#40 'texture_storage_1d']: r#14
[#40 'texture_storage_2d']: r#14
[#40 'texture_storage_2d_array']: r#14
[#40 'texture_storage_3d']: r#14
[#40 'u32']: r#14
[#40 'var']: r#14
[#40 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#14
[#41 '(']: s#115
[#42 '(']: s#115
[#43 '(']: s#115
[#44 '@']: r#15
[#44 'array']: r#15
[#44 'bool']: r#15
[#44 'f16']: r#15
[#44 'f32']: r#15
[#44 'fn']: r#15
[#44 'i32']: r#15
[#44 'override']: r#15
[#44 'ptr']: r#15
[#44 'sampler']: r#15
[#44 'sampler_comparison']: r#15
[#44 'texture_1d']: r#15
[#44 'texture_2d']: r#15
[#44 'texture_2d_array']: r#15
[#44 'texture_3d']: r#15
[#44 'texture_cube']: r#15
[#44 'texture_cube_array']: r#15
[#44 'texture_depth_2d']: r#15
[#44 'texture_depth_2d_array']: r#15
[#44 'texture_depth_cube']: r#15
[#44 'texture_depth_cube_array']: r#15
[#44 'texture_depth_multisampled_2d']: r#15
[#44 'texture_multisampled_2d']: r#15
[#44 'texture_storage_1d']: r#15
[#44 'texture_storage_2d']: r#15
[#44 'texture_storage_2d_array']: r#15
[#44 'texture_storage_3d']: r#15
[#44 'u32']: r#15
[#44 'var']: r#15
[#44 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#15
[#45 '@']: r#16
[#45 'array']: r#16
[#45 'bool']: r#16
[#45 'f16']: r#16
[#45 'f32']: r#16
[#45 'fn']: r#16
[#45 'i32']: r#16
[#45 'override']: r#16
[#45 'ptr']: r#16
[#45 'sampler']: r#16
[#45 'sampler_comparison']: r#16
[#45 'texture_1d']: r#16
[#45 'texture_2d']: r#16
[#45 'texture_2d_array']: r#16
[#45 'texture_3d']: r#16
[#45 'texture_cube']: r#16
[#45 'texture_cube_array']: r#16
[#45 'texture_depth_2d']: r#16
[#45 'texture_depth_2d_array']: r#16
[#45 'texture_depth_cube']: r#16
[#45 'texture_depth_cube_array']: r#16
[#45 'texture_depth_multisampled_2d']: r#16
[#45 'texture_multisampled_2d']: r#16
[#45 'texture_storage_1d']: r#16
[#45 'texture_storage_2d']: r#16
[#45 'texture_storage_2d_array']: r#16
[#45 'texture_storage_3d']: r#16
[#45 'u32']: r#16
[#45 'var']: r#16
[#45 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#16
[#46 '@']: r#17
[#46 'array']: r#17
[#46 'bool']: r#17
[#46 'f16']: r#17
[#46 'f32']: r#17
[#46 'fn']: r#17
[#46 'i32']: r#17
[#46 'override']: r#17
[#46 'ptr']: r#17
[#46 'sampler']: r#17
[#46 'sampler_comparison']: r#17
[#46 'texture_1d']: r#17
[#46 'texture_2d']: r#17
[#46 'texture_2d_array']: r#17
[#46 'texture_3d']: r#17
[#46 'texture_cube']: r#17
[#46 'texture_cube_array']: r#17
[#46 'texture_depth_2d']: r#17
[#46 'texture_depth_2d_array']: r#17
[#46 'texture_depth_cube']: r#17
[#46 'texture_depth_cube_array']: r#17
[#46 'texture_depth_multisampled_2d']: r#17
[#46 'texture_multisampled_2d']: r#17
[#46 'texture_storage_1d']: r#17
[#46 'texture_storage_2d']: r#17
[#46 'texture_storage_2d_array']: r#17
[#46 'texture_storage_3d']: r#17
[#46 'u32']: r#17
[#46 'var']: r#17
[#46 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#17
[#47 'var']: r#18
[#48 'override']: r#19
[#49 'fn']: r#20
[#50 ';']: r#21
[#51 '&&']: r#24
[#51 ')']: r#22
[#51 ',']: r#22
[#51 ':']: r#22
[#51 ';']: r#22
[#51 ']']: r#22
[#51 '{']: r#22
[#51 '||']: r#23
[#52 '||']: s#239
[#53 '&&']: s#237
[#54 ')']: r#25
[#54 ',']: r#25
[#54 ':']: r#25
[#54 ';']: r#25
[#54 ']']: r#25
[#54 '{']: r#25
[#55 '!=']: s#235
[#55 '&&']: r#26
[#55 ')']: r#26
[#55 ',']: r#26
[#55 ':']: r#26
[#55 ';']: r#26
[#55 '<']: s#171
[#55 '<=']: s#232
[#55 '==']: s#234
[#55 '>']: s#231
[#55 '>=']: s#233
[#55 ']']: r#26
[#55 '{']: r#26
[#55 '||']: r#26
[#56 '&']: s#73
[#57 '|']: s#223
[#58 '^']: s#221
[#59 '!=']: r#27
[#59 '&&']: r#27
[#59 ')']: r#27
[#59 '+']: s#219
[#59 ',']: r#27
[#59 '-']: s#69
[#59 ':']: r#27
[#59 ';']: r#27
[#59 '<']: r#27
[#59 '<=']: r#27
[#59 '==']: r#27
[#59 '>']: r#27
[#59 '>=']: r#27
[#59 ']']: r#27
[#59 '{']: r#27
[#59 '||']: r#27
[#60 '!=']: r#31
[#60 '%']: r#31
[#60 '&&']: r#31
[#60 '&']: r#28
[#60 ')']: r#31
[#60 '*']: r#31
[#60 '+']: r#31
[#60 ',']: r#31
[#60 '-']: r#31
[#60 '/']: r#31
[#60 ':']: r#31
[#60 ';']: r#31
[#60 '<']: r#31
[#60 '<<']: s#215
[#60 '<=']: r#31
[#60 '==']: r#31
[#60 '>']: r#31
[#60 '>=']: r#31
[#60 '>>']: s#216
[#60 ']']: r#31
[#60 '^']: r#30
[#60 '{']: r#31
[#60 '|']: r#29
[#60 '||']: r#31
[#61 '!=']: r#32
[#61 '%']: s#212
[#61 '&&']: r#32
[#61 ')']: r#32
[#61 '*']: s#72
[#61 '+']: r#32
[#61 ',']: r#32
[#61 '-']: r#32
[#61 '/']: s#211
[#61 ':']: r#32
[#61 ';']: r#32
[#61 '<']: r#32
[#61 '<=']: r#32
[#61 '==']: r#32
[#61 '>']: r#32
[#61 '>=']: r#32
[#61 ']']: r#32
[#61 '{']: r#32
[#61 '||']: r#32
[#62 '!=']: r#33
[#62 '%']: r#33
[#62 '&&']: r#33
[#62 '&']: r#33
[#62 ')']: r#33
[#62 '*']: r#33
[#62 '+']: r#33
[#62 ',']: r#33
[#62 '-']: r#33
[#62 '/']: r#33
[#62 ':']: r#33
[#62 ';']: r#33
[#62 '<']: r#33
[#62 '<<']: r#33
[#62 '<=']: r#33
[#62 '==']: r#33
[#62 '>']: r#33
[#62 '>=']: r#33
[#62 '>>']: r#33
[#62 ']']: r#33
[#62 '^']: r#33
[#62 '{']: r#33
[#62 '|']: r#33
[#62 '||']: r#33
[#63 '!']: s#70
[#63 '&']: s#73
[#63 '(']: s#115
[#63 '*']: s#72
[#63 '-']: s#69
[#63 'array']: s#83
[#63 'bitcast']: s#78
[#63 'bool']: s#88
[#63 'f16']: s#117
[#63 'f32']: s#116
[#63 'false']: s#114
[#63 'i32']: s#118
[#63 'mat2x2']: s#99
[#63 'mat2x3']: s#100
[#63 'mat2x4']: s#101
[#63 'mat3x2']: s#102
[#63 'mat3x3']: s#103
[#63 'mat3x4']: s#104
[#63 'mat4x2']: s#105
[#63 'mat4x3']: s#106
[#63 'mat4x4']: s#107
[#63 'ptr']: s#120
[#63 'sampler']: s#134
[#63 'sampler_comparison']: s#135
[#63 'texture_1d']: s#141
[#63 'texture_2d']: s#142
[#63 'texture_2d_array']: s#143
[#63 'texture_3d']: s#144
[#63 'texture_cube']: s#145
[#63 'texture_cube_array']: s#146
[#63 'texture_depth_2d']: s#136
[#63 'texture_depth_2d_array']: s#137
[#63 'texture_depth_cube']: s#138
[#63 'texture_depth_cube_array']: s#139
[#63 'texture_depth_multisampled_2d']: s#140
[#63 'texture_multisampled_2d']: s#147
[#63 'texture_storage_1d']: s#148
[#63 'texture_storage_2d']: s#149
[#63 'texture_storage_2d_array']: s#150
[#63 'texture_storage_3d']: s#151
[#63 'true']: s#113
[#63 'u32']: s#119
[#63 'vec2']: s#96
[#63 'vec3']: s#97
[#63 'vec4']: s#98
[#63 '~']: s#71
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#63 /0[fh]/]: s#129
[#63 /0[iu]?/]: s#109
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#63 /[1-9][0-9]*[fh]/]: s#130
[#63 /[1-9][0-9]*[iu]?/]: s#110
[#64 '!']: s#70
[#64 '&']: s#73
[#64 '(']: s#115
[#64 '*']: s#72
[#64 '-']: s#69
[#64 'array']: s#83
[#64 'bitcast']: s#78
[#64 'bool']: s#88
[#64 'f16']: s#117
[#64 'f32']: s#116
[#64 'false']: s#114
[#64 'i32']: s#118
[#64 'mat2x2']: s#99
[#64 'mat2x3']: s#100
[#64 'mat2x4']: s#101
[#64 'mat3x2']: s#102
[#64 'mat3x3']: s#103
[#64 'mat3x4']: s#104
[#64 'mat4x2']: s#105
[#64 'mat4x3']: s#106
[#64 'mat4x4']: s#107
[#64 'ptr']: s#120
[#64 'sampler']: s#134
[#64 'sampler_comparison']: s#135
[#64 'texture_1d']: s#141
[#64 'texture_2d']: s#142
[#64 'texture_2d_array']: s#143
[#64 'texture_3d']: s#144
[#64 'texture_cube']: s#145
[#64 'texture_cube_array']: s#146
[#64 'texture_depth_2d']: s#136
[#64 'texture_depth_2d_array']: s#137
[#64 'texture_depth_cube']: s#138
[#64 'texture_depth_cube_array']: s#139
[#64 'texture_depth_multisampled_2d']: s#140
[#64 'texture_multisampled_2d']: s#147
[#64 'texture_storage_1d']: s#148
[#64 'texture_storage_2d']: s#149
[#64 'texture_storage_2d_array']: s#150
[#64 'texture_storage_3d']: s#151
[#64 'true']: s#113
[#64 'u32']: s#119
[#64 'vec2']: s#96
[#64 'vec3']: s#97
[#64 'vec4']: s#98
[#64 '~']: s#71
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#64 /0[fh]/]: s#129
[#64 /0[iu]?/]: s#109
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#64 /[1-9][0-9]*[fh]/]: s#130
[#64 /[1-9][0-9]*[iu]?/]: s#110
[#65 '!']: s#70
[#65 '&']: s#73
[#65 '(']: s#115
[#65 '*']: s#72
[#65 '-']: s#69
[#65 'array']: s#83
[#65 'bitcast']: s#78
[#65 'bool']: s#88
[#65 'f16']: s#117
[#65 'f32']: s#116
[#65 'false']: s#114
[#65 'i32']: s#118
[#65 'mat2x2']: s#99
[#65 'mat2x3']: s#100
[#65 'mat2x4']: s#101
[#65 'mat3x2']: s#102
[#65 'mat3x3']: s#103
[#65 'mat3x4']: s#104
[#65 'mat4x2']: s#105
[#65 'mat4x3']: s#106
[#65 'mat4x4']: s#107
[#65 'ptr']: s#120
[#65 'sampler']: s#134
[#65 'sampler_comparison']: s#135
[#65 'texture_1d']: s#141
[#65 'texture_2d']: s#142
[#65 'texture_2d_array']: s#143
[#65 'texture_3d']: s#144
[#65 'texture_cube']: s#145
[#65 'texture_cube_array']: s#146
[#65 'texture_depth_2d']: s#136
[#65 'texture_depth_2d_array']: s#137
[#65 'texture_depth_cube']: s#138
[#65 'texture_depth_cube_array']: s#139
[#65 'texture_depth_multisampled_2d']: s#140
[#65 'texture_multisampled_2d']: s#147
[#65 'texture_storage_1d']: s#148
[#65 'texture_storage_2d']: s#149
[#65 'texture_storage_2d_array']: s#150
[#65 'texture_storage_3d']: s#151
[#65 'true']: s#113
[#65 'u32']: s#119
[#65 'vec2']: s#96
[#65 'vec3']: s#97
[#65 'vec4']: s#98
[#65 '~']: s#71
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#65 /0[fh]/]: s#129
[#65 /0[iu]?/]: s#109
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#65 /[1-9][0-9]*[fh]/]: s#130
[#65 /[1-9][0-9]*[iu]?/]: s#110
[#66 '!']: s#70
[#66 '&']: s#73
[#66 '(']: s#115
[#66 '*']: s#72
[#66 '-']: s#69
[#66 'array']: s#83
[#66 'bitcast']: s#78
[#66 'bool']: s#88
[#66 'f16']: s#117
[#66 'f32']: s#116
[#66 'false']: s#114
[#66 'i32']: s#118
[#66 'mat2x2']: s#99
[#66 'mat2x3']: s#100
[#66 'mat2x4']: s#101
[#66 'mat3x2']: s#102
[#66 'mat3x3']: s#103
[#66 'mat3x4']: s#104
[#66 'mat4x2']: s#105
[#66 'mat4x3']: s#106
[#66 'mat4x4']: s#107
[#66 'ptr']: s#120
[#66 'sampler']: s#134
[#66 'sampler_comparison']: s#135
[#66 'texture_1d']: s#141
[#66 'texture_2d']: s#142
[#66 'texture_2d_array']: s#143
[#66 'texture_3d']: s#144
[#66 'texture_cube']: s#145
[#66 'texture_cube_array']: s#146
[#66 'texture_depth_2d']: s#136
[#66 'texture_depth_2d_array']: s#137
[#66 'texture_depth_cube']: s#138
[#66 'texture_depth_cube_array']: s#139
[#66 'texture_depth_multisampled_2d']: s#140
[#66 'texture_multisampled_2d']: s#147
[#66 'texture_storage_1d']: s#148
[#66 'texture_storage_2d']: s#149
[#66 'texture_storage_2d_array']: s#150
[#66 'texture_storage_3d']: s#151
[#66 'true']: s#113
[#66 'u32']: s#119
[#66 'vec2']: s#96
[#66 'vec3']: s#97
[#66 'vec4']: s#98
[#66 '~']: s#71
[#66 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#66 /0[fh]/]: s#129
[#66 /0[iu]?/]: s#109
[#66 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#66 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#66 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#66 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#66 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#66 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#66 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#66 /[1-9][0-9]*[fh]/]: s#130
[#66 /[1-9][0-9]*[iu]?/]: s#110
[#67 '!']: s#70
[#67 '&']: s#73
[#67 '(']: s#115
[#67 '*']: s#72
[#67 '-']: s#69
[#67 'array']: s#83
[#67 'bitcast']: s#78
[#67 'bool']: s#88
[#67 'f16']: s#117
[#67 'f32']: s#116
[#67 'false']: s#114
[#67 'i32']: s#118
[#67 'mat2x2']: s#99
[#67 'mat2x3']: s#100
[#67 'mat2x4']: s#101
[#67 'mat3x2']: s#102
[#67 'mat3x3']: s#103
[#67 'mat3x4']: s#104
[#67 'mat4x2']: s#105
[#67 'mat4x3']: s#106
[#67 'mat4x4']: s#107
[#67 'ptr']: s#120
[#67 'sampler']: s#134
[#67 'sampler_comparison']: s#135
[#67 'texture_1d']: s#141
[#67 'texture_2d']: s#142
[#67 'texture_2d_array']: s#143
[#67 'texture_3d']: s#144
[#67 'texture_cube']: s#145
[#67 'texture_cube_array']: s#146
[#67 'texture_depth_2d']: s#136
[#67 'texture_depth_2d_array']: s#137
[#67 'texture_depth_cube']: s#138
[#67 'texture_depth_cube_array']: s#139
[#67 'texture_depth_multisampled_2d']: s#140
[#67 'texture_multisampled_2d']: s#147
[#67 'texture_storage_1d']: s#148
[#67 'texture_storage_2d']: s#149
[#67 'texture_storage_2d_array']: s#150
[#67 'texture_storage_3d']: s#151
[#67 'true']: s#113
[#67 'u32']: s#119
[#67 'vec2']: s#96
[#67 'vec3']: s#97
[#67 'vec4']: s#98
[#67 '~']: s#71
[#67 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#67 /0[fh]/]: s#129
[#67 /0[iu]?/]: s#109
[#67 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#67 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#67 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#67 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#67 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#67 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#67 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#67 /[1-9][0-9]*[fh]/]: s#130
[#67 /[1-9][0-9]*[iu]?/]: s#110
[#68 '.']: s#202
[#68 '[']: s#201
[#69 '!']: r#34
[#69 '&']: r#34
[#69 '(']: r#34
[#69 '*']: r#34
[#69 '-']: r#34
[#69 'array']: r#34
[#69 'bitcast']: r#34
[#69 'bool']: r#34
[#69 'f16']: r#34
[#69 'f32']: r#34
[#69 'false']: r#34
[#69 'i32']: r#34
[#69 'mat2x2']: r#34
[#69 'mat2x3']: r#34
[#69 'mat2x4']: r#34
[#69 'mat3x2']: r#34
[#69 'mat3x3']: r#34
[#69 'mat3x4']: r#34
[#69 'mat4x2']: r#34
[#69 'mat4x3']: r#34
[#69 'mat4x4']: r#34
[#69 'ptr']: r#34
[#69 'sampler']: r#34
[#69 'sampler_comparison']: r#34
[#69 'texture_1d']: r#34
[#69 'texture_2d']: r#34
[#69 'texture_2d_array']: r#34
[#69 'texture_3d']: r#34
[#69 'texture_cube']: r#34
[#69 'texture_cube_array']: r#34
[#69 'texture_depth_2d']: r#34
[#69 'texture_depth_2d_array']: r#34
[#69 'texture_depth_cube']: r#34
[#69 'texture_depth_cube_array']: r#34
[#69 'texture_depth_multisampled_2d']: r#34
[#69 'texture_multisampled_2d']: r#34
[#69 'texture_storage_1d']: r#34
[#69 'texture_storage_2d']: r#34
[#69 'texture_storage_2d_array']: r#34
[#69 'texture_storage_3d']: r#34
[#69 'true']: r#34
[#69 'u32']: r#34
[#69 'vec2']: r#34
[#69 'vec3']: r#34
[#69 'vec4']: r#34
[#69 '~']: r#34
[#70 '!']: r#35
[#70 '&']: r#35
[#70 '(']: r#35
[#70 '*']: r#35
[#70 '-']: r#35
[#70 'array']: r#35
[#70 'bitcast']: r#35
[#70 'bool']: r#35
[#70 'f16']: r#35
[#70 'f32']: r#35
[#70 'false']: r#35
[#70 'i32']: r#35
[#70 'mat2x2']: r#35
[#70 'mat2x3']: r#35
[#70 'mat2x4']: r#35
[#70 'mat3x2']: r#35
[#70 'mat3x3']: r#35
[#70 'mat3x4']: r#35
[#70 'mat4x2']: r#35
[#70 'mat4x3']: r#35
[#70 'mat4x4']: r#35
[#70 'ptr']: r#35
[#70 'sampler']: r#35
[#70 'sampler_comparison']: r#35
[#70 'texture_1d']: r#35
[#70 'texture_2d']: r#35
[#70 'texture_2d_array']: r#35
[#70 'texture_3d']: r#35
[#70 'texture_cube']: r#35
[#70 'texture_cube_array']: r#35
[#70 'texture_depth_2d']: r#35
[#70 'texture_depth_2d_array']: r#35
[#70 'texture_depth_cube']: r#35
[#70 'texture_depth_cube_array']: r#35
[#70 'texture_depth_multisampled_2d']: r#35
[#70 'texture_multisampled_2d']: r#35
[#70 'texture_storage_1d']: r#35
[#70 'texture_storage_2d']: r#35
[#70 'texture_storage_2d_array']: r#35
[#70 'texture_storage_3d']: r#35
[#70 'true']: r#35
[#70 'u32']: r#35
[#70 'vec2']: r#35
[#70 'vec3']: r#35
[#70 'vec4']: r#35
[#70 '~']: r#35
[#71 '!']: r#36
[#71 '&']: r#36
[#71 '(']: r#36
[#71 '*']: r#36
[#71 '-']: r#36
[#71 'array']: r#36
[#71 'bitcast']: r#36
[#71 'bool']: r#36
[#71 'f16']: r#36
[#71 'f32']: r#36
[#71 'false']: r#36
[#71 'i32']: r#36
[#71 'mat2x2']: r#36
[#71 'mat2x3']: r#36
[#71 'mat2x4']: r#36
[#71 'mat3x2']: r#36
[#71 'mat3x3']: r#36
[#71 'mat3x4']: r#36
[#71 'mat4x2']: r#36
[#71 'mat4x3']: r#36
[#71 'mat4x4']: r#36
[#71 'ptr']: r#36
[#71 'sampler']: r#36
[#71 'sampler_comparison']: r#36
[#71 'texture_1d']: r#36
[#71 'texture_2d']: r#36
[#71 'texture_2d_array']: r#36
[#71 'texture_3d']: r#36
[#71 'texture_cube']: r#36
[#71 'texture_cube_array']: r#36
[#71 'texture_depth_2d']: r#36
[#71 'texture_depth_2d_array']: r#36
[#71 'texture_depth_cube']: r#36
[#71 'texture_depth_cube_array']: r#36
[#71 'texture_depth_multisampled_2d']: r#36
[#71 'texture_multisampled_2d']: r#36
[#71 'texture_storage_1d']: r#36
[#71 'texture_storage_2d']: r#36
[#71 'texture_storage_2d_array']: r#36
[#71 'texture_storage_3d']: r#36
[#71 'true']: r#36
[#71 'u32']: r#36
[#71 'vec2']: r#36
[#71 'vec3']: r#36
[#71 'vec4']: r#36
[#71 '~']: r#36
[#72 '!']: r#37
[#72 '&']: r#37
[#72 '(']: r#37
[#72 '*']: r#37
[#72 '-']: r#37
[#72 'array']: r#37
[#72 'bitcast']: r#37
[#72 'bool']: r#37
[#72 'f16']: r#37
[#72 'f32']: r#37
[#72 'false']: r#37
[#72 'i32']: r#37
[#72 'mat2x2']: r#37
[#72 'mat2x3']: r#37
[#72 'mat2x4']: r#37
[#72 'mat3x2']: r#37
[#72 'mat3x3']: r#37
[#72 'mat3x4']: r#37
[#72 'mat4x2']: r#37
[#72 'mat4x3']: r#37
[#72 'mat4x4']: r#37
[#72 'ptr']: r#37
[#72 'sampler']: r#37
[#72 'sampler_comparison']: r#37
[#72 'texture_1d']: r#37
[#72 'texture_2d']: r#37
[#72 'texture_2d_array']: r#37
[#72 'texture_3d']: r#37
[#72 'texture_cube']: r#37
[#72 'texture_cube_array']: r#37
[#72 'texture_depth_2d']: r#37
[#72 'texture_depth_2d_array']: r#37
[#72 'texture_depth_cube']: r#37
[#72 'texture_depth_cube_array']: r#37
[#72 'texture_depth_multisampled_2d']: r#37
[#72 'texture_multisampled_2d']: r#37
[#72 'texture_storage_1d']: r#37
[#72 'texture_storage_2d']: r#37
[#72 'texture_storage_2d_array']: r#37
[#72 'texture_storage_3d']: r#37
[#72 'true']: r#37
[#72 'u32']: r#37
[#72 'vec2']: r#37
[#72 'vec3']: r#37
[#72 'vec4']: r#37
[#72 '~']: r#37
[#73 '!']: r#38
[#73 '&']: r#38
[#73 '(']: r#38
[#73 '*']: r#38
[#73 '-']: r#38
[#73 'array']: r#38
[#73 'bitcast']: r#38
[#73 'bool']: r#38
[#73 'f16']: r#38
[#73 'f32']: r#38
[#73 'false']: r#38
[#73 'i32']: r#38
[#73 'mat2x2']: r#38
[#73 'mat2x3']: r#38
[#73 'mat2x4']: r#38
[#73 'mat3x2']: r#38
[#73 'mat3x3']: r#38
[#73 'mat3x4']: r#38
[#73 'mat4x2']: r#38
[#73 'mat4x3']: r#38
[#73 'mat4x4']: r#38
[#73 'ptr']: r#38
[#73 'sampler']: r#38
[#73 'sampler_comparison']: r#38
[#73 'texture_1d']: r#38
[#73 'texture_2d']: r#38
[#73 'texture_2d_array']: r#38
[#73 'texture_3d']: r#38
[#73 'texture_cube']: r#38
[#73 'texture_cube_array']: r#38
[#73 'texture_depth_2d']: r#38
[#73 'texture_depth_2d_array']: r#38
[#73 'texture_depth_cube']: r#38
[#73 'texture_depth_cube_array']: r#38
[#73 'texture_depth_multisampled_2d']: r#38
[#73 'texture_multisampled_2d']: r#38
[#73 'texture_storage_1d']: r#38
[#73 'texture_storage_2d']: r#38
[#73 'texture_storage_2d_array']: r#38
[#73 'texture_storage_3d']: r#38
[#73 'true']: r#38
[#73 'u32']: r#38
[#73 'vec2']: r#38
[#73 'vec3']: r#38
[#73 'vec4']: r#38
[#73 '~']: r#38
[#74 '!=']: r#39
[#74 '%']: r#39
[#74 '&&']: r#39
[#74 '&']: r#39
[#74 '(']: r#40
[#74 ')']: r#39
[#74 '*']: r#39
[#74 '+']: r#39
[#74 ',']: r#39
[#74 '-']: r#39
[#74 '.']: r#39
[#74 '/']: r#39
[#74 ':']: r#39
[#74 ';']: r#39
[#74 '<']: r#39
[#74 '<<']: r#39
[#74 '<=']: r#39
[#74 '==']: r#39
[#74 '>']: r#39
[#74 '>=']: r#39
[#74 '>>']: r#39
[#74 '[']: r#39
[#74 ']']: r#39
[#74 '^']: r#39
[#74 '{']: r#39
[#74 '|']: r#39
[#74 '||']: r#39
[#75 '(']: s#115
[#76 '!=']: r#41
[#76 '%']: r#41
[#76 '&&']: r#41
[#76 '&']: r#41
[#76 ')']: r#41
[#76 '*']: r#41
[#76 '+']: r#41
[#76 ',']: r#41
[#76 '-']: r#41
[#76 '.']: r#41
[#76 '/']: r#41
[#76 ':']: r#41
[#76 ';']: r#41
[#76 '<']: r#41
[#76 '<<']: r#41
[#76 '<=']: r#41
[#76 '==']: r#41
[#76 '>']: r#41
[#76 '>=']: r#41
[#76 '>>']: r#41
[#76 '[']: r#41
[#76 ']']: r#41
[#76 '^']: r#41
[#76 '{']: r#41
[#76 '|']: r#41
[#76 '||']: r#41
[#77 '!=']: r#42
[#77 '%']: r#42
[#77 '&&']: r#42
[#77 '&']: r#42
[#77 ')']: r#42
[#77 '*']: r#42
[#77 '+']: r#42
[#77 ',']: r#42
[#77 '-']: r#42
[#77 '.']: r#42
[#77 '/']: r#42
[#77 ':']: r#42
[#77 ';']: r#42
[#77 '<']: r#42
[#77 '<<']: r#42
[#77 '<=']: r#42
[#77 '==']: r#42
[#77 '>']: r#42
[#77 '>=']: r#42
[#77 '>>']: r#42
[#77 '[']: r#42
[#77 ']']: r#42
[#77 '^']: r#42
[#77 '{']: r#42
[#77 '|']: r#42
[#77 '||']: r#42
[#78 '<']: s#171
[#79 '!=']: r#43
[#79 '%']: r#43
[#79 '%=']: r#43
[#79 '&&']: r#43
[#79 '&']: r#43
[#79 '&=']: r#43
[#79 '(']: r#43
[#79 ')']: r#43
[#79 '*']: r#43
[#79 '*=']: r#43
[#79 '+']: r#43
[#79 '++']: r#43
[#79 '+=']: r#43
[#79 ',']: r#43
[#79 '-']: r#43
[#79 '--']: r#43
[#79 '-=']: r#43
[#79 '.']: r#43
[#79 '/']: r#43
[#79 '/=']: r#43
[#79 ':']: r#43
[#79 ';']: r#43
[#79 '<']: r#43
[#79 '<<']: r#43
[#79 '<<=']: r#43
[#79 '<=']: r#43
[#79 '=']: r#43
[#79 '==']: r#43
[#79 '>']: r#43
[#79 '>=']: r#43
[#79 '>>']: r#43
[#79 '>>=']: r#43
[#79 '[']: r#43
[#79 ']']: r#43
[#79 '^']: r#43
[#79 '^=']: r#43
[#79 '{']: r#43
[#79 '|']: r#43
[#79 '|=']: r#43
[#79 '||']: r#43
[#79 '}']: r#43
[#80 '(']: r#44
[#81 '(']: r#45
[#82 '(']: r#46
[#83 '(']: r#47
[#83 '<']: s#171
[#84 '!=']: r#48
[#84 '%']: r#48
[#84 '&&']: r#48
[#84 '&']: r#48
[#84 ')']: r#48
[#84 '*']: r#48
[#84 '+']: r#48
[#84 ',']: r#48
[#84 '-']: r#48
[#84 '.']: r#48
[#84 '/']: r#48
[#84 ':']: r#48
[#84 ';']: r#48
[#84 '<']: r#48
[#84 '<<']: r#48
[#84 '<=']: r#48
[#84 '==']: r#48
[#84 '>']: r#48
[#84 '>=']: r#48
[#84 '>>']: r#48
[#84 '[']: r#48
[#84 ']']: r#48
[#84 '^']: r#48
[#84 '{']: r#48
[#84 '|']: r#48
[#84 '||']: r#48
[#85 '!=']: r#49
[#85 '%']: r#49
[#85 '&&']: r#49
[#85 '&']: r#49
[#85 ')']: r#49
[#85 '*']: r#49
[#85 '+']: r#49
[#85 ',']: r#49
[#85 '-']: r#49
[#85 '.']: r#49
[#85 '/']: r#49
[#85 ':']: r#49
[#85 ';']: r#49
[#85 '<']: r#49
[#85 '<<']: r#49
[#85 '<=']: r#49
[#85 '==']: r#49
[#85 '>']: r#49
[#85 '>=']: r#49
[#85 '>>']: r#49
[#85 '[']: r#49
[#85 ']']: r#49
[#85 '^']: r#49
[#85 '{']: r#49
[#85 '|']: r#49
[#85 '||']: r#49
[#86 '!=']: r#50
[#86 '%']: r#50
[#86 '&&']: r#50
[#86 '&']: r#50
[#86 ')']: r#50
[#86 '*']: r#50
[#86 '+']: r#50
[#86 ',']: r#50
[#86 '-']: r#50
[#86 '.']: r#50
[#86 '/']: r#50
[#86 ':']: r#50
[#86 ';']: r#50
[#86 '<']: r#50
[#86 '<<']: r#50
[#86 '<=']: r#50
[#86 '==']: r#50
[#86 '>']: r#50
[#86 '>=']: r#50
[#86 '>>']: r#50
[#86 '[']: r#50
[#86 ']']: r#50
[#86 '^']: r#50
[#86 '{']: r#50
[#86 '|']: r#50
[#86 '||']: r#50
[#87 '!']: s#70
[#87 '&']: s#73
[#87 '(']: s#115
[#87 '*']: s#72
[#87 '-']: s#69
[#87 'array']: s#83
[#87 'bitcast']: s#78
[#87 'bool']: s#88
[#87 'f16']: s#117
[#87 'f32']: s#116
[#87 'false']: s#114
[#87 'i32']: s#118
[#87 'mat2x2']: s#99
[#87 'mat2x3']: s#100
[#87 'mat2x4']: s#101
[#87 'mat3x2']: s#102
[#87 'mat3x3']: s#103
[#87 'mat3x4']: s#104
[#87 'mat4x2']: s#105
[#87 'mat4x3']: s#106
[#87 'mat4x4']: s#107
[#87 'ptr']: s#120
[#87 'sampler']: s#134
[#87 'sampler_comparison']: s#135
[#87 'texture_1d']: s#141
[#87 'texture_2d']: s#142
[#87 'texture_2d_array']: s#143
[#87 'texture_3d']: s#144
[#87 'texture_cube']: s#145
[#87 'texture_cube_array']: s#146
[#87 'texture_depth_2d']: s#136
[#87 'texture_depth_2d_array']: s#137
[#87 'texture_depth_cube']: s#138
[#87 'texture_depth_cube_array']: s#139
[#87 'texture_depth_multisampled_2d']: s#140
[#87 'texture_multisampled_2d']: s#147
[#87 'texture_storage_1d']: s#148
[#87 'texture_storage_2d']: s#149
[#87 'texture_storage_2d_array']: s#150
[#87 'texture_storage_3d']: s#151
[#87 'true']: s#113
[#87 'u32']: s#119
[#87 'vec2']: s#96
[#87 'vec3']: s#97
[#87 'vec4']: s#98
[#87 '~']: s#71
[#87 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#87 /0[fh]/]: s#129
[#87 /0[iu]?/]: s#109
[#87 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#87 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#87 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#87 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#87 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#87 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#87 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#87 /[1-9][0-9]*[fh]/]: s#130
[#87 /[1-9][0-9]*[iu]?/]: s#110
[#88 '(']: r#51
[#88 ')']: r#51
[#88 ',']: r#51
[#88 ';']: r#51
[#88 '=']: r#51
[#88 '>']: r#51
[#88 '{']: r#51
[#88 '}']: r#51
[#89 '(']: r#52
[#89 ')']: r#52
[#89 ',']: r#52
[#89 ';']: r#52
[#89 '=']: r#52
[#89 '>']: r#52
[#89 '{']: r#52
[#89 '}']: r#52
[#90 '(']: r#53
[#90 ')']: r#53
[#90 ',']: r#53
[#90 ';']: r#53
[#90 '=']: r#53
[#90 '>']: r#53
[#90 '{']: r#53
[#90 '}']: r#53
[#91 '(']: r#54
[#91 ')']: r#54
[#91 ',']: r#54
[#91 ';']: r#54
[#91 '=']: r#54
[#91 '>']: r#54
[#91 '{']: r#54
[#91 '}']: r#54
[#92 '(']: r#55
[#92 ')']: r#55
[#92 ',']: r#55
[#92 ';']: r#55
[#92 '=']: r#55
[#92 '>']: r#55
[#92 '{']: r#55
[#92 '}']: r#55
[#93 '<']: s#171
[#94 '(']: r#56
[#94 ')']: r#56
[#94 ',']: r#56
[#94 ';']: r#56
[#94 '=']: r#56
[#94 '>']: r#56
[#94 '{']: r#56
[#94 '}']: r#56
[#95 '(']: r#57
[#95 ')']: r#57
[#95 ',']: r#57
[#95 ';']: r#57
[#95 '=']: r#57
[#95 '>']: r#57
[#95 '{']: r#57
[#95 '}']: r#57
[#96 '(']: r#58
[#97 '(']: r#59
[#98 '(']: r#60
[#99 '(']: r#61
[#100 '(']: r#62
[#101 '(']: r#63
[#102 '(']: r#64
[#103 '(']: r#65
[#104 '(']: r#66
[#105 '(']: r#67
[#106 '(']: r#68
[#107 '(']: r#69
[#108 '!=']: r#70
[#108 '%']: r#70
[#108 '&&']: r#70
[#108 '&']: r#70
[#108 ')']: r#70
[#108 '*']: r#70
[#108 '+']: r#70
[#108 ',']: r#70
[#108 '-']: r#70
[#108 '.']: r#70
[#108 '/']: r#70
[#108 ':']: r#70
[#108 ';']: r#70
[#108 '<']: r#70
[#108 '<<']: r#70
[#108 '<=']: r#70
[#108 '==']: r#70
[#108 '>']: r#70
[#108 '>=']: r#70
[#108 '>>']: r#70
[#108 '[']: r#70
[#108 ']']: r#70
[#108 '^']: r#70
[#108 '{']: r#70
[#108 '|']: r#70
[#108 '||']: r#70
[#109 '!=']: r#71
[#109 '%']: r#71
[#109 '&&']: r#71
[#109 '&']: r#71
[#109 ')']: r#71
[#109 '*']: r#71
[#109 '+']: r#71
[#109 ',']: r#71
[#109 '-']: r#71
[#109 '.']: r#71
[#109 '/']: r#71
[#109 ':']: r#71
[#109 ';']: r#71
[#109 '<']: r#71
[#109 '<<']: r#71
[#109 '<=']: r#71
[#109 '==']: r#71
[#109 '>']: r#71
[#109 '>=']: r#71
[#109 '>>']: r#71
[#109 '[']: r#71
[#109 ']']: r#71
[#109 '^']: r#71
[#109 '{']: r#71
[#109 '|']: r#71
[#109 '||']: r#71
[#110 '!=']: r#72
[#110 '%']: r#72
[#110 '&&']: r#72
[#110 '&']: r#72
[#110 ')']: r#72
[#110 '*']: r#72
[#110 '+']: r#72
[#110 ',']: r#72
[#110 '-']: r#72
[#110 '.']: r#72
[#110 '/']: r#72
[#110 ':']: r#72
[#110 ';']: r#72
[#110 '<']: r#72
[#110 '<<']: r#72
[#110 '<=']: r#72
[#110 '==']: r#72
[#110 '>']: r#72
[#110 '>=']: r#72
[#110 '>>']: r#72
[#110 '[']: r#72
[#110 ']']: r#72
[#110 '^']: r#72
[#110 '{']: r#72
[#110 '|']: r#72
[#110 '||']: r#72
[#111 '!=']: r#73
[#111 '%']: r#73
[#111 '&&']: r#73
[#111 '&']: r#73
[#111 ')']: r#73
[#111 '*']: r#73
[#111 '+']: r#73
[#111 ',']: r#73
[#111 '-']: r#73
[#111 '.']: r#73
[#111 '/']: r#73
[#111 ':']: r#73
[#111 ';']: r#73
[#111 '<']: r#73
[#111 '<<']: r#73
[#111 '<=']: r#73
[#111 '==']: r#73
[#111 '>']: r#73
[#111 '>=']: r#73
[#111 '>>']: r#73
[#111 '[']: r#73
[#111 ']']: r#73
[#111 '^']: r#73
[#111 '{']: r#73
[#111 '|']: r#73
[#111 '||']: r#73
[#112 '!=']: r#74
[#112 '%']: r#74
[#112 '&&']: r#74
[#112 '&']: r#74
[#112 ')']: r#74
[#112 '*']: r#74
[#112 '+']: r#74
[#112 ',']: r#74
[#112 '-']: r#74
[#112 '.']: r#74
[#112 '/']: r#74
[#112 ':']: r#74
[#112 ';']: r#74
[#112 '<']: r#74
[#112 '<<']: r#74
[#112 '<=']: r#74
[#112 '==']: r#74
[#112 '>']: r#74
[#112 '>=']: r#74
[#112 '>>']: r#74
[#112 '[']: r#74
[#112 ']']: r#74
[#112 '^']: r#74
[#112 '{']: r#74
[#112 '|']: r#74
[#112 '||']: r#74
[#113 '!=']: r#75
[#113 '%']: r#75
[#113 '&&']: r#75
[#113 '&']: r#75
[#113 ')']: r#75
[#113 '*']: r#75
[#113 '+']: r#75
[#113 ',']: r#75
[#113 '-']: r#75
[#113 '.']: r#75
[#113 '/']: r#75
[#113 ':']: r#75
[#113 ';']: r#75
[#113 '<']: r#75
[#113 '<<']: r#75
[#113 '<=']: r#75
[#113 '==']: r#75
[#113 '>']: r#75
[#113 '>=']: r#75
[#113 '>>']: r#75
[#113 '[']: r#75
[#113 ']']: r#75
[#113 '^']: r#75
[#113 '{']: r#75
[#113 '|']: r#75
[#113 '||']: r#75
[#114 '!=']: r#76
[#114 '%']: r#76
[#114 '&&']: r#76
[#114 '&']: r#76
[#114 ')']: r#76
[#114 '*']: r#76
[#114 '+']: r#76
[#114 ',']: r#76
[#114 '-']: r#76
[#114 '.']: r#76
[#114 '/']: r#76
[#114 ':']: r#76
[#114 ';']: r#76
[#114 '<']: r#76
[#114 '<<']: r#76
[#114 '<=']: r#76
[#114 '==']: r#76
[#114 '>']: r#76
[#114 '>=']: r#76
[#114 '>>']: r#76
[#114 '[']: r#76
[#114 ']']: r#76
[#114 '^']: r#76
[#114 '{']: r#76
[#114 '|']: r#76
[#114 '||']: r#76
[#115 '!']: r#77
[#115 '&']: r#77
[#115 '(']: r#77
[#115 ')']: r#77
[#115 '*']: r#77
[#115 '-']: r#77
[#115 ';']: r#77
[#115 '@']: r#77
[#115 'array']: r#77
[#115 'bitcast']: r#77
[#115 'bool']: r#77
[#115 'const']: r#77
[#115 'f16']: r#77
[#115 'f32']: r#77
[#115 'false']: r#77
[#115 'i32']: r#77
[#115 'let']: r#77
[#115 'mat2x2']: r#77
[#115 'mat2x3']: r#77
[#115 'mat2x4']: r#77
[#115 'mat3x2']: r#77
[#115 'mat3x3']: r#77
[#115 'mat3x4']: r#77
[#115 'mat4x2']: r#77
[#115 'mat4x3']: r#77
[#115 'mat4x4']: r#77
[#115 'ptr']: r#77
[#115 'sampler']: r#77
[#115 'sampler_comparison']: r#77
[#115 'texture_1d']: r#77
[#115 'texture_2d']: r#77
[#115 'texture_2d_array']: r#77
[#115 'texture_3d']: r#77
[#115 'texture_cube']: r#77
[#115 'texture_cube_array']: r#77
[#115 'texture_depth_2d']: r#77
[#115 'texture_depth_2d_array']: r#77
[#115 'texture_depth_cube']: r#77
[#115 'texture_depth_cube_array']: r#77
[#115 'texture_depth_multisampled_2d']: r#77
[#115 'texture_multisampled_2d']: r#77
[#115 'texture_storage_1d']: r#77
[#115 'texture_storage_2d']: r#77
[#115 'texture_storage_2d_array']: r#77
[#115 'texture_storage_3d']: r#77
[#115 'true']: r#77
[#115 'u32']: r#77
[#115 'var']: r#77
[#115 'vec2']: r#77
[#115 'vec3']: r#77
[#115 'vec4']: r#77
[#115 '~']: r#77
[#115 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#77
[#116 '(']: r#78
[#116 ')']: r#78
[#116 ',']: r#78
[#116 ';']: r#78
[#116 '=']: r#78
[#116 '>']: r#78
[#116 '{']: r#78
[#116 '}']: r#78
[#117 '(']: r#79
[#117 ')']: r#79
[#117 ',']: r#79
[#117 ';']: r#79
[#117 '=']: r#79
[#117 '>']: r#79
[#117 '{']: r#79
[#117 '}']: r#79
[#118 '(']: r#80
[#118 ')']: r#80
[#118 ',']: r#80
[#118 ';']: r#80
[#118 '=']: r#80
[#118 '>']: r#80
[#118 '{']: r#80
[#118 '}']: r#80
[#119 '(']: r#81
[#119 ')']: r#81
[#119 ',']: r#81
[#119 ';']: r#81
[#119 '=']: r#81
[#119 '>']: r#81
[#119 '{']: r#81
[#119 '}']: r#81
[#120 '<']: r#82
[#121 '(']: r#83
[#121 ')']: r#83
[#121 ',']: r#83
[#121 ';']: r#83
[#121 '=']: r#83
[#121 '>']: r#83
[#121 '{']: r#83
[#121 '}']: r#83
[#122 '(']: r#84
[#122 ')']: r#84
[#122 ',']: r#84
[#122 ';']: r#84
[#122 '=']: r#84
[#122 '>']: r#84
[#122 '{']: r#84
[#122 '}']: r#84
[#123 '<']: s#171
[#124 '<']: s#171
[#125 '<']: s#171
[#126 '!=']: r#85
[#126 '%']: r#85
[#126 '&&']: r#85
[#126 '&']: r#85
[#126 ')']: r#85
[#126 '*']: r#85
[#126 '+']: r#85
[#126 ',']: r#85
[#126 '-']: r#85
[#126 '.']: r#85
[#126 '/']: r#85
[#126 ':']: r#85
[#126 ';']: r#85
[#126 '<']: r#85
[#126 '<<']: r#85
[#126 '<=']: r#85
[#126 '==']: r#85
[#126 '>']: r#85
[#126 '>=']: r#85
[#126 '>>']: r#85
[#126 '[']: r#85
[#126 ']']: r#85
[#126 '^']: r#85
[#126 '{']: r#85
[#126 '|']: r#85
[#126 '||']: r#85
[#127 '!=']: r#86
[#127 '%']: r#86
[#127 '&&']: r#86
[#127 '&']: r#86
[#127 ')']: r#86
[#127 '*']: r#86
[#127 '+']: r#86
[#127 ',']: r#86
[#127 '-']: r#86
[#127 '.']: r#86
[#127 '/']: r#86
[#127 ':']: r#86
[#127 ';']: r#86
[#127 '<']: r#86
[#127 '<<']: r#86
[#127 '<=']: r#86
[#127 '==']: r#86
[#127 '>']: r#86
[#127 '>=']: r#86
[#127 '>>']: r#86
[#127 '[']: r#86
[#127 ']']: r#86
[#127 '^']: r#86
[#127 '{']: r#86
[#127 '|']: r#86
[#127 '||']: r#86
[#128 '!=']: r#87
[#128 '%']: r#87
[#128 '&&']: r#87
[#128 '&']: r#87
[#128 ')']: r#87
[#128 '*']: r#87
[#128 '+']: r#87
[#128 ',']: r#87
[#128 '-']: r#87
[#128 '.']: r#87
[#128 '/']: r#87
[#128 ':']: r#87
[#128 ';']: r#87
[#128 '<']: r#87
[#128 '<<']: r#87
[#128 '<=']: r#87
[#128 '==']: r#87
[#128 '>']: r#87
[#128 '>=']: r#87
[#128 '>>']: r#87
[#128 '[']: r#87
[#128 ']']: r#87
[#128 '^']: r#87
[#128 '{']: r#87
[#128 '|']: r#87
[#128 '||']: r#87
[#129 '!=']: r#88
[#129 '%']: r#88
[#129 '&&']: r#88
[#129 '&']: r#88
[#129 ')']: r#88
[#129 '*']: r#88
[#129 '+']: r#88
[#129 ',']: r#88
[#129 '-']: r#88
[#129 '.']: r#88
[#129 '/']: r#88
[#129 ':']: r#88
[#129 ';']: r#88
[#129 '<']: r#88
[#129 '<<']: r#88
[#129 '<=']: r#88
[#129 '==']: r#88
[#129 '>']: r#88
[#129 '>=']: r#88
[#129 '>>']: r#88
[#129 '[']: r#88
[#129 ']']: r#88
[#129 '^']: r#88
[#129 '{']: r#88
[#129 '|']: r#88
[#129 '||']: r#88
[#130 '!=']: r#89
[#130 '%']: r#89
[#130 '&&']: r#89
[#130 '&']: r#89
[#130 ')']: r#89
[#130 '*']: r#89
[#130 '+']: r#89
[#130 ',']: r#89
[#130 '-']: r#89
[#130 '.']: r#89
[#130 '/']: r#89
[#130 ':']: r#89
[#130 ';']: r#89
[#130 '<']: r#89
[#130 '<<']: r#89
[#130 '<=']: r#89
[#130 '==']: r#89
[#130 '>']: r#89
[#130 '>=']: r#89
[#130 '>>']: r#89
[#130 '[']: r#89
[#130 ']']: r#89
[#130 '^']: r#89
[#130 '{']: r#89
[#130 '|']: r#89
[#130 '||']: r#89
[#131 '!=']: r#90
[#131 '%']: r#90
[#131 '&&']: r#90
[#131 '&']: r#90
[#131 ')']: r#90
[#131 '*']: r#90
[#131 '+']: r#90
[#131 ',']: r#90
[#131 '-']: r#90
[#131 '.']: r#90
[#131 '/']: r#90
[#131 ':']: r#90
[#131 ';']: r#90
[#131 '<']: r#90
[#131 '<<']: r#90
[#131 '<=']: r#90
[#131 '==']: r#90
[#131 '>']: r#90
[#131 '>=']: r#90
[#131 '>>']: r#90
[#131 '[']: r#90
[#131 ']']: r#90
[#131 '^']: r#90
[#131 '{']: r#90
[#131 '|']: r#90
[#131 '||']: r#90
[#132 '!=']: r#91
[#132 '%']: r#91
[#132 '&&']: r#91
[#132 '&']: r#91
[#132 ')']: r#91
[#132 '*']: r#91
[#132 '+']: r#91
[#132 ',']: r#91
[#132 '-']: r#91
[#132 '.']: r#91
[#132 '/']: r#91
[#132 ':']: r#91
[#132 ';']: r#91
[#132 '<']: r#91
[#132 '<<']: r#91
[#132 '<=']: r#91
[#132 '==']: r#91
[#132 '>']: r#91
[#132 '>=']: r#91
[#132 '>>']: r#91
[#132 '[']: r#91
[#132 ']']: r#91
[#132 '^']: r#91
[#132 '{']: r#91
[#132 '|']: r#91
[#132 '||']: r#91
[#133 '!=']: r#92
[#133 '%']: r#92
[#133 '&&']: r#92
[#133 '&']: r#92
[#133 ')']: r#92
[#133 '*']: r#92
[#133 '+']: r#92
[#133 ',']: r#92
[#133 '-']: r#92
[#133 '.']: r#92
[#133 '/']: r#92
[#133 ':']: r#92
[#133 ';']: r#92
[#133 '<']: r#92
[#133 '<<']: r#92
[#133 '<=']: r#92
[#133 '==']: r#92
[#133 '>']: r#92
[#133 '>=']: r#92
[#133 '>>']: r#92
[#133 '[']: r#92
[#133 ']']: r#92
[#133 '^']: r#92
[#133 '{']: r#92
[#133 '|']: r#92
[#133 '||']: r#92
[#134 '(']: r#93
[#134 ')']: r#93
[#134 ',']: r#93
[#134 ';']: r#93
[#134 '=']: r#93
[#134 '>']: r#93
[#134 '{']: r#93
[#134 '}']: r#93
[#135 '(']: r#94
[#135 ')']: r#94
[#135 ',']: r#94
[#135 ';']: r#94
[#135 '=']: r#94
[#135 '>']: r#94
[#135 '{']: r#94
[#135 '}']: r#94
[#136 '(']: r#95
[#136 ')']: r#95
[#136 ',']: r#95
[#136 ';']: r#95
[#136 '=']: r#95
[#136 '>']: r#95
[#136 '{']: r#95
[#136 '}']: r#95
[#137 '(']: r#96
[#137 ')']: r#96
[#137 ',']: r#96
[#137 ';']: r#96
[#137 '=']: r#96
[#137 '>']: r#96
[#137 '{']: r#96
[#137 '}']: r#96
[#138 '(']: r#97
[#138 ')']: r#97
[#138 ',']: r#97
[#138 ';']: r#97
[#138 '=']: r#97
[#138 '>']: r#97
[#138 '{']: r#97
[#138 '}']: r#97
[#139 '(']: r#98
[#139 ')']: r#98
[#139 ',']: r#98
[#139 ';']: r#98
[#139 '=']: r#98
[#139 '>']: r#98
[#139 '{']: r#98
[#139 '}']: r#98
[#140 '(']: r#99
[#140 ')']: r#99
[#140 ',']: r#99
[#140 ';']: r#99
[#140 '=']: r#99
[#140 '>']: r#99
[#140 '{']: r#99
[#140 '}']: r#99
[#141 '<']: r#100
[#142 '<']: r#101
[#143 '<']: r#102
[#144 '<']: r#103
[#145 '<']: r#104
[#146 '<']: r#105
[#147 '<']: r#106
[#148 '<']: r#107
[#149 '<']: r#108
[#150 '<']: r#109
[#151 '<']: r#110
[#152 '{']: s#184
[#153 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#154 '{']: s#184
[#155 '=']: s#174
[#156 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#157 '=']: s#174
[#158 ':']: s#176
[#158 '=']: r#111
[#159 '=']: r#112
[#160 '=']: s#174
[#161 '<']: s#171
[#162 ';']: r#113
[#162 '@']: r#113
[#162 'const']: r#113
[#162 'fn']: r#113
[#162 'override']: r#113
[#162 'static_assert']: r#113
[#162 'struct']: r#113
[#162 'type']: r#113
[#162 'var']: r#113
[#162 EndOfText]: r#113
[#163 ';']: r#114
[#163 '@']: r#114
[#163 'const']: r#114
[#163 'fn']: r#114
[#163 'override']: r#114
[#163 'static_assert']: r#114
[#163 'struct']: r#114
[#163 'type']: r#114
[#163 'var']: r#114
[#163 EndOfText]: r#114
[#164 ';']: r#115
[#164 '@']: r#115
[#164 'const']: r#115
[#164 'fn']: r#115
[#164 'override']: r#115
[#164 'static_assert']: r#115
[#164 'struct']: r#115
[#164 'type']: r#115
[#164 'var']: r#115
[#164 EndOfText]: r#115
[#165 ';']: r#116
[#165 '@']: r#116
[#165 'const']: r#116
[#165 'fn']: r#116
[#165 'override']: r#116
[#165 'static_assert']: r#116
[#165 'struct']: r#116
[#165 'type']: r#116
[#165 'var']: r#116
[#165 EndOfText]: r#116
[#166 EndOfText]: r#117
[#167 ';']: r#118
[#167 '@']: r#118
[#167 'const']: r#118
[#167 'enable']: r#118
[#167 'fn']: r#118
[#167 'override']: r#118
[#167 'static_assert']: r#118
[#167 'struct']: r#118
[#167 'type']: r#118
[#167 'var']: r#118
[#167 EndOfText]: r#118
[#168 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#169 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#119
[#170 'function']: s#318
[#170 'private']: s#319
[#170 'storage']: s#322
[#170 'uniform']: s#321
[#170 'workgroup']: s#320
[#171 '!']: r#120
[#171 '&']: r#120
[#171 '(']: r#120
[#171 '*']: r#120
[#171 '-']: r#120
[#171 'array']: r#120
[#171 'bitcast']: r#120
[#171 'bool']: r#120
[#171 'f16']: r#120
[#171 'f32']: r#120
[#171 'false']: r#120
[#171 'function']: r#120
[#171 'i32']: r#120
[#171 'mat2x2']: r#120
[#171 'mat2x3']: r#120
[#171 'mat2x4']: r#120
[#171 'mat3x2']: r#120
[#171 'mat3x3']: r#120
[#171 'mat3x4']: r#120
[#171 'mat4x2']: r#120
[#171 'mat4x3']: r#120
[#171 'mat4x4']: r#120
[#171 'private']: r#120
[#171 'ptr']: r#120
[#171 'sampler']: r#120
[#171 'sampler_comparison']: r#120
[#171 'storage']: r#120
[#171 'texture_1d']: r#120
[#171 'texture_2d']: r#120
[#171 'texture_2d_array']: r#120
[#171 'texture_3d']: r#120
[#171 'texture_cube']: r#120
[#171 'texture_cube_array']: r#120
[#171 'texture_depth_2d']: r#120
[#171 'texture_depth_2d_array']: r#120
[#171 'texture_depth_cube']: r#120
[#171 'texture_depth_cube_array']: r#120
[#171 'texture_depth_multisampled_2d']: r#120
[#171 'texture_multisampled_2d']: r#120
[#171 'texture_storage_1d']: r#120
[#171 'texture_storage_2d']: r#120
[#171 'texture_storage_2d_array']: r#120
[#171 'texture_storage_3d']: r#120
[#171 'true']: r#120
[#171 'u32']: r#120
[#171 'uniform']: r#120
[#171 'vec2']: r#120
[#171 'vec3']: r#120
[#171 'vec4']: r#120
[#171 'workgroup']: r#120
[#171 '~']: r#120
[#172 ';']: r#121
[#173 '!']: s#70
[#173 '&']: s#73
[#173 '(']: s#115
[#173 '*']: s#72
[#173 '-']: s#69
[#173 'array']: s#83
[#173 'bitcast']: s#78
[#173 'bool']: s#88
[#173 'f16']: s#117
[#173 'f32']: s#116
[#173 'false']: s#114
[#173 'i32']: s#118
[#173 'mat2x2']: s#99
[#173 'mat2x3']: s#100
[#173 'mat2x4']: s#101
[#173 'mat3x2']: s#102
[#173 'mat3x3']: s#103
[#173 'mat3x4']: s#104
[#173 'mat4x2']: s#105
[#173 'mat4x3']: s#106
[#173 'mat4x4']: s#107
[#173 'ptr']: s#120
[#173 'sampler']: s#134
[#173 'sampler_comparison']: s#135
[#173 'texture_1d']: s#141
[#173 'texture_2d']: s#142
[#173 'texture_2d_array']: s#143
[#173 'texture_3d']: s#144
[#173 'texture_cube']: s#145
[#173 'texture_cube_array']: s#146
[#173 'texture_depth_2d']: s#136
[#173 'texture_depth_2d_array']: s#137
[#173 'texture_depth_cube']: s#138
[#173 'texture_depth_cube_array']: s#139
[#173 'texture_depth_multisampled_2d']: s#140
[#173 'texture_multisampled_2d']: s#147
[#173 'texture_storage_1d']: s#148
[#173 'texture_storage_2d']: s#149
[#173 'texture_storage_2d_array']: s#150
[#173 'texture_storage_3d']: s#151
[#173 'true']: s#113
[#173 'u32']: s#119
[#173 'vec2']: s#96
[#173 'vec3']: s#97
[#173 'vec4']: s#98
[#173 '~']: s#71
[#173 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#173 /0[fh]/]: s#129
[#173 /0[iu]?/]: s#109
[#173 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#173 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#173 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#173 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#173 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#173 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#173 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#173 /[1-9][0-9]*[fh]/]: s#130
[#173 /[1-9][0-9]*[iu]?/]: s#110
[#174 '!']: r#122
[#174 '&']: r#122
[#174 '(']: r#122
[#174 '*']: r#122
[#174 '-']: r#122
[#174 'array']: r#122
[#174 'bitcast']: r#122
[#174 'bool']: r#122
[#174 'f16']: r#122
[#174 'f32']: r#122
[#174 'false']: r#122
[#174 'i32']: r#122
[#174 'mat2x2']: r#122
[#174 'mat2x3']: r#122
[#174 'mat2x4']: r#122
[#174 'mat3x2']: r#122
[#174 'mat3x3']: r#122
[#174 'mat3x4']: r#122
[#174 'mat4x2']: r#122
[#174 'mat4x3']: r#122
[#174 'mat4x4']: r#122
[#174 'ptr']: r#122
[#174 'sampler']: r#122
[#174 'sampler_comparison']: r#122
[#174 'texture_1d']: r#122
[#174 'texture_2d']: r#122
[#174 'texture_2d_array']: r#122
[#174 'texture_3d']: r#122
[#174 'texture_cube']: r#122
[#174 'texture_cube_array']: r#122
[#174 'texture_depth_2d']: r#122
[#174 'texture_depth_2d_array']: r#122
[#174 'texture_depth_cube']: r#122
[#174 'texture_depth_cube_array']: r#122
[#174 'texture_depth_multisampled_2d']: r#122
[#174 'texture_multisampled_2d']: r#122
[#174 'texture_storage_1d']: r#122
[#174 'texture_storage_2d']: r#122
[#174 'texture_storage_2d_array']: r#122
[#174 'texture_storage_3d']: r#122
[#174 'true']: r#122
[#174 'u32']: r#122
[#174 'vec2']: r#122
[#174 'vec3']: r#122
[#174 'vec4']: r#122
[#174 '~']: r#122
[#175 'array']: s#313
[#175 'bool']: s#88
[#175 'f16']: s#117
[#175 'f32']: s#116
[#175 'i32']: s#118
[#175 'ptr']: s#120
[#175 'sampler']: s#134
[#175 'sampler_comparison']: s#135
[#175 'texture_1d']: s#141
[#175 'texture_2d']: s#142
[#175 'texture_2d_array']: s#143
[#175 'texture_3d']: s#144
[#175 'texture_cube']: s#145
[#175 'texture_cube_array']: s#146
[#175 'texture_depth_2d']: s#136
[#175 'texture_depth_2d_array']: s#137
[#175 'texture_depth_cube']: s#138
[#175 'texture_depth_cube_array']: s#139
[#175 'texture_depth_multisampled_2d']: s#140
[#175 'texture_multisampled_2d']: s#147
[#175 'texture_storage_1d']: s#148
[#175 'texture_storage_2d']: s#149
[#175 'texture_storage_2d_array']: s#150
[#175 'texture_storage_3d']: s#151
[#175 'u32']: s#119
[#175 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#176 'array']: r#123
[#176 'bool']: r#123
[#176 'f16']: r#123
[#176 'f32']: r#123
[#176 'i32']: r#123
[#176 'ptr']: r#123
[#176 'sampler']: r#123
[#176 'sampler_comparison']: r#123
[#176 'texture_1d']: r#123
[#176 'texture_2d']: r#123
[#176 'texture_2d_array']: r#123
[#176 'texture_3d']: r#123
[#176 'texture_cube']: r#123
[#176 'texture_cube_array']: r#123
[#176 'texture_depth_2d']: r#123
[#176 'texture_depth_2d_array']: r#123
[#176 'texture_depth_cube']: r#123
[#176 'texture_depth_cube_array']: r#123
[#176 'texture_depth_multisampled_2d']: r#123
[#176 'texture_multisampled_2d']: r#123
[#176 'texture_storage_1d']: r#123
[#176 'texture_storage_2d']: r#123
[#176 'texture_storage_2d_array']: r#123
[#176 'texture_storage_3d']: r#123
[#176 'u32']: r#123
[#176 '{']: r#123
[#177 '!']: s#70
[#177 '&']: s#73
[#177 '(']: s#115
[#177 '*']: s#72
[#177 '-']: s#69
[#177 'array']: s#83
[#177 'bitcast']: s#78
[#177 'bool']: s#88
[#177 'f16']: s#117
[#177 'f32']: s#116
[#177 'false']: s#114
[#177 'i32']: s#118
[#177 'mat2x2']: s#99
[#177 'mat2x3']: s#100
[#177 'mat2x4']: s#101
[#177 'mat3x2']: s#102
[#177 'mat3x3']: s#103
[#177 'mat3x4']: s#104
[#177 'mat4x2']: s#105
[#177 'mat4x3']: s#106
[#177 'mat4x4']: s#107
[#177 'ptr']: s#120
[#177 'sampler']: s#134
[#177 'sampler_comparison']: s#135
[#177 'texture_1d']: s#141
[#177 'texture_2d']: s#142
[#177 'texture_2d_array']: s#143
[#177 'texture_3d']: s#144
[#177 'texture_cube']: s#145
[#177 'texture_cube_array']: s#146
[#177 'texture_depth_2d']: s#136
[#177 'texture_depth_2d_array']: s#137
[#177 'texture_depth_cube']: s#138
[#177 'texture_depth_cube_array']: s#139
[#177 'texture_depth_multisampled_2d']: s#140
[#177 'texture_multisampled_2d']: s#147
[#177 'texture_storage_1d']: s#148
[#177 'texture_storage_2d']: s#149
[#177 'texture_storage_2d_array']: s#150
[#177 'texture_storage_3d']: s#151
[#177 'true']: s#113
[#177 'u32']: s#119
[#177 'vec2']: s#96
[#177 'vec3']: s#97
[#177 'vec4']: s#98
[#177 '~']: s#71
[#177 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#177 /0[fh]/]: s#129
[#177 /0[iu]?/]: s#109
[#177 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#177 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#177 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#177 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#177 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#177 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#177 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#177 /[1-9][0-9]*[fh]/]: s#130
[#177 /[1-9][0-9]*[iu]?/]: s#110
[#178 '=']: s#174
[#179 ':']: s#176
[#179 ';']: r#124
[#179 '=']: r#124
[#180 ';']: r#125
[#180 '=']: r#125
[#181 'array']: s#313
[#181 'bool']: s#88
[#181 'f16']: s#117
[#181 'f32']: s#116
[#181 'i32']: s#118
[#181 'ptr']: s#120
[#181 'sampler']: s#134
[#181 'sampler_comparison']: s#135
[#181 'texture_1d']: s#141
[#181 'texture_2d']: s#142
[#181 'texture_2d_array']: s#143
[#181 'texture_3d']: s#144
[#181 'texture_cube']: s#145
[#181 'texture_cube_array']: s#146
[#181 'texture_depth_2d']: s#136
[#181 'texture_depth_2d_array']: s#137
[#181 'texture_depth_cube']: s#138
[#181 'texture_depth_cube_array']: s#139
[#181 'texture_depth_multisampled_2d']: s#140
[#181 'texture_multisampled_2d']: s#147
[#181 'texture_storage_1d']: s#148
[#181 'texture_storage_2d']: s#149
[#181 'texture_storage_2d_array']: s#150
[#181 'texture_storage_3d']: s#151
[#181 'u32']: s#119
[#181 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#182 ';']: r#126
[#182 '@']: r#126
[#182 'const']: r#126
[#182 'fn']: r#126
[#182 'override']: r#126
[#182 'static_assert']: r#126
[#182 'struct']: r#126
[#182 'type']: r#126
[#182 'var']: r#126
[#182 EndOfText]: r#126
[#183 '@']: s#32
[#184 '&']: r#127
[#184 '(']: r#127
[#184 '*']: r#127
[#184 ';']: r#127
[#184 '@']: r#127
[#184 'break']: r#127
[#184 'case']: r#127
[#184 'const']: r#127
[#184 'continue']: r#127
[#184 'continuing']: r#127
[#184 'default']: r#127
[#184 'discard']: r#127
[#184 'fallthrough']: r#127
[#184 'for']: r#127
[#184 'if']: r#127
[#184 'let']: r#127
[#184 'loop']: r#127
[#184 'return']: r#127
[#184 'static_assert']: r#127
[#184 'switch']: r#127
[#184 'var']: r#127
[#184 'while']: r#127
[#184 '{']: r#127
[#184 '}']: r#127
[#184 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#127
[#185 '(']: s#115
[#186 ';']: r#128
[#186 '@']: r#128
[#186 'const']: r#128
[#186 'fn']: r#128
[#186 'override']: r#128
[#186 'static_assert']: r#128
[#186 'struct']: r#128
[#186 'type']: r#128
[#186 'var']: r#128
[#186 EndOfText]: r#128
[#187 '&']: s#73
[#187 '*']: s#72
[#187 ';']: s#19
[#187 'break']: s#372
[#187 'const']: s#371
[#187 'continue']: s#373
[#187 'discard']: s#356
[#187 'for']: s#366
[#187 'if']: s#375
[#187 'let']: s#370
[#187 'loop']: s#365
[#187 'return']: s#362
[#187 'static_assert']: s#26
[#187 'switch']: s#364
[#187 'var']: s#161
[#187 'while']: s#367
[#187 '{']: s#184
[#187 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#188 'r32float']: s#335
[#188 'r32sint']: s#334
[#188 'r32uint']: s#333
[#188 'rg32float']: s#338
[#188 'rg32sint']: s#337
[#188 'rg32uint']: s#336
[#188 'rgba16float']: s#332
[#188 'rgba16sint']: s#331
[#188 'rgba16uint']: s#330
[#188 'rgba32float']: s#341
[#188 'rgba32sint']: s#340
[#188 'rgba32uint']: s#339
[#188 'rgba8sint']: s#329
[#188 'rgba8snorm']: s#327
[#188 'rgba8uint']: s#328
[#188 'rgba8unorm']: s#326
[#189 'array']: s#313
[#189 'bool']: s#88
[#189 'f16']: s#117
[#189 'f32']: s#116
[#189 'i32']: s#118
[#189 'ptr']: s#120
[#189 'sampler']: s#134
[#189 'sampler_comparison']: s#135
[#189 'texture_1d']: s#141
[#189 'texture_2d']: s#142
[#189 'texture_2d_array']: s#143
[#189 'texture_3d']: s#144
[#189 'texture_cube']: s#145
[#189 'texture_cube_array']: s#146
[#189 'texture_depth_2d']: s#136
[#189 'texture_depth_2d_array']: s#137
[#189 'texture_depth_cube']: s#138
[#189 'texture_depth_cube_array']: s#139
[#189 'texture_depth_multisampled_2d']: s#140
[#189 'texture_multisampled_2d']: s#147
[#189 'texture_storage_1d']: s#148
[#189 'texture_storage_2d']: s#149
[#189 'texture_storage_2d_array']: s#150
[#189 'texture_storage_3d']: s#151
[#189 'u32']: s#119
[#189 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#190 'array']: s#313
[#190 'bool']: s#88
[#190 'f16']: s#117
[#190 'f32']: s#116
[#190 'i32']: s#118
[#190 'ptr']: s#120
[#190 'sampler']: s#134
[#190 'sampler_comparison']: s#135
[#190 'texture_1d']: s#141
[#190 'texture_2d']: s#142
[#190 'texture_2d_array']: s#143
[#190 'texture_3d']: s#144
[#190 'texture_cube']: s#145
[#190 'texture_cube_array']: s#146
[#190 'texture_depth_2d']: s#136
[#190 'texture_depth_2d_array']: s#137
[#190 'texture_depth_cube']: s#138
[#190 'texture_depth_cube_array']: s#139
[#190 'texture_depth_multisampled_2d']: s#140
[#190 'texture_multisampled_2d']: s#147
[#190 'texture_storage_1d']: s#148
[#190 'texture_storage_2d']: s#149
[#190 'texture_storage_2d_array']: s#150
[#190 'texture_storage_3d']: s#151
[#190 'u32']: s#119
[#190 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#191 'function']: s#318
[#191 'private']: s#319
[#191 'storage']: s#322
[#191 'uniform']: s#321
[#191 'workgroup']: s#320
[#192 ')']: s#316
[#193 'array']: s#313
[#193 'bool']: s#88
[#193 'f16']: s#117
[#193 'f32']: s#116
[#193 'i32']: s#118
[#193 'ptr']: s#120
[#193 'sampler']: s#134
[#193 'sampler_comparison']: s#135
[#193 'texture_1d']: s#141
[#193 'texture_2d']: s#142
[#193 'texture_2d_array']: s#143
[#193 'texture_3d']: s#144
[#193 'texture_cube']: s#145
[#193 'texture_cube_array']: s#146
[#193 'texture_depth_2d']: s#136
[#193 'texture_depth_2d_array']: s#137
[#193 'texture_depth_cube']: s#138
[#193 'texture_depth_cube_array']: s#139
[#193 'texture_depth_multisampled_2d']: s#140
[#193 'texture_multisampled_2d']: s#147
[#193 'texture_storage_1d']: s#148
[#193 'texture_storage_2d']: s#149
[#193 'texture_storage_2d_array']: s#150
[#193 'texture_storage_3d']: s#151
[#193 'u32']: s#119
[#193 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#194 'array']: s#313
[#194 'bool']: s#88
[#194 'f16']: s#117
[#194 'f32']: s#116
[#194 'i32']: s#118
[#194 'ptr']: s#120
[#194 'sampler']: s#134
[#194 'sampler_comparison']: s#135
[#194 'texture_1d']: s#141
[#194 'texture_2d']: s#142
[#194 'texture_2d_array']: s#143
[#194 'texture_3d']: s#144
[#194 'texture_cube']: s#145
[#194 'texture_cube_array']: s#146
[#194 'texture_depth_2d']: s#136
[#194 'texture_depth_2d_array']: s#137
[#194 'texture_depth_cube']: s#138
[#194 'texture_depth_cube_array']: s#139
[#194 'texture_depth_multisampled_2d']: s#140
[#194 'texture_multisampled_2d']: s#147
[#194 'texture_storage_1d']: s#148
[#194 'texture_storage_2d']: s#149
[#194 'texture_storage_2d_array']: s#150
[#194 'texture_storage_3d']: s#151
[#194 'u32']: s#119
[#194 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#195 '!=']: r#129
[#195 '%']: r#129
[#195 '&&']: r#129
[#195 '&']: r#129
[#195 ')']: r#129
[#195 '*']: r#129
[#195 '+']: r#129
[#195 ',']: r#129
[#195 '-']: r#129
[#195 '.']: r#129
[#195 '/']: r#129
[#195 ':']: r#129
[#195 ';']: r#129
[#195 '<']: r#129
[#195 '<<']: r#129
[#195 '<=']: r#129
[#195 '==']: r#129
[#195 '>']: r#129
[#195 '>=']: r#129
[#195 '>>']: r#129
[#195 '[']: r#129
[#195 ']']: r#129
[#195 '^']: r#129
[#195 '{']: r#129
[#195 '|']: r#129
[#195 '||']: r#129
[#196 '!']: s#70
[#196 '&']: s#73
[#196 '(']: s#115
[#196 '*']: s#72
[#196 '-']: s#69
[#196 'array']: s#83
[#196 'bitcast']: s#78
[#196 'bool']: s#88
[#196 'f16']: s#117
[#196 'f32']: s#116
[#196 'false']: s#114
[#196 'i32']: s#118
[#196 'mat2x2']: s#99
[#196 'mat2x3']: s#100
[#196 'mat2x4']: s#101
[#196 'mat3x2']: s#102
[#196 'mat3x3']: s#103
[#196 'mat3x4']: s#104
[#196 'mat4x2']: s#105
[#196 'mat4x3']: s#106
[#196 'mat4x4']: s#107
[#196 'ptr']: s#120
[#196 'sampler']: s#134
[#196 'sampler_comparison']: s#135
[#196 'texture_1d']: s#141
[#196 'texture_2d']: s#142
[#196 'texture_2d_array']: s#143
[#196 'texture_3d']: s#144
[#196 'texture_cube']: s#145
[#196 'texture_cube_array']: s#146
[#196 'texture_depth_2d']: s#136
[#196 'texture_depth_2d_array']: s#137
[#196 'texture_depth_cube']: s#138
[#196 'texture_depth_cube_array']: s#139
[#196 'texture_depth_multisampled_2d']: s#140
[#196 'texture_multisampled_2d']: s#147
[#196 'texture_storage_1d']: s#148
[#196 'texture_storage_2d']: s#149
[#196 'texture_storage_2d_array']: s#150
[#196 'texture_storage_3d']: s#151
[#196 'true']: s#113
[#196 'u32']: s#119
[#196 'vec2']: s#96
[#196 'vec3']: s#97
[#196 'vec4']: s#98
[#196 '~']: s#71
[#196 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#196 /0[fh]/]: s#129
[#196 /0[iu]?/]: s#109
[#196 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#196 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#196 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#196 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#196 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#196 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#196 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#196 /[1-9][0-9]*[fh]/]: s#130
[#196 /[1-9][0-9]*[iu]?/]: s#110
[#197 '!=']: r#130
[#197 '%']: r#130
[#197 '&&']: r#130
[#197 '&']: r#130
[#197 ')']: r#130
[#197 '*']: r#130
[#197 '+']: r#130
[#197 ',']: r#130
[#197 '-']: r#130
[#197 '/']: r#130
[#197 ':']: r#130
[#197 ';']: r#130
[#197 '<']: r#130
[#197 '<<']: r#130
[#197 '<=']: r#130
[#197 '==']: r#130
[#197 '>']: r#130
[#197 '>=']: r#130
[#197 '>>']: r#130
[#197 ']']: r#130
[#197 '^']: r#130
[#197 '{']: r#130
[#197 '|']: r#130
[#197 '||']: r#130
[#198 '!=']: r#131
[#198 '%']: r#131
[#198 '&&']: r#131
[#198 '&']: r#131
[#198 ')']: r#131
[#198 '*']: r#131
[#198 '+']: r#131
[#198 ',']: r#131
[#198 '-']: r#131
[#198 '/']: r#131
[#198 ':']: r#131
[#198 ';']: r#131
[#198 '<']: r#131
[#198 '<<']: r#131
[#198 '<=']: r#131
[#198 '==']: r#131
[#198 '>']: r#131
[#198 '>=']: r#131
[#198 '>>']: r#131
[#198 ']']: r#131
[#198 '^']: r#131
[#198 '{']: r#131
[#198 '|']: r#131
[#198 '||']: r#131
[#199 '!']: s#70
[#199 '&']: s#73
[#199 '(']: s#115
[#199 '*']: s#72
[#199 '-']: s#69
[#199 'array']: s#83
[#199 'bitcast']: s#78
[#199 'bool']: s#88
[#199 'f16']: s#117
[#199 'f32']: s#116
[#199 'false']: s#114
[#199 'i32']: s#118
[#199 'mat2x2']: s#99
[#199 'mat2x3']: s#100
[#199 'mat2x4']: s#101
[#199 'mat3x2']: s#102
[#199 'mat3x3']: s#103
[#199 'mat3x4']: s#104
[#199 'mat4x2']: s#105
[#199 'mat4x3']: s#106
[#199 'mat4x4']: s#107
[#199 'ptr']: s#120
[#199 'sampler']: s#134
[#199 'sampler_comparison']: s#135
[#199 'texture_1d']: s#141
[#199 'texture_2d']: s#142
[#199 'texture_2d_array']: s#143
[#199 'texture_3d']: s#144
[#199 'texture_cube']: s#145
[#199 'texture_cube_array']: s#146
[#199 'texture_depth_2d']: s#136
[#199 'texture_depth_2d_array']: s#137
[#199 'texture_depth_cube']: s#138
[#199 'texture_depth_cube_array']: s#139
[#199 'texture_depth_multisampled_2d']: s#140
[#199 'texture_multisampled_2d']: s#147
[#199 'texture_storage_1d']: s#148
[#199 'texture_storage_2d']: s#149
[#199 'texture_storage_2d_array']: s#150
[#199 'texture_storage_3d']: s#151
[#199 'true']: s#113
[#199 'u32']: s#119
[#199 'vec2']: s#96
[#199 'vec3']: s#97
[#199 'vec4']: s#98
[#199 '~']: s#71
[#199 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#199 /0[fh]/]: s#129
[#199 /0[iu]?/]: s#109
[#199 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#199 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#199 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#199 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#199 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#199 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#199 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#199 /[1-9][0-9]*[fh]/]: s#130
[#199 /[1-9][0-9]*[iu]?/]: s#110
[#200 '/[rgba]/']: s#296
[#200 '/[rgba][rgba]/']: s#297
[#200 '/[rgba][rgba][rgba]/']: s#298
[#200 '/[rgba][rgba][rgba][rgba]/']: s#299
[#200 '/[xyzw]/']: s#300
[#200 '/[xyzw][xyzw]/']: s#301
[#200 '/[xyzw][xyzw][xyzw]/']: s#302
[#200 '/[xyzw][xyzw][xyzw][xyzw]/']: s#303
[#200 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#295
[#201 '!']: r#132
[#201 '&']: r#132
[#201 '(']: r#132
[#201 '*']: r#132
[#201 '-']: r#132
[#201 'array']: r#132
[#201 'bitcast']: r#132
[#201 'bool']: r#132
[#201 'f16']: r#132
[#201 'f32']: r#132
[#201 'false']: r#132
[#201 'i32']: r#132
[#201 'mat2x2']: r#132
[#201 'mat2x3']: r#132
[#201 'mat2x4']: r#132
[#201 'mat3x2']: r#132
[#201 'mat3x3']: r#132
[#201 'mat3x4']: r#132
[#201 'mat4x2']: r#132
[#201 'mat4x3']: r#132
[#201 'mat4x4']: r#132
[#201 'ptr']: r#132
[#201 'sampler']: r#132
[#201 'sampler_comparison']: r#132
[#201 'texture_1d']: r#132
[#201 'texture_2d']: r#132
[#201 'texture_2d_array']: r#132
[#201 'texture_3d']: r#132
[#201 'texture_cube']: r#132
[#201 'texture_cube_array']: r#132
[#201 'texture_depth_2d']: r#132
[#201 'texture_depth_2d_array']: r#132
[#201 'texture_depth_cube']: r#132
[#201 'texture_depth_cube_array']: r#132
[#201 'texture_depth_multisampled_2d']: r#132
[#201 'texture_multisampled_2d']: r#132
[#201 'texture_storage_1d']: r#132
[#201 'texture_storage_2d']: r#132
[#201 'texture_storage_2d_array']: r#132
[#201 'texture_storage_3d']: r#132
[#201 'true']: r#132
[#201 'u32']: r#132
[#201 'vec2']: r#132
[#201 'vec3']: r#132
[#201 'vec4']: r#132
[#201 '~']: r#132
[#203 '!=']: r#133
[#203 '%']: r#133
[#203 '&&']: r#133
[#203 '&']: r#133
[#203 ')']: r#133
[#203 '*']: r#133
[#203 '+']: r#133
[#203 ',']: r#133
[#203 '-']: r#133
[#203 '/']: r#133
[#203 ':']: r#133
[#203 ';']: r#133
[#203 '<']: r#133
[#203 '<<']: r#133
[#203 '<=']: r#133
[#203 '==']: r#133
[#203 '>']: r#133
[#203 '>=']: r#133
[#203 '>>']: r#133
[#203 ']']: r#133
[#203 '^']: r#133
[#203 '{']: r#133
[#203 '|']: r#133
[#203 '||']: r#133
[#204 '!=']: r#134
[#204 '%']: r#134
[#204 '&&']: r#134
[#204 '&']: r#134
[#204 ')']: r#134
[#204 '*']: r#134
[#204 '+']: r#134
[#204 ',']: r#134
[#204 '-']: r#134
[#204 '/']: r#134
[#204 ':']: r#134
[#204 ';']: r#134
[#204 '<']: r#134
[#204 '<<']: r#134
[#204 '<=']: r#134
[#204 '==']: r#134
[#204 '>']: r#134
[#204 '>=']: r#134
[#204 '>>']: r#134
[#204 ']']: r#134
[#204 '^']: r#134
[#204 '{']: r#134
[#204 '|']: r#134
[#204 '||']: r#134
[#205 '!=']: r#135
[#205 '%']: r#135
[#205 '&&']: r#135
[#205 '&']: r#135
[#205 ')']: r#135
[#205 '*']: r#135
[#205 '+']: r#135
[#205 ',']: r#135
[#205 '-']: r#135
[#205 '/']: r#135
[#205 ':']: r#135
[#205 ';']: r#135
[#205 '<']: r#135
[#205 '<<']: r#135
[#205 '<=']: r#135
[#205 '==']: r#135
[#205 '>']: r#135
[#205 '>=']: r#135
[#205 '>>']: r#135
[#205 ']']: r#135
[#205 '^']: r#135
[#205 '{']: r#135
[#205 '|']: r#135
[#205 '||']: r#135
[#206 '!=']: r#136
[#206 '%']: r#136
[#206 '&&']: r#136
[#206 '&']: r#136
[#206 ')']: r#136
[#206 '*']: r#136
[#206 '+']: r#136
[#206 ',']: r#136
[#206 '-']: r#136
[#206 '/']: r#136
[#206 ':']: r#136
[#206 ';']: r#136
[#206 '<']: r#136
[#206 '<<']: r#136
[#206 '<=']: r#136
[#206 '==']: r#136
[#206 '>']: r#136
[#206 '>=']: r#136
[#206 '>>']: r#136
[#206 ']']: r#136
[#206 '^']: r#136
[#206 '{']: r#136
[#206 '|']: r#136
[#206 '||']: r#136
[#207 '!=']: r#137
[#207 '%']: r#137
[#207 '&&']: r#137
[#207 '&']: r#137
[#207 ')']: r#137
[#207 '*']: r#137
[#207 '+']: r#137
[#207 ',']: r#137
[#207 '-']: r#137
[#207 '/']: r#137
[#207 ':']: r#137
[#207 ';']: r#137
[#207 '<']: r#137
[#207 '<<']: r#137
[#207 '<=']: r#137
[#207 '==']: r#137
[#207 '>']: r#137
[#207 '>=']: r#137
[#207 '>>']: r#137
[#207 ']']: r#137
[#207 '^']: r#137
[#207 '{']: r#137
[#207 '|']: r#137
[#207 '||']: r#137
[#208 '!']: s#70
[#208 '&']: s#73
[#208 '(']: s#115
[#208 '*']: s#72
[#208 '-']: s#69
[#208 'array']: s#83
[#208 'bitcast']: s#78
[#208 'bool']: s#88
[#208 'f16']: s#117
[#208 'f32']: s#116
[#208 'false']: s#114
[#208 'i32']: s#118
[#208 'mat2x2']: s#99
[#208 'mat2x3']: s#100
[#208 'mat2x4']: s#101
[#208 'mat3x2']: s#102
[#208 'mat3x3']: s#103
[#208 'mat3x4']: s#104
[#208 'mat4x2']: s#105
[#208 'mat4x3']: s#106
[#208 'mat4x4']: s#107
[#208 'ptr']: s#120
[#208 'sampler']: s#134
[#208 'sampler_comparison']: s#135
[#208 'texture_1d']: s#141
[#208 'texture_2d']: s#142
[#208 'texture_2d_array']: s#143
[#208 'texture_3d']: s#144
[#208 'texture_cube']: s#145
[#208 'texture_cube_array']: s#146
[#208 'texture_depth_2d']: s#136
[#208 'texture_depth_2d_array']: s#137
[#208 'texture_depth_cube']: s#138
[#208 'texture_depth_cube_array']: s#139
[#208 'texture_depth_multisampled_2d']: s#140
[#208 'texture_multisampled_2d']: s#147
[#208 'texture_storage_1d']: s#148
[#208 'texture_storage_2d']: s#149
[#208 'texture_storage_2d_array']: s#150
[#208 'texture_storage_3d']: s#151
[#208 'true']: s#113
[#208 'u32']: s#119
[#208 'vec2']: s#96
[#208 'vec3']: s#97
[#208 'vec4']: s#98
[#208 '~']: s#71
[#208 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#208 /0[fh]/]: s#129
[#208 /0[iu]?/]: s#109
[#208 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#208 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#208 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#208 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#208 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#208 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#208 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#208 /[1-9][0-9]*[fh]/]: s#130
[#208 /[1-9][0-9]*[iu]?/]: s#110
[#209 '!']: s#70
[#209 '&']: s#73
[#209 '(']: s#115
[#209 '*']: s#72
[#209 '-']: s#69
[#209 'array']: s#83
[#209 'bitcast']: s#78
[#209 'bool']: s#88
[#209 'f16']: s#117
[#209 'f32']: s#116
[#209 'false']: s#114
[#209 'i32']: s#118
[#209 'mat2x2']: s#99
[#209 'mat2x3']: s#100
[#209 'mat2x4']: s#101
[#209 'mat3x2']: s#102
[#209 'mat3x3']: s#103
[#209 'mat3x4']: s#104
[#209 'mat4x2']: s#105
[#209 'mat4x3']: s#106
[#209 'mat4x4']: s#107
[#209 'ptr']: s#120
[#209 'sampler']: s#134
[#209 'sampler_comparison']: s#135
[#209 'texture_1d']: s#141
[#209 'texture_2d']: s#142
[#209 'texture_2d_array']: s#143
[#209 'texture_3d']: s#144
[#209 'texture_cube']: s#145
[#209 'texture_cube_array']: s#146
[#209 'texture_depth_2d']: s#136
[#209 'texture_depth_2d_array']: s#137
[#209 'texture_depth_cube']: s#138
[#209 'texture_depth_cube_array']: s#139
[#209 'texture_depth_multisampled_2d']: s#140
[#209 'texture_multisampled_2d']: s#147
[#209 'texture_storage_1d']: s#148
[#209 'texture_storage_2d']: s#149
[#209 'texture_storage_2d_array']: s#150
[#209 'texture_storage_3d']: s#151
[#209 'true']: s#113
[#209 'u32']: s#119
[#209 'vec2']: s#96
[#209 'vec3']: s#97
[#209 'vec4']: s#98
[#209 '~']: s#71
[#209 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#209 /0[fh]/]: s#129
[#209 /0[iu]?/]: s#109
[#209 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#209 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#209 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#209 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#209 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#209 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#209 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#209 /[1-9][0-9]*[fh]/]: s#130
[#209 /[1-9][0-9]*[iu]?/]: s#110
[#210 '!']: s#70
[#210 '&']: s#73
[#210 '(']: s#115
[#210 '*']: s#72
[#210 '-']: s#69
[#210 'array']: s#83
[#210 'bitcast']: s#78
[#210 'bool']: s#88
[#210 'f16']: s#117
[#210 'f32']: s#116
[#210 'false']: s#114
[#210 'i32']: s#118
[#210 'mat2x2']: s#99
[#210 'mat2x3']: s#100
[#210 'mat2x4']: s#101
[#210 'mat3x2']: s#102
[#210 'mat3x3']: s#103
[#210 'mat3x4']: s#104
[#210 'mat4x2']: s#105
[#210 'mat4x3']: s#106
[#210 'mat4x4']: s#107
[#210 'ptr']: s#120
[#210 'sampler']: s#134
[#210 'sampler_comparison']: s#135
[#210 'texture_1d']: s#141
[#210 'texture_2d']: s#142
[#210 'texture_2d_array']: s#143
[#210 'texture_3d']: s#144
[#210 'texture_cube']: s#145
[#210 'texture_cube_array']: s#146
[#210 'texture_depth_2d']: s#136
[#210 'texture_depth_2d_array']: s#137
[#210 'texture_depth_cube']: s#138
[#210 'texture_depth_cube_array']: s#139
[#210 'texture_depth_multisampled_2d']: s#140
[#210 'texture_multisampled_2d']: s#147
[#210 'texture_storage_1d']: s#148
[#210 'texture_storage_2d']: s#149
[#210 'texture_storage_2d_array']: s#150
[#210 'texture_storage_3d']: s#151
[#210 'true']: s#113
[#210 'u32']: s#119
[#210 'vec2']: s#96
[#210 'vec3']: s#97
[#210 'vec4']: s#98
[#210 '~']: s#71
[#210 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#210 /0[fh]/]: s#129
[#210 /0[iu]?/]: s#109
[#210 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#210 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#210 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#210 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#210 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#210 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#210 /[1-9][0-9]*[fh]/]: s#130
[#210 /[1-9][0-9]*[iu]?/]: s#110
[#211 '!']: r#138
[#211 '&']: r#138
[#211 '(']: r#138
[#211 '*']: r#138
[#211 '-']: r#138
[#211 'array']: r#138
[#211 'bitcast']: r#138
[#211 'bool']: r#138
[#211 'f16']: r#138
[#211 'f32']: r#138
[#211 'false']: r#138
[#211 'i32']: r#138
[#211 'mat2x2']: r#138
[#211 'mat2x3']: r#138
[#211 'mat2x4']: r#138
[#211 'mat3x2']: r#138
[#211 'mat3x3']: r#138
[#211 'mat3x4']: r#138
[#211 'mat4x2']: r#138
[#211 'mat4x3']: r#138
[#211 'mat4x4']: r#138
[#211 'ptr']: r#138
[#211 'sampler']: r#138
[#211 'sampler_comparison']: r#138
[#211 'texture_1d']: r#138
[#211 'texture_2d']: r#138
[#211 'texture_2d_array']: r#138
[#211 'texture_3d']: r#138
[#211 'texture_cube']: r#138
[#211 'texture_cube_array']: r#138
[#211 'texture_depth_2d']: r#138
[#211 'texture_depth_2d_array']: r#138
[#211 'texture_depth_cube']: r#138
[#211 'texture_depth_cube_array']: r#138
[#211 'texture_depth_multisampled_2d']: r#138
[#211 'texture_multisampled_2d']: r#138
[#211 'texture_storage_1d']: r#138
[#211 'texture_storage_2d']: r#138
[#211 'texture_storage_2d_array']: r#138
[#211 'texture_storage_3d']: r#138
[#211 'true']: r#138
[#211 'u32']: r#138
[#211 'vec2']: r#138
[#211 'vec3']: r#138
[#211 'vec4']: r#138
[#211 '~']: r#138
[#212 '!']: r#139
[#212 '&']: r#139
[#212 '(']: r#139
[#212 '*']: r#139
[#212 '-']: r#139
[#212 'array']: r#139
[#212 'bitcast']: r#139
[#212 'bool']: r#139
[#212 'f16']: r#139
[#212 'f32']: r#139
[#212 'false']: r#139
[#212 'i32']: r#139
[#212 'mat2x2']: r#139
[#212 'mat2x3']: r#139
[#212 'mat2x4']: r#139
[#212 'mat3x2']: r#139
[#212 'mat3x3']: r#139
[#212 'mat3x4']: r#139
[#212 'mat4x2']: r#139
[#212 'mat4x3']: r#139
[#212 'mat4x4']: r#139
[#212 'ptr']: r#139
[#212 'sampler']: r#139
[#212 'sampler_comparison']: r#139
[#212 'texture_1d']: r#139
[#212 'texture_2d']: r#139
[#212 'texture_2d_array']: r#139
[#212 'texture_3d']: r#139
[#212 'texture_cube']: r#139
[#212 'texture_cube_array']: r#139
[#212 'texture_depth_2d']: r#139
[#212 'texture_depth_2d_array']: r#139
[#212 'texture_depth_cube']: r#139
[#212 'texture_depth_cube_array']: r#139
[#212 'texture_depth_multisampled_2d']: r#139
[#212 'texture_multisampled_2d']: r#139
[#212 'texture_storage_1d']: r#139
[#212 'texture_storage_2d']: r#139
[#212 'texture_storage_2d_array']: r#139
[#212 'texture_storage_3d']: r#139
[#212 'true']: r#139
[#212 'u32']: r#139
[#212 'vec2']: r#139
[#212 'vec3']: r#139
[#212 'vec4']: r#139
[#212 '~']: r#139
[#213 '!']: s#70
[#213 '&']: s#73
[#213 '(']: s#115
[#213 '*']: s#72
[#213 '-']: s#69
[#213 'array']: s#83
[#213 'bitcast']: s#78
[#213 'bool']: s#88
[#213 'f16']: s#117
[#213 'f32']: s#116
[#213 'false']: s#114
[#213 'i32']: s#118
[#213 'mat2x2']: s#99
[#213 'mat2x3']: s#100
[#213 'mat2x4']: s#101
[#213 'mat3x2']: s#102
[#213 'mat3x3']: s#103
[#213 'mat3x4']: s#104
[#213 'mat4x2']: s#105
[#213 'mat4x3']: s#106
[#213 'mat4x4']: s#107
[#213 'ptr']: s#120
[#213 'sampler']: s#134
[#213 'sampler_comparison']: s#135
[#213 'texture_1d']: s#141
[#213 'texture_2d']: s#142
[#213 'texture_2d_array']: s#143
[#213 'texture_3d']: s#144
[#213 'texture_cube']: s#145
[#213 'texture_cube_array']: s#146
[#213 'texture_depth_2d']: s#136
[#213 'texture_depth_2d_array']: s#137
[#213 'texture_depth_cube']: s#138
[#213 'texture_depth_cube_array']: s#139
[#213 'texture_depth_multisampled_2d']: s#140
[#213 'texture_multisampled_2d']: s#147
[#213 'texture_storage_1d']: s#148
[#213 'texture_storage_2d']: s#149
[#213 'texture_storage_2d_array']: s#150
[#213 'texture_storage_3d']: s#151
[#213 'true']: s#113
[#213 'u32']: s#119
[#213 'vec2']: s#96
[#213 'vec3']: s#97
[#213 'vec4']: s#98
[#213 '~']: s#71
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#213 /0[fh]/]: s#129
[#213 /0[iu]?/]: s#109
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#213 /[1-9][0-9]*[fh]/]: s#130
[#213 /[1-9][0-9]*[iu]?/]: s#110
[#214 '!']: s#70
[#214 '&']: s#73
[#214 '(']: s#115
[#214 '*']: s#72
[#214 '-']: s#69
[#214 'array']: s#83
[#214 'bitcast']: s#78
[#214 'bool']: s#88
[#214 'f16']: s#117
[#214 'f32']: s#116
[#214 'false']: s#114
[#214 'i32']: s#118
[#214 'mat2x2']: s#99
[#214 'mat2x3']: s#100
[#214 'mat2x4']: s#101
[#214 'mat3x2']: s#102
[#214 'mat3x3']: s#103
[#214 'mat3x4']: s#104
[#214 'mat4x2']: s#105
[#214 'mat4x3']: s#106
[#214 'mat4x4']: s#107
[#214 'ptr']: s#120
[#214 'sampler']: s#134
[#214 'sampler_comparison']: s#135
[#214 'texture_1d']: s#141
[#214 'texture_2d']: s#142
[#214 'texture_2d_array']: s#143
[#214 'texture_3d']: s#144
[#214 'texture_cube']: s#145
[#214 'texture_cube_array']: s#146
[#214 'texture_depth_2d']: s#136
[#214 'texture_depth_2d_array']: s#137
[#214 'texture_depth_cube']: s#138
[#214 'texture_depth_cube_array']: s#139
[#214 'texture_depth_multisampled_2d']: s#140
[#214 'texture_multisampled_2d']: s#147
[#214 'texture_storage_1d']: s#148
[#214 'texture_storage_2d']: s#149
[#214 'texture_storage_2d_array']: s#150
[#214 'texture_storage_3d']: s#151
[#214 'true']: s#113
[#214 'u32']: s#119
[#214 'vec2']: s#96
[#214 'vec3']: s#97
[#214 'vec4']: s#98
[#214 '~']: s#71
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#214 /0[fh]/]: s#129
[#214 /0[iu]?/]: s#109
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#214 /[1-9][0-9]*[fh]/]: s#130
[#214 /[1-9][0-9]*[iu]?/]: s#110
[#215 '!']: r#140
[#215 '&']: r#140
[#215 '(']: r#140
[#215 '*']: r#140
[#215 '-']: r#140
[#215 'array']: r#140
[#215 'bitcast']: r#140
[#215 'bool']: r#140
[#215 'f16']: r#140
[#215 'f32']: r#140
[#215 'false']: r#140
[#215 'i32']: r#140
[#215 'mat2x2']: r#140
[#215 'mat2x3']: r#140
[#215 'mat2x4']: r#140
[#215 'mat3x2']: r#140
[#215 'mat3x3']: r#140
[#215 'mat3x4']: r#140
[#215 'mat4x2']: r#140
[#215 'mat4x3']: r#140
[#215 'mat4x4']: r#140
[#215 'ptr']: r#140
[#215 'sampler']: r#140
[#215 'sampler_comparison']: r#140
[#215 'texture_1d']: r#140
[#215 'texture_2d']: r#140
[#215 'texture_2d_array']: r#140
[#215 'texture_3d']: r#140
[#215 'texture_cube']: r#140
[#215 'texture_cube_array']: r#140
[#215 'texture_depth_2d']: r#140
[#215 'texture_depth_2d_array']: r#140
[#215 'texture_depth_cube']: r#140
[#215 'texture_depth_cube_array']: r#140
[#215 'texture_depth_multisampled_2d']: r#140
[#215 'texture_multisampled_2d']: r#140
[#215 'texture_storage_1d']: r#140
[#215 'texture_storage_2d']: r#140
[#215 'texture_storage_2d_array']: r#140
[#215 'texture_storage_3d']: r#140
[#215 'true']: r#140
[#215 'u32']: r#140
[#215 'vec2']: r#140
[#215 'vec3']: r#140
[#215 'vec4']: r#140
[#215 '~']: r#140
[#216 '!']: r#141
[#216 '&']: r#141
[#216 '(']: r#141
[#216 '*']: r#141
[#216 '-']: r#141
[#216 'array']: r#141
[#216 'bitcast']: r#141
[#216 'bool']: r#141
[#216 'f16']: r#141
[#216 'f32']: r#141
[#216 'false']: r#141
[#216 'i32']: r#141
[#216 'mat2x2']: r#141
[#216 'mat2x3']: r#141
[#216 'mat2x4']: r#141
[#216 'mat3x2']: r#141
[#216 'mat3x3']: r#141
[#216 'mat3x4']: r#141
[#216 'mat4x2']: r#141
[#216 'mat4x3']: r#141
[#216 'mat4x4']: r#141
[#216 'ptr']: r#141
[#216 'sampler']: r#141
[#216 'sampler_comparison']: r#141
[#216 'texture_1d']: r#141
[#216 'texture_2d']: r#141
[#216 'texture_2d_array']: r#141
[#216 'texture_3d']: r#141
[#216 'texture_cube']: r#141
[#216 'texture_cube_array']: r#141
[#216 'texture_depth_2d']: r#141
[#216 'texture_depth_2d_array']: r#141
[#216 'texture_depth_cube']: r#141
[#216 'texture_depth_cube_array']: r#141
[#216 'texture_depth_multisampled_2d']: r#141
[#216 'texture_multisampled_2d']: r#141
[#216 'texture_storage_1d']: r#141
[#216 'texture_storage_2d']: r#141
[#216 'texture_storage_2d_array']: r#141
[#216 'texture_storage_3d']: r#141
[#216 'true']: r#141
[#216 'u32']: r#141
[#216 'vec2']: r#141
[#216 'vec3']: r#141
[#216 'vec4']: r#141
[#216 '~']: r#141
[#217 '!']: s#70
[#217 '&']: s#73
[#217 '(']: s#115
[#217 '*']: s#72
[#217 '-']: s#69
[#217 'array']: s#83
[#217 'bitcast']: s#78
[#217 'bool']: s#88
[#217 'f16']: s#117
[#217 'f32']: s#116
[#217 'false']: s#114
[#217 'i32']: s#118
[#217 'mat2x2']: s#99
[#217 'mat2x3']: s#100
[#217 'mat2x4']: s#101
[#217 'mat3x2']: s#102
[#217 'mat3x3']: s#103
[#217 'mat3x4']: s#104
[#217 'mat4x2']: s#105
[#217 'mat4x3']: s#106
[#217 'mat4x4']: s#107
[#217 'ptr']: s#120
[#217 'sampler']: s#134
[#217 'sampler_comparison']: s#135
[#217 'texture_1d']: s#141
[#217 'texture_2d']: s#142
[#217 'texture_2d_array']: s#143
[#217 'texture_3d']: s#144
[#217 'texture_cube']: s#145
[#217 'texture_cube_array']: s#146
[#217 'texture_depth_2d']: s#136
[#217 'texture_depth_2d_array']: s#137
[#217 'texture_depth_cube']: s#138
[#217 'texture_depth_cube_array']: s#139
[#217 'texture_depth_multisampled_2d']: s#140
[#217 'texture_multisampled_2d']: s#147
[#217 'texture_storage_1d']: s#148
[#217 'texture_storage_2d']: s#149
[#217 'texture_storage_2d_array']: s#150
[#217 'texture_storage_3d']: s#151
[#217 'true']: s#113
[#217 'u32']: s#119
[#217 'vec2']: s#96
[#217 'vec3']: s#97
[#217 'vec4']: s#98
[#217 '~']: s#71
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#217 /0[fh]/]: s#129
[#217 /0[iu]?/]: s#109
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#217 /[1-9][0-9]*[fh]/]: s#130
[#217 /[1-9][0-9]*[iu]?/]: s#110
[#218 '!']: s#70
[#218 '&']: s#73
[#218 '(']: s#115
[#218 '*']: s#72
[#218 '-']: s#69
[#218 'array']: s#83
[#218 'bitcast']: s#78
[#218 'bool']: s#88
[#218 'f16']: s#117
[#218 'f32']: s#116
[#218 'false']: s#114
[#218 'i32']: s#118
[#218 'mat2x2']: s#99
[#218 'mat2x3']: s#100
[#218 'mat2x4']: s#101
[#218 'mat3x2']: s#102
[#218 'mat3x3']: s#103
[#218 'mat3x4']: s#104
[#218 'mat4x2']: s#105
[#218 'mat4x3']: s#106
[#218 'mat4x4']: s#107
[#218 'ptr']: s#120
[#218 'sampler']: s#134
[#218 'sampler_comparison']: s#135
[#218 'texture_1d']: s#141
[#218 'texture_2d']: s#142
[#218 'texture_2d_array']: s#143
[#218 'texture_3d']: s#144
[#218 'texture_cube']: s#145
[#218 'texture_cube_array']: s#146
[#218 'texture_depth_2d']: s#136
[#218 'texture_depth_2d_array']: s#137
[#218 'texture_depth_cube']: s#138
[#218 'texture_depth_cube_array']: s#139
[#218 'texture_depth_multisampled_2d']: s#140
[#218 'texture_multisampled_2d']: s#147
[#218 'texture_storage_1d']: s#148
[#218 'texture_storage_2d']: s#149
[#218 'texture_storage_2d_array']: s#150
[#218 'texture_storage_3d']: s#151
[#218 'true']: s#113
[#218 'u32']: s#119
[#218 'vec2']: s#96
[#218 'vec3']: s#97
[#218 'vec4']: s#98
[#218 '~']: s#71
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#218 /0[fh]/]: s#129
[#218 /0[iu]?/]: s#109
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#218 /[1-9][0-9]*[fh]/]: s#130
[#218 /[1-9][0-9]*[iu]?/]: s#110
[#219 '!']: r#142
[#219 '&']: r#142
[#219 '(']: r#142
[#219 '*']: r#142
[#219 '-']: r#142
[#219 'array']: r#142
[#219 'bitcast']: r#142
[#219 'bool']: r#142
[#219 'f16']: r#142
[#219 'f32']: r#142
[#219 'false']: r#142
[#219 'i32']: r#142
[#219 'mat2x2']: r#142
[#219 'mat2x3']: r#142
[#219 'mat2x4']: r#142
[#219 'mat3x2']: r#142
[#219 'mat3x3']: r#142
[#219 'mat3x4']: r#142
[#219 'mat4x2']: r#142
[#219 'mat4x3']: r#142
[#219 'mat4x4']: r#142
[#219 'ptr']: r#142
[#219 'sampler']: r#142
[#219 'sampler_comparison']: r#142
[#219 'texture_1d']: r#142
[#219 'texture_2d']: r#142
[#219 'texture_2d_array']: r#142
[#219 'texture_3d']: r#142
[#219 'texture_cube']: r#142
[#219 'texture_cube_array']: r#142
[#219 'texture_depth_2d']: r#142
[#219 'texture_depth_2d_array']: r#142
[#219 'texture_depth_cube']: r#142
[#219 'texture_depth_cube_array']: r#142
[#219 'texture_depth_multisampled_2d']: r#142
[#219 'texture_multisampled_2d']: r#142
[#219 'texture_storage_1d']: r#142
[#219 'texture_storage_2d']: r#142
[#219 'texture_storage_2d_array']: r#142
[#219 'texture_storage_3d']: r#142
[#219 'true']: r#142
[#219 'u32']: r#142
[#219 'vec2']: r#142
[#219 'vec3']: r#142
[#219 'vec4']: r#142
[#219 '~']: r#142
[#220 '!']: s#70
[#220 '&']: s#73
[#220 '(']: s#115
[#220 '*']: s#72
[#220 '-']: s#69
[#220 'array']: s#83
[#220 'bitcast']: s#78
[#220 'bool']: s#88
[#220 'f16']: s#117
[#220 'f32']: s#116
[#220 'false']: s#114
[#220 'i32']: s#118
[#220 'mat2x2']: s#99
[#220 'mat2x3']: s#100
[#220 'mat2x4']: s#101
[#220 'mat3x2']: s#102
[#220 'mat3x3']: s#103
[#220 'mat3x4']: s#104
[#220 'mat4x2']: s#105
[#220 'mat4x3']: s#106
[#220 'mat4x4']: s#107
[#220 'ptr']: s#120
[#220 'sampler']: s#134
[#220 'sampler_comparison']: s#135
[#220 'texture_1d']: s#141
[#220 'texture_2d']: s#142
[#220 'texture_2d_array']: s#143
[#220 'texture_3d']: s#144
[#220 'texture_cube']: s#145
[#220 'texture_cube_array']: s#146
[#220 'texture_depth_2d']: s#136
[#220 'texture_depth_2d_array']: s#137
[#220 'texture_depth_cube']: s#138
[#220 'texture_depth_cube_array']: s#139
[#220 'texture_depth_multisampled_2d']: s#140
[#220 'texture_multisampled_2d']: s#147
[#220 'texture_storage_1d']: s#148
[#220 'texture_storage_2d']: s#149
[#220 'texture_storage_2d_array']: s#150
[#220 'texture_storage_3d']: s#151
[#220 'true']: s#113
[#220 'u32']: s#119
[#220 'vec2']: s#96
[#220 'vec3']: s#97
[#220 'vec4']: s#98
[#220 '~']: s#71
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#220 /0[fh]/]: s#129
[#220 /0[iu]?/]: s#109
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#220 /[1-9][0-9]*[fh]/]: s#130
[#220 /[1-9][0-9]*[iu]?/]: s#110
[#221 '!']: r#143
[#221 '&']: r#143
[#221 '(']: r#143
[#221 '*']: r#143
[#221 '-']: r#143
[#221 'array']: r#143
[#221 'bitcast']: r#143
[#221 'bool']: r#143
[#221 'f16']: r#143
[#221 'f32']: r#143
[#221 'false']: r#143
[#221 'i32']: r#143
[#221 'mat2x2']: r#143
[#221 'mat2x3']: r#143
[#221 'mat2x4']: r#143
[#221 'mat3x2']: r#143
[#221 'mat3x3']: r#143
[#221 'mat3x4']: r#143
[#221 'mat4x2']: r#143
[#221 'mat4x3']: r#143
[#221 'mat4x4']: r#143
[#221 'ptr']: r#143
[#221 'sampler']: r#143
[#221 'sampler_comparison']: r#143
[#221 'texture_1d']: r#143
[#221 'texture_2d']: r#143
[#221 'texture_2d_array']: r#143
[#221 'texture_3d']: r#143
[#221 'texture_cube']: r#143
[#221 'texture_cube_array']: r#143
[#221 'texture_depth_2d']: r#143
[#221 'texture_depth_2d_array']: r#143
[#221 'texture_depth_cube']: r#143
[#221 'texture_depth_cube_array']: r#143
[#221 'texture_depth_multisampled_2d']: r#143
[#221 'texture_multisampled_2d']: r#143
[#221 'texture_storage_1d']: r#143
[#221 'texture_storage_2d']: r#143
[#221 'texture_storage_2d_array']: r#143
[#221 'texture_storage_3d']: r#143
[#221 'true']: r#143
[#221 'u32']: r#143
[#221 'vec2']: r#143
[#221 'vec3']: r#143
[#221 'vec4']: r#143
[#221 '~']: r#143
[#222 '!']: s#70
[#222 '&']: s#73
[#222 '(']: s#115
[#222 '*']: s#72
[#222 '-']: s#69
[#222 'array']: s#83
[#222 'bitcast']: s#78
[#222 'bool']: s#88
[#222 'f16']: s#117
[#222 'f32']: s#116
[#222 'false']: s#114
[#222 'i32']: s#118
[#222 'mat2x2']: s#99
[#222 'mat2x3']: s#100
[#222 'mat2x4']: s#101
[#222 'mat3x2']: s#102
[#222 'mat3x3']: s#103
[#222 'mat3x4']: s#104
[#222 'mat4x2']: s#105
[#222 'mat4x3']: s#106
[#222 'mat4x4']: s#107
[#222 'ptr']: s#120
[#222 'sampler']: s#134
[#222 'sampler_comparison']: s#135
[#222 'texture_1d']: s#141
[#222 'texture_2d']: s#142
[#222 'texture_2d_array']: s#143
[#222 'texture_3d']: s#144
[#222 'texture_cube']: s#145
[#222 'texture_cube_array']: s#146
[#222 'texture_depth_2d']: s#136
[#222 'texture_depth_2d_array']: s#137
[#222 'texture_depth_cube']: s#138
[#222 'texture_depth_cube_array']: s#139
[#222 'texture_depth_multisampled_2d']: s#140
[#222 'texture_multisampled_2d']: s#147
[#222 'texture_storage_1d']: s#148
[#222 'texture_storage_2d']: s#149
[#222 'texture_storage_2d_array']: s#150
[#222 'texture_storage_3d']: s#151
[#222 'true']: s#113
[#222 'u32']: s#119
[#222 'vec2']: s#96
[#222 'vec3']: s#97
[#222 'vec4']: s#98
[#222 '~']: s#71
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#222 /0[fh]/]: s#129
[#222 /0[iu]?/]: s#109
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#222 /[1-9][0-9]*[fh]/]: s#130
[#222 /[1-9][0-9]*[iu]?/]: s#110
[#223 '!']: r#144
[#223 '&']: r#144
[#223 '(']: r#144
[#223 '*']: r#144
[#223 '-']: r#144
[#223 'array']: r#144
[#223 'bitcast']: r#144
[#223 'bool']: r#144
[#223 'f16']: r#144
[#223 'f32']: r#144
[#223 'false']: r#144
[#223 'i32']: r#144
[#223 'mat2x2']: r#144
[#223 'mat2x3']: r#144
[#223 'mat2x4']: r#144
[#223 'mat3x2']: r#144
[#223 'mat3x3']: r#144
[#223 'mat3x4']: r#144
[#223 'mat4x2']: r#144
[#223 'mat4x3']: r#144
[#223 'mat4x4']: r#144
[#223 'ptr']: r#144
[#223 'sampler']: r#144
[#223 'sampler_comparison']: r#144
[#223 'texture_1d']: r#144
[#223 'texture_2d']: r#144
[#223 'texture_2d_array']: r#144
[#223 'texture_3d']: r#144
[#223 'texture_cube']: r#144
[#223 'texture_cube_array']: r#144
[#223 'texture_depth_2d']: r#144
[#223 'texture_depth_2d_array']: r#144
[#223 'texture_depth_cube']: r#144
[#223 'texture_depth_cube_array']: r#144
[#223 'texture_depth_multisampled_2d']: r#144
[#223 'texture_multisampled_2d']: r#144
[#223 'texture_storage_1d']: r#144
[#223 'texture_storage_2d']: r#144
[#223 'texture_storage_2d_array']: r#144
[#223 'texture_storage_3d']: r#144
[#223 'true']: r#144
[#223 'u32']: r#144
[#223 'vec2']: r#144
[#223 'vec3']: r#144
[#223 'vec4']: r#144
[#223 '~']: r#144
[#224 '!']: s#70
[#224 '&']: s#73
[#224 '(']: s#115
[#224 '*']: s#72
[#224 '-']: s#69
[#224 'array']: s#83
[#224 'bitcast']: s#78
[#224 'bool']: s#88
[#224 'f16']: s#117
[#224 'f32']: s#116
[#224 'false']: s#114
[#224 'i32']: s#118
[#224 'mat2x2']: s#99
[#224 'mat2x3']: s#100
[#224 'mat2x4']: s#101
[#224 'mat3x2']: s#102
[#224 'mat3x3']: s#103
[#224 'mat3x4']: s#104
[#224 'mat4x2']: s#105
[#224 'mat4x3']: s#106
[#224 'mat4x4']: s#107
[#224 'ptr']: s#120
[#224 'sampler']: s#134
[#224 'sampler_comparison']: s#135
[#224 'texture_1d']: s#141
[#224 'texture_2d']: s#142
[#224 'texture_2d_array']: s#143
[#224 'texture_3d']: s#144
[#224 'texture_cube']: s#145
[#224 'texture_cube_array']: s#146
[#224 'texture_depth_2d']: s#136
[#224 'texture_depth_2d_array']: s#137
[#224 'texture_depth_cube']: s#138
[#224 'texture_depth_cube_array']: s#139
[#224 'texture_depth_multisampled_2d']: s#140
[#224 'texture_multisampled_2d']: s#147
[#224 'texture_storage_1d']: s#148
[#224 'texture_storage_2d']: s#149
[#224 'texture_storage_2d_array']: s#150
[#224 'texture_storage_3d']: s#151
[#224 'true']: s#113
[#224 'u32']: s#119
[#224 'vec2']: s#96
[#224 'vec3']: s#97
[#224 'vec4']: s#98
[#224 '~']: s#71
[#224 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#224 /0[fh]/]: s#129
[#224 /0[iu]?/]: s#109
[#224 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#224 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#224 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#224 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#224 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#224 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#224 /[1-9][0-9]*[fh]/]: s#130
[#224 /[1-9][0-9]*[iu]?/]: s#110
[#225 '!']: s#70
[#225 '&']: s#73
[#225 '(']: s#115
[#225 '*']: s#72
[#225 '-']: s#69
[#225 'array']: s#83
[#225 'bitcast']: s#78
[#225 'bool']: s#88
[#225 'f16']: s#117
[#225 'f32']: s#116
[#225 'false']: s#114
[#225 'i32']: s#118
[#225 'mat2x2']: s#99
[#225 'mat2x3']: s#100
[#225 'mat2x4']: s#101
[#225 'mat3x2']: s#102
[#225 'mat3x3']: s#103
[#225 'mat3x4']: s#104
[#225 'mat4x2']: s#105
[#225 'mat4x3']: s#106
[#225 'mat4x4']: s#107
[#225 'ptr']: s#120
[#225 'sampler']: s#134
[#225 'sampler_comparison']: s#135
[#225 'texture_1d']: s#141
[#225 'texture_2d']: s#142
[#225 'texture_2d_array']: s#143
[#225 'texture_3d']: s#144
[#225 'texture_cube']: s#145
[#225 'texture_cube_array']: s#146
[#225 'texture_depth_2d']: s#136
[#225 'texture_depth_2d_array']: s#137
[#225 'texture_depth_cube']: s#138
[#225 'texture_depth_cube_array']: s#139
[#225 'texture_depth_multisampled_2d']: s#140
[#225 'texture_multisampled_2d']: s#147
[#225 'texture_storage_1d']: s#148
[#225 'texture_storage_2d']: s#149
[#225 'texture_storage_2d_array']: s#150
[#225 'texture_storage_3d']: s#151
[#225 'true']: s#113
[#225 'u32']: s#119
[#225 'vec2']: s#96
[#225 'vec3']: s#97
[#225 'vec4']: s#98
[#225 '~']: s#71
[#225 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#225 /0[fh]/]: s#129
[#225 /0[iu]?/]: s#109
[#225 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#225 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#225 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#225 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#225 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#225 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#225 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#225 /[1-9][0-9]*[fh]/]: s#130
[#225 /[1-9][0-9]*[iu]?/]: s#110
[#226 '!']: s#70
[#226 '&']: s#73
[#226 '(']: s#115
[#226 '*']: s#72
[#226 '-']: s#69
[#226 'array']: s#83
[#226 'bitcast']: s#78
[#226 'bool']: s#88
[#226 'f16']: s#117
[#226 'f32']: s#116
[#226 'false']: s#114
[#226 'i32']: s#118
[#226 'mat2x2']: s#99
[#226 'mat2x3']: s#100
[#226 'mat2x4']: s#101
[#226 'mat3x2']: s#102
[#226 'mat3x3']: s#103
[#226 'mat3x4']: s#104
[#226 'mat4x2']: s#105
[#226 'mat4x3']: s#106
[#226 'mat4x4']: s#107
[#226 'ptr']: s#120
[#226 'sampler']: s#134
[#226 'sampler_comparison']: s#135
[#226 'texture_1d']: s#141
[#226 'texture_2d']: s#142
[#226 'texture_2d_array']: s#143
[#226 'texture_3d']: s#144
[#226 'texture_cube']: s#145
[#226 'texture_cube_array']: s#146
[#226 'texture_depth_2d']: s#136
[#226 'texture_depth_2d_array']: s#137
[#226 'texture_depth_cube']: s#138
[#226 'texture_depth_cube_array']: s#139
[#226 'texture_depth_multisampled_2d']: s#140
[#226 'texture_multisampled_2d']: s#147
[#226 'texture_storage_1d']: s#148
[#226 'texture_storage_2d']: s#149
[#226 'texture_storage_2d_array']: s#150
[#226 'texture_storage_3d']: s#151
[#226 'true']: s#113
[#226 'u32']: s#119
[#226 'vec2']: s#96
[#226 'vec3']: s#97
[#226 'vec4']: s#98
[#226 '~']: s#71
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#226 /0[fh]/]: s#129
[#226 /0[iu]?/]: s#109
[#226 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#226 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#226 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#226 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#226 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#226 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#226 /[1-9][0-9]*[fh]/]: s#130
[#226 /[1-9][0-9]*[iu]?/]: s#110
[#227 '!']: s#70
[#227 '&']: s#73
[#227 '(']: s#115
[#227 '*']: s#72
[#227 '-']: s#69
[#227 'array']: s#83
[#227 'bitcast']: s#78
[#227 'bool']: s#88
[#227 'f16']: s#117
[#227 'f32']: s#116
[#227 'false']: s#114
[#227 'i32']: s#118
[#227 'mat2x2']: s#99
[#227 'mat2x3']: s#100
[#227 'mat2x4']: s#101
[#227 'mat3x2']: s#102
[#227 'mat3x3']: s#103
[#227 'mat3x4']: s#104
[#227 'mat4x2']: s#105
[#227 'mat4x3']: s#106
[#227 'mat4x4']: s#107
[#227 'ptr']: s#120
[#227 'sampler']: s#134
[#227 'sampler_comparison']: s#135
[#227 'texture_1d']: s#141
[#227 'texture_2d']: s#142
[#227 'texture_2d_array']: s#143
[#227 'texture_3d']: s#144
[#227 'texture_cube']: s#145
[#227 'texture_cube_array']: s#146
[#227 'texture_depth_2d']: s#136
[#227 'texture_depth_2d_array']: s#137
[#227 'texture_depth_cube']: s#138
[#227 'texture_depth_cube_array']: s#139
[#227 'texture_depth_multisampled_2d']: s#140
[#227 'texture_multisampled_2d']: s#147
[#227 'texture_storage_1d']: s#148
[#227 'texture_storage_2d']: s#149
[#227 'texture_storage_2d_array']: s#150
[#227 'texture_storage_3d']: s#151
[#227 'true']: s#113
[#227 'u32']: s#119
[#227 'vec2']: s#96
[#227 'vec3']: s#97
[#227 'vec4']: s#98
[#227 '~']: s#71
[#227 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#227 /0[fh]/]: s#129
[#227 /0[iu]?/]: s#109
[#227 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#227 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#227 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#227 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#227 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#227 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#227 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#227 /[1-9][0-9]*[fh]/]: s#130
[#227 /[1-9][0-9]*[iu]?/]: s#110
[#228 '!']: s#70
[#228 '&']: s#73
[#228 '(']: s#115
[#228 '*']: s#72
[#228 '-']: s#69
[#228 'array']: s#83
[#228 'bitcast']: s#78
[#228 'bool']: s#88
[#228 'f16']: s#117
[#228 'f32']: s#116
[#228 'false']: s#114
[#228 'i32']: s#118
[#228 'mat2x2']: s#99
[#228 'mat2x3']: s#100
[#228 'mat2x4']: s#101
[#228 'mat3x2']: s#102
[#228 'mat3x3']: s#103
[#228 'mat3x4']: s#104
[#228 'mat4x2']: s#105
[#228 'mat4x3']: s#106
[#228 'mat4x4']: s#107
[#228 'ptr']: s#120
[#228 'sampler']: s#134
[#228 'sampler_comparison']: s#135
[#228 'texture_1d']: s#141
[#228 'texture_2d']: s#142
[#228 'texture_2d_array']: s#143
[#228 'texture_3d']: s#144
[#228 'texture_cube']: s#145
[#228 'texture_cube_array']: s#146
[#228 'texture_depth_2d']: s#136
[#228 'texture_depth_2d_array']: s#137
[#228 'texture_depth_cube']: s#138
[#228 'texture_depth_cube_array']: s#139
[#228 'texture_depth_multisampled_2d']: s#140
[#228 'texture_multisampled_2d']: s#147
[#228 'texture_storage_1d']: s#148
[#228 'texture_storage_2d']: s#149
[#228 'texture_storage_2d_array']: s#150
[#228 'texture_storage_3d']: s#151
[#228 'true']: s#113
[#228 'u32']: s#119
[#228 'vec2']: s#96
[#228 'vec3']: s#97
[#228 'vec4']: s#98
[#228 '~']: s#71
[#228 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#228 /0[fh]/]: s#129
[#228 /0[iu]?/]: s#109
[#228 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#228 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#228 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#228 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#228 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#228 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#228 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#228 /[1-9][0-9]*[fh]/]: s#130
[#228 /[1-9][0-9]*[iu]?/]: s#110
[#229 '!']: s#70
[#229 '&']: s#73
[#229 '(']: s#115
[#229 '*']: s#72
[#229 '-']: s#69
[#229 'array']: s#83
[#229 'bitcast']: s#78
[#229 'bool']: s#88
[#229 'f16']: s#117
[#229 'f32']: s#116
[#229 'false']: s#114
[#229 'i32']: s#118
[#229 'mat2x2']: s#99
[#229 'mat2x3']: s#100
[#229 'mat2x4']: s#101
[#229 'mat3x2']: s#102
[#229 'mat3x3']: s#103
[#229 'mat3x4']: s#104
[#229 'mat4x2']: s#105
[#229 'mat4x3']: s#106
[#229 'mat4x4']: s#107
[#229 'ptr']: s#120
[#229 'sampler']: s#134
[#229 'sampler_comparison']: s#135
[#229 'texture_1d']: s#141
[#229 'texture_2d']: s#142
[#229 'texture_2d_array']: s#143
[#229 'texture_3d']: s#144
[#229 'texture_cube']: s#145
[#229 'texture_cube_array']: s#146
[#229 'texture_depth_2d']: s#136
[#229 'texture_depth_2d_array']: s#137
[#229 'texture_depth_cube']: s#138
[#229 'texture_depth_cube_array']: s#139
[#229 'texture_depth_multisampled_2d']: s#140
[#229 'texture_multisampled_2d']: s#147
[#229 'texture_storage_1d']: s#148
[#229 'texture_storage_2d']: s#149
[#229 'texture_storage_2d_array']: s#150
[#229 'texture_storage_3d']: s#151
[#229 'true']: s#113
[#229 'u32']: s#119
[#229 'vec2']: s#96
[#229 'vec3']: s#97
[#229 'vec4']: s#98
[#229 '~']: s#71
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#229 /0[fh]/]: s#129
[#229 /0[iu]?/]: s#109
[#229 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#229 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#229 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#229 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#229 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#229 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#229 /[1-9][0-9]*[fh]/]: s#130
[#229 /[1-9][0-9]*[iu]?/]: s#110
[#230 '!']: s#70
[#230 '&']: s#73
[#230 '(']: s#115
[#230 '*']: s#72
[#230 '-']: s#69
[#230 'array']: s#83
[#230 'bitcast']: s#78
[#230 'bool']: s#88
[#230 'f16']: s#117
[#230 'f32']: s#116
[#230 'false']: s#114
[#230 'i32']: s#118
[#230 'mat2x2']: s#99
[#230 'mat2x3']: s#100
[#230 'mat2x4']: s#101
[#230 'mat3x2']: s#102
[#230 'mat3x3']: s#103
[#230 'mat3x4']: s#104
[#230 'mat4x2']: s#105
[#230 'mat4x3']: s#106
[#230 'mat4x4']: s#107
[#230 'ptr']: s#120
[#230 'sampler']: s#134
[#230 'sampler_comparison']: s#135
[#230 'texture_1d']: s#141
[#230 'texture_2d']: s#142
[#230 'texture_2d_array']: s#143
[#230 'texture_3d']: s#144
[#230 'texture_cube']: s#145
[#230 'texture_cube_array']: s#146
[#230 'texture_depth_2d']: s#136
[#230 'texture_depth_2d_array']: s#137
[#230 'texture_depth_cube']: s#138
[#230 'texture_depth_cube_array']: s#139
[#230 'texture_depth_multisampled_2d']: s#140
[#230 'texture_multisampled_2d']: s#147
[#230 'texture_storage_1d']: s#148
[#230 'texture_storage_2d']: s#149
[#230 'texture_storage_2d_array']: s#150
[#230 'texture_storage_3d']: s#151
[#230 'true']: s#113
[#230 'u32']: s#119
[#230 'vec2']: s#96
[#230 'vec3']: s#97
[#230 'vec4']: s#98
[#230 '~']: s#71
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#230 /0[fh]/]: s#129
[#230 /0[iu]?/]: s#109
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#230 /[1-9][0-9]*[fh]/]: s#130
[#230 /[1-9][0-9]*[iu]?/]: s#110
[#231 '!']: r#145
[#231 '&']: r#145
[#231 '(']: r#145
[#231 ')']: r#145
[#231 '*']: r#145
[#231 ',']: r#145
[#231 '-']: r#145
[#231 ';']: r#145
[#231 '=']: r#145
[#231 '>']: r#145
[#231 'array']: r#145
[#231 'bitcast']: r#145
[#231 'bool']: r#145
[#231 'f16']: r#145
[#231 'f32']: r#145
[#231 'false']: r#145
[#231 'i32']: r#145
[#231 'mat2x2']: r#145
[#231 'mat2x3']: r#145
[#231 'mat2x4']: r#145
[#231 'mat3x2']: r#145
[#231 'mat3x3']: r#145
[#231 'mat3x4']: r#145
[#231 'mat4x2']: r#145
[#231 'mat4x3']: r#145
[#231 'mat4x4']: r#145
[#231 'ptr']: r#145
[#231 'sampler']: r#145
[#231 'sampler_comparison']: r#145
[#231 'texture_1d']: r#145
[#231 'texture_2d']: r#145
[#231 'texture_2d_array']: r#145
[#231 'texture_3d']: r#145
[#231 'texture_cube']: r#145
[#231 'texture_cube_array']: r#145
[#231 'texture_depth_2d']: r#145
[#231 'texture_depth_2d_array']: r#145
[#231 'texture_depth_cube']: r#145
[#231 'texture_depth_cube_array']: r#145
[#231 'texture_depth_multisampled_2d']: r#145
[#231 'texture_multisampled_2d']: r#145
[#231 'texture_storage_1d']: r#145
[#231 'texture_storage_2d']: r#145
[#231 'texture_storage_2d_array']: r#145
[#231 'texture_storage_3d']: r#145
[#231 'true']: r#145
[#231 'u32']: r#145
[#231 'vec2']: r#145
[#231 'vec3']: r#145
[#231 'vec4']: r#145
[#231 '{']: r#145
[#231 '}']: r#145
[#231 '~']: r#145
[#231 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#145
[#232 '!']: r#146
[#232 '&']: r#146
[#232 '(']: r#146
[#232 '*']: r#146
[#232 '-']: r#146
[#232 'array']: r#146
[#232 'bitcast']: r#146
[#232 'bool']: r#146
[#232 'f16']: r#146
[#232 'f32']: r#146
[#232 'false']: r#146
[#232 'i32']: r#146
[#232 'mat2x2']: r#146
[#232 'mat2x3']: r#146
[#232 'mat2x4']: r#146
[#232 'mat3x2']: r#146
[#232 'mat3x3']: r#146
[#232 'mat3x4']: r#146
[#232 'mat4x2']: r#146
[#232 'mat4x3']: r#146
[#232 'mat4x4']: r#146
[#232 'ptr']: r#146
[#232 'sampler']: r#146
[#232 'sampler_comparison']: r#146
[#232 'texture_1d']: r#146
[#232 'texture_2d']: r#146
[#232 'texture_2d_array']: r#146
[#232 'texture_3d']: r#146
[#232 'texture_cube']: r#146
[#232 'texture_cube_array']: r#146
[#232 'texture_depth_2d']: r#146
[#232 'texture_depth_2d_array']: r#146
[#232 'texture_depth_cube']: r#146
[#232 'texture_depth_cube_array']: r#146
[#232 'texture_depth_multisampled_2d']: r#146
[#232 'texture_multisampled_2d']: r#146
[#232 'texture_storage_1d']: r#146
[#232 'texture_storage_2d']: r#146
[#232 'texture_storage_2d_array']: r#146
[#232 'texture_storage_3d']: r#146
[#232 'true']: r#146
[#232 'u32']: r#146
[#232 'vec2']: r#146
[#232 'vec3']: r#146
[#232 'vec4']: r#146
[#232 '~']: r#146
[#233 '!']: r#147
[#233 '&']: r#147
[#233 '(']: r#147
[#233 '*']: r#147
[#233 '-']: r#147
[#233 'array']: r#147
[#233 'bitcast']: r#147
[#233 'bool']: r#147
[#233 'f16']: r#147
[#233 'f32']: r#147
[#233 'false']: r#147
[#233 'i32']: r#147
[#233 'mat2x2']: r#147
[#233 'mat2x3']: r#147
[#233 'mat2x4']: r#147
[#233 'mat3x2']: r#147
[#233 'mat3x3']: r#147
[#233 'mat3x4']: r#147
[#233 'mat4x2']: r#147
[#233 'mat4x3']: r#147
[#233 'mat4x4']: r#147
[#233 'ptr']: r#147
[#233 'sampler']: r#147
[#233 'sampler_comparison']: r#147
[#233 'texture_1d']: r#147
[#233 'texture_2d']: r#147
[#233 'texture_2d_array']: r#147
[#233 'texture_3d']: r#147
[#233 'texture_cube']: r#147
[#233 'texture_cube_array']: r#147
[#233 'texture_depth_2d']: r#147
[#233 'texture_depth_2d_array']: r#147
[#233 'texture_depth_cube']: r#147
[#233 'texture_depth_cube_array']: r#147
[#233 'texture_depth_multisampled_2d']: r#147
[#233 'texture_multisampled_2d']: r#147
[#233 'texture_storage_1d']: r#147
[#233 'texture_storage_2d']: r#147
[#233 'texture_storage_2d_array']: r#147
[#233 'texture_storage_3d']: r#147
[#233 'true']: r#147
[#233 'u32']: r#147
[#233 'vec2']: r#147
[#233 'vec3']: r#147
[#233 'vec4']: r#147
[#233 '~']: r#147
[#234 '!']: r#148
[#234 '&']: r#148
[#234 '(']: r#148
[#234 '*']: r#148
[#234 '-']: r#148
[#234 'array']: r#148
[#234 'bitcast']: r#148
[#234 'bool']: r#148
[#234 'f16']: r#148
[#234 'f32']: r#148
[#234 'false']: r#148
[#234 'i32']: r#148
[#234 'mat2x2']: r#148
[#234 'mat2x3']: r#148
[#234 'mat2x4']: r#148
[#234 'mat3x2']: r#148
[#234 'mat3x3']: r#148
[#234 'mat3x4']: r#148
[#234 'mat4x2']: r#148
[#234 'mat4x3']: r#148
[#234 'mat4x4']: r#148
[#234 'ptr']: r#148
[#234 'sampler']: r#148
[#234 'sampler_comparison']: r#148
[#234 'texture_1d']: r#148
[#234 'texture_2d']: r#148
[#234 'texture_2d_array']: r#148
[#234 'texture_3d']: r#148
[#234 'texture_cube']: r#148
[#234 'texture_cube_array']: r#148
[#234 'texture_depth_2d']: r#148
[#234 'texture_depth_2d_array']: r#148
[#234 'texture_depth_cube']: r#148
[#234 'texture_depth_cube_array']: r#148
[#234 'texture_depth_multisampled_2d']: r#148
[#234 'texture_multisampled_2d']: r#148
[#234 'texture_storage_1d']: r#148
[#234 'texture_storage_2d']: r#148
[#234 'texture_storage_2d_array']: r#148
[#234 'texture_storage_3d']: r#148
[#234 'true']: r#148
[#234 'u32']: r#148
[#234 'vec2']: r#148
[#234 'vec3']: r#148
[#234 'vec4']: r#148
[#234 '~']: r#148
[#235 '!']: r#149
[#235 '&']: r#149
[#235 '(']: r#149
[#235 '*']: r#149
[#235 '-']: r#149
[#235 'array']: r#149
[#235 'bitcast']: r#149
[#235 'bool']: r#149
[#235 'f16']: r#149
[#235 'f32']: r#149
[#235 'false']: r#149
[#235 'i32']: r#149
[#235 'mat2x2']: r#149
[#235 'mat2x3']: r#149
[#235 'mat2x4']: r#149
[#235 'mat3x2']: r#149
[#235 'mat3x3']: r#149
[#235 'mat3x4']: r#149
[#235 'mat4x2']: r#149
[#235 'mat4x3']: r#149
[#235 'mat4x4']: r#149
[#235 'ptr']: r#149
[#235 'sampler']: r#149
[#235 'sampler_comparison']: r#149
[#235 'texture_1d']: r#149
[#235 'texture_2d']: r#149
[#235 'texture_2d_array']: r#149
[#235 'texture_3d']: r#149
[#235 'texture_cube']: r#149
[#235 'texture_cube_array']: r#149
[#235 'texture_depth_2d']: r#149
[#235 'texture_depth_2d_array']: r#149
[#235 'texture_depth_cube']: r#149
[#235 'texture_depth_cube_array']: r#149
[#235 'texture_depth_multisampled_2d']: r#149
[#235 'texture_multisampled_2d']: r#149
[#235 'texture_storage_1d']: r#149
[#235 'texture_storage_2d']: r#149
[#235 'texture_storage_2d_array']: r#149
[#235 'texture_storage_3d']: r#149
[#235 'true']: r#149
[#235 'u32']: r#149
[#235 'vec2']: r#149
[#235 'vec3']: r#149
[#235 'vec4']: r#149
[#235 '~']: r#149
[#236 '!']: s#70
[#236 '&']: s#73
[#236 '(']: s#115
[#236 '*']: s#72
[#236 '-']: s#69
[#236 'array']: s#83
[#236 'bitcast']: s#78
[#236 'bool']: s#88
[#236 'f16']: s#117
[#236 'f32']: s#116
[#236 'false']: s#114
[#236 'i32']: s#118
[#236 'mat2x2']: s#99
[#236 'mat2x3']: s#100
[#236 'mat2x4']: s#101
[#236 'mat3x2']: s#102
[#236 'mat3x3']: s#103
[#236 'mat3x4']: s#104
[#236 'mat4x2']: s#105
[#236 'mat4x3']: s#106
[#236 'mat4x4']: s#107
[#236 'ptr']: s#120
[#236 'sampler']: s#134
[#236 'sampler_comparison']: s#135
[#236 'texture_1d']: s#141
[#236 'texture_2d']: s#142
[#236 'texture_2d_array']: s#143
[#236 'texture_3d']: s#144
[#236 'texture_cube']: s#145
[#236 'texture_cube_array']: s#146
[#236 'texture_depth_2d']: s#136
[#236 'texture_depth_2d_array']: s#137
[#236 'texture_depth_cube']: s#138
[#236 'texture_depth_cube_array']: s#139
[#236 'texture_depth_multisampled_2d']: s#140
[#236 'texture_multisampled_2d']: s#147
[#236 'texture_storage_1d']: s#148
[#236 'texture_storage_2d']: s#149
[#236 'texture_storage_2d_array']: s#150
[#236 'texture_storage_3d']: s#151
[#236 'true']: s#113
[#236 'u32']: s#119
[#236 'vec2']: s#96
[#236 'vec3']: s#97
[#236 'vec4']: s#98
[#236 '~']: s#71
[#236 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#236 /0[fh]/]: s#129
[#236 /0[iu]?/]: s#109
[#236 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#236 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#236 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#236 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#236 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#236 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#236 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#236 /[1-9][0-9]*[fh]/]: s#130
[#236 /[1-9][0-9]*[iu]?/]: s#110
[#237 '!']: r#150
[#237 '&']: r#150
[#237 '(']: r#150
[#237 '*']: r#150
[#237 '-']: r#150
[#237 'array']: r#150
[#237 'bitcast']: r#150
[#237 'bool']: r#150
[#237 'f16']: r#150
[#237 'f32']: r#150
[#237 'false']: r#150
[#237 'i32']: r#150
[#237 'mat2x2']: r#150
[#237 'mat2x3']: r#150
[#237 'mat2x4']: r#150
[#237 'mat3x2']: r#150
[#237 'mat3x3']: r#150
[#237 'mat3x4']: r#150
[#237 'mat4x2']: r#150
[#237 'mat4x3']: r#150
[#237 'mat4x4']: r#150
[#237 'ptr']: r#150
[#237 'sampler']: r#150
[#237 'sampler_comparison']: r#150
[#237 'texture_1d']: r#150
[#237 'texture_2d']: r#150
[#237 'texture_2d_array']: r#150
[#237 'texture_3d']: r#150
[#237 'texture_cube']: r#150
[#237 'texture_cube_array']: r#150
[#237 'texture_depth_2d']: r#150
[#237 'texture_depth_2d_array']: r#150
[#237 'texture_depth_cube']: r#150
[#237 'texture_depth_cube_array']: r#150
[#237 'texture_depth_multisampled_2d']: r#150
[#237 'texture_multisampled_2d']: r#150
[#237 'texture_storage_1d']: r#150
[#237 'texture_storage_2d']: r#150
[#237 'texture_storage_2d_array']: r#150
[#237 'texture_storage_3d']: r#150
[#237 'true']: r#150
[#237 'u32']: r#150
[#237 'vec2']: r#150
[#237 'vec3']: r#150
[#237 'vec4']: r#150
[#237 '~']: r#150
[#238 '!']: s#70
[#238 '&']: s#73
[#238 '(']: s#115
[#238 '*']: s#72
[#238 '-']: s#69
[#238 'array']: s#83
[#238 'bitcast']: s#78
[#238 'bool']: s#88
[#238 'f16']: s#117
[#238 'f32']: s#116
[#238 'false']: s#114
[#238 'i32']: s#118
[#238 'mat2x2']: s#99
[#238 'mat2x3']: s#100
[#238 'mat2x4']: s#101
[#238 'mat3x2']: s#102
[#238 'mat3x3']: s#103
[#238 'mat3x4']: s#104
[#238 'mat4x2']: s#105
[#238 'mat4x3']: s#106
[#238 'mat4x4']: s#107
[#238 'ptr']: s#120
[#238 'sampler']: s#134
[#238 'sampler_comparison']: s#135
[#238 'texture_1d']: s#141
[#238 'texture_2d']: s#142
[#238 'texture_2d_array']: s#143
[#238 'texture_3d']: s#144
[#238 'texture_cube']: s#145
[#238 'texture_cube_array']: s#146
[#238 'texture_depth_2d']: s#136
[#238 'texture_depth_2d_array']: s#137
[#238 'texture_depth_cube']: s#138
[#238 'texture_depth_cube_array']: s#139
[#238 'texture_depth_multisampled_2d']: s#140
[#238 'texture_multisampled_2d']: s#147
[#238 'texture_storage_1d']: s#148
[#238 'texture_storage_2d']: s#149
[#238 'texture_storage_2d_array']: s#150
[#238 'texture_storage_3d']: s#151
[#238 'true']: s#113
[#238 'u32']: s#119
[#238 'vec2']: s#96
[#238 'vec3']: s#97
[#238 'vec4']: s#98
[#238 '~']: s#71
[#238 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#238 /0[fh]/]: s#129
[#238 /0[iu]?/]: s#109
[#238 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#238 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#238 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#238 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#238 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#238 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#238 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#238 /[1-9][0-9]*[fh]/]: s#130
[#238 /[1-9][0-9]*[iu]?/]: s#110
[#239 '!']: r#151
[#239 '&']: r#151
[#239 '(']: r#151
[#239 '*']: r#151
[#239 '-']: r#151
[#239 'array']: r#151
[#239 'bitcast']: r#151
[#239 'bool']: r#151
[#239 'f16']: r#151
[#239 'f32']: r#151
[#239 'false']: r#151
[#239 'i32']: r#151
[#239 'mat2x2']: r#151
[#239 'mat2x3']: r#151
[#239 'mat2x4']: r#151
[#239 'mat3x2']: r#151
[#239 'mat3x3']: r#151
[#239 'mat3x4']: r#151
[#239 'mat4x2']: r#151
[#239 'mat4x3']: r#151
[#239 'mat4x4']: r#151
[#239 'ptr']: r#151
[#239 'sampler']: r#151
[#239 'sampler_comparison']: r#151
[#239 'texture_1d']: r#151
[#239 'texture_2d']: r#151
[#239 'texture_2d_array']: r#151
[#239 'texture_3d']: r#151
[#239 'texture_cube']: r#151
[#239 'texture_cube_array']: r#151
[#239 'texture_depth_2d']: r#151
[#239 'texture_depth_2d_array']: r#151
[#239 'texture_depth_cube']: r#151
[#239 'texture_depth_cube_array']: r#151
[#239 'texture_depth_multisampled_2d']: r#151
[#239 'texture_multisampled_2d']: r#151
[#239 'texture_storage_1d']: r#151
[#239 'texture_storage_2d']: r#151
[#239 'texture_storage_2d_array']: r#151
[#239 'texture_storage_3d']: r#151
[#239 'true']: r#151
[#239 'u32']: r#151
[#239 'vec2']: r#151
[#239 'vec3']: r#151
[#239 'vec4']: r#151
[#239 '~']: r#151
[#240 '!']: s#70
[#240 '&']: s#73
[#240 '(']: s#115
[#240 '*']: s#72
[#240 '-']: s#69
[#240 'array']: s#83
[#240 'bitcast']: s#78
[#240 'bool']: s#88
[#240 'f16']: s#117
[#240 'f32']: s#116
[#240 'false']: s#114
[#240 'i32']: s#118
[#240 'mat2x2']: s#99
[#240 'mat2x3']: s#100
[#240 'mat2x4']: s#101
[#240 'mat3x2']: s#102
[#240 'mat3x3']: s#103
[#240 'mat3x4']: s#104
[#240 'mat4x2']: s#105
[#240 'mat4x3']: s#106
[#240 'mat4x4']: s#107
[#240 'ptr']: s#120
[#240 'sampler']: s#134
[#240 'sampler_comparison']: s#135
[#240 'texture_1d']: s#141
[#240 'texture_2d']: s#142
[#240 'texture_2d_array']: s#143
[#240 'texture_3d']: s#144
[#240 'texture_cube']: s#145
[#240 'texture_cube_array']: s#146
[#240 'texture_depth_2d']: s#136
[#240 'texture_depth_2d_array']: s#137
[#240 'texture_depth_cube']: s#138
[#240 'texture_depth_cube_array']: s#139
[#240 'texture_depth_multisampled_2d']: s#140
[#240 'texture_multisampled_2d']: s#147
[#240 'texture_storage_1d']: s#148
[#240 'texture_storage_2d']: s#149
[#240 'texture_storage_2d_array']: s#150
[#240 'texture_storage_3d']: s#151
[#240 'true']: s#113
[#240 'u32']: s#119
[#240 'vec2']: s#96
[#240 'vec3']: s#97
[#240 'vec4']: s#98
[#240 '~']: s#71
[#240 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#240 /0[fh]/]: s#129
[#240 /0[iu]?/]: s#109
[#240 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#240 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#240 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#240 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#240 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#240 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#240 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#240 /[1-9][0-9]*[fh]/]: s#130
[#240 /[1-9][0-9]*[iu]?/]: s#110
[#241 '!']: s#70
[#241 '&']: s#73
[#241 '(']: s#115
[#241 '*']: s#72
[#241 '-']: s#69
[#241 'array']: s#83
[#241 'bitcast']: s#78
[#241 'bool']: s#88
[#241 'f16']: s#117
[#241 'f32']: s#116
[#241 'false']: s#114
[#241 'i32']: s#118
[#241 'mat2x2']: s#99
[#241 'mat2x3']: s#100
[#241 'mat2x4']: s#101
[#241 'mat3x2']: s#102
[#241 'mat3x3']: s#103
[#241 'mat3x4']: s#104
[#241 'mat4x2']: s#105
[#241 'mat4x3']: s#106
[#241 'mat4x4']: s#107
[#241 'ptr']: s#120
[#241 'sampler']: s#134
[#241 'sampler_comparison']: s#135
[#241 'texture_1d']: s#141
[#241 'texture_2d']: s#142
[#241 'texture_2d_array']: s#143
[#241 'texture_3d']: s#144
[#241 'texture_cube']: s#145
[#241 'texture_cube_array']: s#146
[#241 'texture_depth_2d']: s#136
[#241 'texture_depth_2d_array']: s#137
[#241 'texture_depth_cube']: s#138
[#241 'texture_depth_cube_array']: s#139
[#241 'texture_depth_multisampled_2d']: s#140
[#241 'texture_multisampled_2d']: s#147
[#241 'texture_storage_1d']: s#148
[#241 'texture_storage_2d']: s#149
[#241 'texture_storage_2d_array']: s#150
[#241 'texture_storage_3d']: s#151
[#241 'true']: s#113
[#241 'u32']: s#119
[#241 'vec2']: s#96
[#241 'vec3']: s#97
[#241 'vec4']: s#98
[#241 '~']: s#71
[#241 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#241 /0[fh]/]: s#129
[#241 /0[iu]?/]: s#109
[#241 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#241 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#241 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#241 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#241 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#241 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#241 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#241 /[1-9][0-9]*[fh]/]: s#130
[#241 /[1-9][0-9]*[iu]?/]: s#110
[#242 '!']: s#70
[#242 '&']: s#73
[#242 '(']: s#115
[#242 '*']: s#72
[#242 '-']: s#69
[#242 'array']: s#83
[#242 'bitcast']: s#78
[#242 'bool']: s#88
[#242 'f16']: s#117
[#242 'f32']: s#116
[#242 'false']: s#114
[#242 'i32']: s#118
[#242 'mat2x2']: s#99
[#242 'mat2x3']: s#100
[#242 'mat2x4']: s#101
[#242 'mat3x2']: s#102
[#242 'mat3x3']: s#103
[#242 'mat3x4']: s#104
[#242 'mat4x2']: s#105
[#242 'mat4x3']: s#106
[#242 'mat4x4']: s#107
[#242 'ptr']: s#120
[#242 'sampler']: s#134
[#242 'sampler_comparison']: s#135
[#242 'texture_1d']: s#141
[#242 'texture_2d']: s#142
[#242 'texture_2d_array']: s#143
[#242 'texture_3d']: s#144
[#242 'texture_cube']: s#145
[#242 'texture_cube_array']: s#146
[#242 'texture_depth_2d']: s#136
[#242 'texture_depth_2d_array']: s#137
[#242 'texture_depth_cube']: s#138
[#242 'texture_depth_cube_array']: s#139
[#242 'texture_depth_multisampled_2d']: s#140
[#242 'texture_multisampled_2d']: s#147
[#242 'texture_storage_1d']: s#148
[#242 'texture_storage_2d']: s#149
[#242 'texture_storage_2d_array']: s#150
[#242 'texture_storage_3d']: s#151
[#242 'true']: s#113
[#242 'u32']: s#119
[#242 'vec2']: s#96
[#242 'vec3']: s#97
[#242 'vec4']: s#98
[#242 '~']: s#71
[#242 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#242 /0[fh]/]: s#129
[#242 /0[iu]?/]: s#109
[#242 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#242 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#242 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#242 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#242 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#242 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#242 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#242 /[1-9][0-9]*[fh]/]: s#130
[#242 /[1-9][0-9]*[iu]?/]: s#110
[#243 'flat']: s#269
[#243 'linear']: s#268
[#243 'perspective']: s#267
[#244 '!']: s#70
[#244 '&']: s#73
[#244 '(']: s#115
[#244 '*']: s#72
[#244 '-']: s#69
[#244 'array']: s#83
[#244 'bitcast']: s#78
[#244 'bool']: s#88
[#244 'f16']: s#117
[#244 'f32']: s#116
[#244 'false']: s#114
[#244 'i32']: s#118
[#244 'mat2x2']: s#99
[#244 'mat2x3']: s#100
[#244 'mat2x4']: s#101
[#244 'mat3x2']: s#102
[#244 'mat3x3']: s#103
[#244 'mat3x4']: s#104
[#244 'mat4x2']: s#105
[#244 'mat4x3']: s#106
[#244 'mat4x4']: s#107
[#244 'ptr']: s#120
[#244 'sampler']: s#134
[#244 'sampler_comparison']: s#135
[#244 'texture_1d']: s#141
[#244 'texture_2d']: s#142
[#244 'texture_2d_array']: s#143
[#244 'texture_3d']: s#144
[#244 'texture_cube']: s#145
[#244 'texture_cube_array']: s#146
[#244 'texture_depth_2d']: s#136
[#244 'texture_depth_2d_array']: s#137
[#244 'texture_depth_cube']: s#138
[#244 'texture_depth_cube_array']: s#139
[#244 'texture_depth_multisampled_2d']: s#140
[#244 'texture_multisampled_2d']: s#147
[#244 'texture_storage_1d']: s#148
[#244 'texture_storage_2d']: s#149
[#244 'texture_storage_2d_array']: s#150
[#244 'texture_storage_3d']: s#151
[#244 'true']: s#113
[#244 'u32']: s#119
[#244 'vec2']: s#96
[#244 'vec3']: s#97
[#244 'vec4']: s#98
[#244 '~']: s#71
[#244 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#244 /0[fh]/]: s#129
[#244 /0[iu]?/]: s#109
[#244 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#244 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#244 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#244 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#244 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#244 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#244 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#244 /[1-9][0-9]*[fh]/]: s#130
[#244 /[1-9][0-9]*[iu]?/]: s#110
[#245 '!']: s#70
[#245 '&']: s#73
[#245 '(']: s#115
[#245 '*']: s#72
[#245 '-']: s#69
[#245 'array']: s#83
[#245 'bitcast']: s#78
[#245 'bool']: s#88
[#245 'f16']: s#117
[#245 'f32']: s#116
[#245 'false']: s#114
[#245 'i32']: s#118
[#245 'mat2x2']: s#99
[#245 'mat2x3']: s#100
[#245 'mat2x4']: s#101
[#245 'mat3x2']: s#102
[#245 'mat3x3']: s#103
[#245 'mat3x4']: s#104
[#245 'mat4x2']: s#105
[#245 'mat4x3']: s#106
[#245 'mat4x4']: s#107
[#245 'ptr']: s#120
[#245 'sampler']: s#134
[#245 'sampler_comparison']: s#135
[#245 'texture_1d']: s#141
[#245 'texture_2d']: s#142
[#245 'texture_2d_array']: s#143
[#245 'texture_3d']: s#144
[#245 'texture_cube']: s#145
[#245 'texture_cube_array']: s#146
[#245 'texture_depth_2d']: s#136
[#245 'texture_depth_2d_array']: s#137
[#245 'texture_depth_cube']: s#138
[#245 'texture_depth_cube_array']: s#139
[#245 'texture_depth_multisampled_2d']: s#140
[#245 'texture_multisampled_2d']: s#147
[#245 'texture_storage_1d']: s#148
[#245 'texture_storage_2d']: s#149
[#245 'texture_storage_2d_array']: s#150
[#245 'texture_storage_3d']: s#151
[#245 'true']: s#113
[#245 'u32']: s#119
[#245 'vec2']: s#96
[#245 'vec3']: s#97
[#245 'vec4']: s#98
[#245 '~']: s#71
[#245 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#245 /0[fh]/]: s#129
[#245 /0[iu]?/]: s#109
[#245 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#245 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#245 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#245 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#245 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#245 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#245 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#245 /[1-9][0-9]*[fh]/]: s#130
[#245 /[1-9][0-9]*[iu]?/]: s#110
[#246 'frag_depth']: s#256
[#246 'front_facing']: s#255
[#246 'global_invocation_id']: s#259
[#246 'instance_index']: s#253
[#246 'local_invocation_id']: s#257
[#246 'local_invocation_index']: s#258
[#246 'num_workgroups']: s#261
[#246 'position']: s#254
[#246 'sample_index']: s#262
[#246 'sample_mask']: s#263
[#246 'vertex_index']: s#252
[#246 'workgroup_id']: s#260
[#247 '!']: s#70
[#247 '&']: s#73
[#247 '(']: s#115
[#247 '*']: s#72
[#247 '-']: s#69
[#247 'array']: s#83
[#247 'bitcast']: s#78
[#247 'bool']: s#88
[#247 'f16']: s#117
[#247 'f32']: s#116
[#247 'false']: s#114
[#247 'i32']: s#118
[#247 'mat2x2']: s#99
[#247 'mat2x3']: s#100
[#247 'mat2x4']: s#101
[#247 'mat3x2']: s#102
[#247 'mat3x3']: s#103
[#247 'mat3x4']: s#104
[#247 'mat4x2']: s#105
[#247 'mat4x3']: s#106
[#247 'mat4x4']: s#107
[#247 'ptr']: s#120
[#247 'sampler']: s#134
[#247 'sampler_comparison']: s#135
[#247 'texture_1d']: s#141
[#247 'texture_2d']: s#142
[#247 'texture_2d_array']: s#143
[#247 'texture_3d']: s#144
[#247 'texture_cube']: s#145
[#247 'texture_cube_array']: s#146
[#247 'texture_depth_2d']: s#136
[#247 'texture_depth_2d_array']: s#137
[#247 'texture_depth_cube']: s#138
[#247 'texture_depth_cube_array']: s#139
[#247 'texture_depth_multisampled_2d']: s#140
[#247 'texture_multisampled_2d']: s#147
[#247 'texture_storage_1d']: s#148
[#247 'texture_storage_2d']: s#149
[#247 'texture_storage_2d_array']: s#150
[#247 'texture_storage_3d']: s#151
[#247 'true']: s#113
[#247 'u32']: s#119
[#247 'vec2']: s#96
[#247 'vec3']: s#97
[#247 'vec4']: s#98
[#247 '~']: s#71
[#247 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#247 /0[fh]/]: s#129
[#247 /0[iu]?/]: s#109
[#247 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#247 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#247 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#247 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#247 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#247 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#247 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#247 /[1-9][0-9]*[fh]/]: s#130
[#247 /[1-9][0-9]*[iu]?/]: s#110
[#248 '!']: s#70
[#248 '&']: s#73
[#248 '(']: s#115
[#248 '*']: s#72
[#248 '-']: s#69
[#248 'array']: s#83
[#248 'bitcast']: s#78
[#248 'bool']: s#88
[#248 'f16']: s#117
[#248 'f32']: s#116
[#248 'false']: s#114
[#248 'i32']: s#118
[#248 'mat2x2']: s#99
[#248 'mat2x3']: s#100
[#248 'mat2x4']: s#101
[#248 'mat3x2']: s#102
[#248 'mat3x3']: s#103
[#248 'mat3x4']: s#104
[#248 'mat4x2']: s#105
[#248 'mat4x3']: s#106
[#248 'mat4x4']: s#107
[#248 'ptr']: s#120
[#248 'sampler']: s#134
[#248 'sampler_comparison']: s#135
[#248 'texture_1d']: s#141
[#248 'texture_2d']: s#142
[#248 'texture_2d_array']: s#143
[#248 'texture_3d']: s#144
[#248 'texture_cube']: s#145
[#248 'texture_cube_array']: s#146
[#248 'texture_depth_2d']: s#136
[#248 'texture_depth_2d_array']: s#137
[#248 'texture_depth_cube']: s#138
[#248 'texture_depth_cube_array']: s#139
[#248 'texture_depth_multisampled_2d']: s#140
[#248 'texture_multisampled_2d']: s#147
[#248 'texture_storage_1d']: s#148
[#248 'texture_storage_2d']: s#149
[#248 'texture_storage_2d_array']: s#150
[#248 'texture_storage_3d']: s#151
[#248 'true']: s#113
[#248 'u32']: s#119
[#248 'vec2']: s#96
[#248 'vec3']: s#97
[#248 'vec4']: s#98
[#248 '~']: s#71
[#248 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#248 /0[fh]/]: s#129
[#248 /0[iu]?/]: s#109
[#248 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#248 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#248 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#248 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#248 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#248 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#248 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#248 /[1-9][0-9]*[fh]/]: s#130
[#248 /[1-9][0-9]*[iu]?/]: s#110
[#249 ',']: s#401
[#250 ',']: s#401
[#251 ',']: s#401
[#252 ')']: r#152
[#252 ',']: r#152
[#253 ')']: r#153
[#253 ',']: r#153
[#254 ')']: r#154
[#254 ',']: r#154
[#255 ')']: r#155
[#255 ',']: r#155
[#256 ')']: r#156
[#256 ',']: r#156
[#257 ')']: r#157
[#257 ',']: r#157
[#258 ')']: r#158
[#258 ',']: r#158
[#259 ')']: r#159
[#259 ',']: r#159
[#260 ')']: r#160
[#260 ',']: r#160
[#261 ')']: r#161
[#261 ',']: r#161
[#262 ')']: r#162
[#262 ',']: r#162
[#263 ')']: r#163
[#263 ',']: r#163
[#264 ',']: s#401
[#265 ',']: s#401
[#266 ',']: s#401
[#267 ')']: r#164
[#267 ',']: r#164
[#268 ')']: r#165
[#268 ',']: r#165
[#269 ')']: r#166
[#269 ',']: r#166
[#270 ',']: s#401
[#271 ',']: s#401
[#272 ',']: s#401
[#273 ')']: r#167
[#273 ',']: r#167
[#273 ':']: r#167
[#273 ';']: r#167
[#273 ']']: r#167
[#273 '{']: r#167
[#273 '||']: r#168
[#274 '!=']: r#31
[#274 '%']: r#31
[#274 '&&']: r#31
[#274 ')']: r#31
[#274 '*']: r#31
[#274 '+']: r#31
[#274 ',']: r#31
[#274 '-']: r#31
[#274 '/']: r#31
[#274 ':']: r#31
[#274 ';']: r#31
[#274 '<']: r#31
[#274 '<<']: s#215
[#274 '<=']: r#31
[#274 '==']: r#31
[#274 '>']: r#31
[#274 '>=']: r#31
[#274 '>>']: s#216
[#274 ']']: r#31
[#274 '{']: r#31
[#274 '||']: r#31
[#275 '&&']: r#170
[#275 ')']: r#169
[#275 ',']: r#169
[#275 ':']: r#169
[#275 ';']: r#169
[#275 ']']: r#169
[#275 '{']: r#169
[#276 '&&']: r#171
[#276 ')']: r#171
[#276 ',']: r#171
[#276 ':']: r#171
[#276 ';']: r#171
[#276 ']']: r#171
[#276 '{']: r#171
[#276 '||']: r#171
[#277 '&&']: r#172
[#277 ')']: r#172
[#277 ',']: r#172
[#277 ':']: r#172
[#277 ';']: r#172
[#277 ']']: r#172
[#277 '{']: r#172
[#277 '||']: r#172
[#278 '&&']: r#173
[#278 ')']: r#173
[#278 ',']: r#173
[#278 ':']: r#173
[#278 ';']: r#173
[#278 ']']: r#173
[#278 '{']: r#173
[#278 '||']: r#173
[#279 '&&']: r#174
[#279 ')']: r#174
[#279 ',']: r#174
[#279 ':']: r#174
[#279 ';']: r#174
[#279 ']']: r#174
[#279 '{']: r#174
[#279 '||']: r#174
[#280 '&&']: r#175
[#280 ')']: r#175
[#280 ',']: r#175
[#280 ':']: r#175
[#280 ';']: r#175
[#280 ']']: r#175
[#280 '{']: r#175
[#280 '||']: r#175
[#281 '&&']: r#176
[#281 ')']: r#176
[#281 ',']: r#176
[#281 ':']: r#176
[#281 ';']: r#176
[#281 ']']: r#176
[#281 '{']: r#176
[#281 '||']: r#176
[#282 '&']: r#178
[#282 ')']: r#177
[#282 ',']: r#177
[#282 ':']: r#177
[#282 ';']: r#177
[#282 '>']: r#177
[#282 ']']: r#177
[#282 '{']: r#177
[#283 ')']: r#179
[#283 ',']: r#179
[#283 ':']: r#179
[#283 ';']: r#179
[#283 '>']: r#179
[#283 ']']: r#179
[#283 '{']: r#179
[#283 '|']: r#180
[#284 ')']: r#181
[#284 ',']: r#181
[#284 ':']: r#181
[#284 ';']: r#181
[#284 '>']: r#181
[#284 ']']: r#181
[#284 '^']: r#182
[#284 '{']: r#181
[#285 '!=']: r#183
[#285 '%']: s#212
[#285 '&&']: r#183
[#285 ')']: r#183
[#285 '*']: s#72
[#285 '+']: r#183
[#285 ',']: r#183
[#285 '-']: r#183
[#285 '/']: s#211
[#285 ':']: r#183
[#285 ';']: r#183
[#285 '<']: r#183
[#285 '<=']: r#183
[#285 '==']: r#183
[#285 '>']: r#183
[#285 '>=']: r#183
[#285 ']']: r#183
[#285 '{']: r#183
[#285 '||']: r#183
[#286 '!=']: r#31
[#286 '%']: r#31
[#286 '&&']: r#31
[#286 ')']: r#31
[#286 '*']: r#31
[#286 '+']: r#31
[#286 ',']: r#31
[#286 '-']: r#31
[#286 '/']: r#31
[#286 ':']: r#31
[#286 ';']: r#31
[#286 '<']: r#31
[#286 '<=']: r#31
[#286 '==']: r#31
[#286 '>']: r#31
[#286 '>=']: r#31
[#286 ']']: r#31
[#286 '{']: r#31
[#286 '||']: r#31
[#287 '!=']: r#184
[#287 '%']: s#212
[#287 '&&']: r#184
[#287 ')']: r#184
[#287 '*']: s#72
[#287 '+']: r#184
[#287 ',']: r#184
[#287 '-']: r#184
[#287 '/']: s#211
[#287 ':']: r#184
[#287 ';']: r#184
[#287 '<']: r#184
[#287 '<=']: r#184
[#287 '==']: r#184
[#287 '>']: r#184
[#287 '>=']: r#184
[#287 ']']: r#184
[#287 '{']: r#184
[#287 '||']: r#184
[#288 '!=']: r#185
[#288 '&&']: r#185
[#288 ')']: r#185
[#288 ',']: r#185
[#288 ':']: r#185
[#288 ';']: r#185
[#288 '<']: r#185
[#288 '<=']: r#185
[#288 '==']: r#185
[#288 '>']: r#185
[#288 '>=']: r#185
[#288 ']']: r#185
[#288 '{']: r#185
[#288 '||']: r#185
[#289 '!=']: r#186
[#289 '&&']: r#186
[#289 ')']: r#186
[#289 ',']: r#186
[#289 ':']: r#186
[#289 ';']: r#186
[#289 '<']: r#186
[#289 '<=']: r#186
[#289 '==']: r#186
[#289 '>']: r#186
[#289 '>=']: r#186
[#289 ']']: r#186
[#289 '{']: r#186
[#289 '||']: r#186
[#290 '!=']: r#187
[#290 '%']: r#187
[#290 '&&']: r#187
[#290 ')']: r#187
[#290 '*']: r#187
[#290 '+']: r#187
[#290 ',']: r#187
[#290 '-']: r#187
[#290 '/']: r#187
[#290 ':']: r#187
[#290 ';']: r#187
[#290 '<']: r#187
[#290 '<=']: r#187
[#290 '==']: r#187
[#290 '>']: r#187
[#290 '>=']: r#187
[#290 ']']: r#187
[#290 '{']: r#187
[#290 '||']: r#187
[#291 '!=']: r#188
[#291 '%']: r#188
[#291 '&&']: r#188
[#291 ')']: r#188
[#291 '*']: r#188
[#291 '+']: r#188
[#291 ',']: r#188
[#291 '-']: r#188
[#291 '/']: r#188
[#291 ':']: r#188
[#291 ';']: r#188
[#291 '<']: r#188
[#291 '<=']: r#188
[#291 '==']: r#188
[#291 '>']: r#188
[#291 '>=']: r#188
[#291 ']']: r#188
[#291 '{']: r#188
[#291 '||']: r#188
[#292 '!=']: r#189
[#292 '%']: r#189
[#292 '&&']: r#189
[#292 ')']: r#189
[#292 '*']: r#189
[#292 '+']: r#189
[#292 ',']: r#189
[#292 '-']: r#189
[#292 '/']: r#189
[#292 ':']: r#189
[#292 ';']: r#189
[#292 '<']: r#189
[#292 '<=']: r#189
[#292 '==']: r#189
[#292 '>']: r#189
[#292 '>=']: r#189
[#292 ']']: r#189
[#292 '{']: r#189
[#292 '||']: r#189
[#293 '.']: s#202
[#293 '[']: s#201
[#294 '.']: s#202
[#294 '[']: s#201
[#295 '!=']: r#190
[#295 '%']: r#190
[#295 '%=']: r#190
[#295 '&&']: r#190
[#295 '&']: r#190
[#295 '&=']: r#190
[#295 ')']: r#190
[#295 '*']: r#190
[#295 '*=']: r#190
[#295 '+']: r#190
[#295 '++']: r#190
[#295 '+=']: r#190
[#295 ',']: r#190
[#295 '-']: r#190
[#295 '--']: r#190
[#295 '-=']: r#190
[#295 '.']: r#190
[#295 '/']: r#190
[#295 '/=']: r#190
[#295 ':']: r#190
[#295 ';']: r#190
[#295 '<']: r#190
[#295 '<<']: r#190
[#295 '<<=']: r#190
[#295 '<=']: r#190
[#295 '=']: r#190
[#295 '==']: r#190
[#295 '>']: r#190
[#295 '>=']: r#190
[#295 '>>']: r#190
[#295 '>>=']: r#190
[#295 '[']: r#190
[#295 ']']: r#190
[#295 '^']: r#190
[#295 '^=']: r#190
[#295 '{']: r#190
[#295 '|']: r#190
[#295 '|=']: r#190
[#295 '||']: r#190
[#296 '!=']: r#191
[#296 '%']: r#191
[#296 '%=']: r#191
[#296 '&&']: r#191
[#296 '&']: r#191
[#296 '&=']: r#191
[#296 ')']: r#191
[#296 '*']: r#191
[#296 '*=']: r#191
[#296 '+']: r#191
[#296 '++']: r#191
[#296 '+=']: r#191
[#296 ',']: r#191
[#296 '-']: r#191
[#296 '--']: r#191
[#296 '-=']: r#191
[#296 '.']: r#191
[#296 '/']: r#191
[#296 '/=']: r#191
[#296 ':']: r#191
[#296 ';']: r#191
[#296 '<']: r#191
[#296 '<<']: r#191
[#296 '<<=']: r#191
[#296 '<=']: r#191
[#296 '=']: r#191
[#296 '==']: r#191
[#296 '>']: r#191
[#296 '>=']: r#191
[#296 '>>']: r#191
[#296 '>>=']: r#191
[#296 '[']: r#191
[#296 ']']: r#191
[#296 '^']: r#191
[#296 '^=']: r#191
[#296 '{']: r#191
[#296 '|']: r#191
[#296 '|=']: r#191
[#296 '||']: r#191
[#297 '!=']: r#192
[#297 '%']: r#192
[#297 '%=']: r#192
[#297 '&&']: r#192
[#297 '&']: r#192
[#297 '&=']: r#192
[#297 ')']: r#192
[#297 '*']: r#192
[#297 '*=']: r#192
[#297 '+']: r#192
[#297 '++']: r#192
[#297 '+=']: r#192
[#297 ',']: r#192
[#297 '-']: r#192
[#297 '--']: r#192
[#297 '-=']: r#192
[#297 '.']: r#192
[#297 '/']: r#192
[#297 '/=']: r#192
[#297 ':']: r#192
[#297 ';']: r#192
[#297 '<']: r#192
[#297 '<<']: r#192
[#297 '<<=']: r#192
[#297 '<=']: r#192
[#297 '=']: r#192
[#297 '==']: r#192
[#297 '>']: r#192
[#297 '>=']: r#192
[#297 '>>']: r#192
[#297 '>>=']: r#192
[#297 '[']: r#192
[#297 ']']: r#192
[#297 '^']: r#192
[#297 '^=']: r#192
[#297 '{']: r#192
[#297 '|']: r#192
[#297 '|=']: r#192
[#297 '||']: r#192
[#298 '!=']: r#193
[#298 '%']: r#193
[#298 '%=']: r#193
[#298 '&&']: r#193
[#298 '&']: r#193
[#298 '&=']: r#193
[#298 ')']: r#193
[#298 '*']: r#193
[#298 '*=']: r#193
[#298 '+']: r#193
[#298 '++']: r#193
[#298 '+=']: r#193
[#298 ',']: r#193
[#298 '-']: r#193
[#298 '--']: r#193
[#298 '-=']: r#193
[#298 '.']: r#193
[#298 '/']: r#193
[#298 '/=']: r#193
[#298 ':']: r#193
[#298 ';']: r#193
[#298 '<']: r#193
[#298 '<<']: r#193
[#298 '<<=']: r#193
[#298 '<=']: r#193
[#298 '=']: r#193
[#298 '==']: r#193
[#298 '>']: r#193
[#298 '>=']: r#193
[#298 '>>']: r#193
[#298 '>>=']: r#193
[#298 '[']: r#193
[#298 ']']: r#193
[#298 '^']: r#193
[#298 '^=']: r#193
[#298 '{']: r#193
[#298 '|']: r#193
[#298 '|=']: r#193
[#298 '||']: r#193
[#299 '!=']: r#194
[#299 '%']: r#194
[#299 '%=']: r#194
[#299 '&&']: r#194
[#299 '&']: r#194
[#299 '&=']: r#194
[#299 ')']: r#194
[#299 '*']: r#194
[#299 '*=']: r#194
[#299 '+']: r#194
[#299 '++']: r#194
[#299 '+=']: r#194
[#299 ',']: r#194
[#299 '-']: r#194
[#299 '--']: r#194
[#299 '-=']: r#194
[#299 '.']: r#194
[#299 '/']: r#194
[#299 '/=']: r#194
[#299 ':']: r#194
[#299 ';']: r#194
[#299 '<']: r#194
[#299 '<<']: r#194
[#299 '<<=']: r#194
[#299 '<=']: r#194
[#299 '=']: r#194
[#299 '==']: r#194
[#299 '>']: r#194
[#299 '>=']: r#194
[#299 '>>']: r#194
[#299 '>>=']: r#194
[#299 '[']: r#194
[#299 ']']: r#194
[#299 '^']: r#194
[#299 '^=']: r#194
[#299 '{']: r#194
[#299 '|']: r#194
[#299 '|=']: r#194
[#299 '||']: r#194
[#300 '!=']: r#195
[#300 '%']: r#195
[#300 '%=']: r#195
[#300 '&&']: r#195
[#300 '&']: r#195
[#300 '&=']: r#195
[#300 ')']: r#195
[#300 '*']: r#195
[#300 '*=']: r#195
[#300 '+']: r#195
[#300 '++']: r#195
[#300 '+=']: r#195
[#300 ',']: r#195
[#300 '-']: r#195
[#300 '--']: r#195
[#300 '-=']: r#195
[#300 '.']: r#195
[#300 '/']: r#195
[#300 '/=']: r#195
[#300 ':']: r#195
[#300 ';']: r#195
[#300 '<']: r#195
[#300 '<<']: r#195
[#300 '<<=']: r#195
[#300 '<=']: r#195
[#300 '=']: r#195
[#300 '==']: r#195
[#300 '>']: r#195
[#300 '>=']: r#195
[#300 '>>']: r#195
[#300 '>>=']: r#195
[#300 '[']: r#195
[#300 ']']: r#195
[#300 '^']: r#195
[#300 '^=']: r#195
[#300 '{']: r#195
[#300 '|']: r#195
[#300 '|=']: r#195
[#300 '||']: r#195
[#301 '!=']: r#196
[#301 '%']: r#196
[#301 '%=']: r#196
[#301 '&&']: r#196
[#301 '&']: r#196
[#301 '&=']: r#196
[#301 ')']: r#196
[#301 '*']: r#196
[#301 '*=']: r#196
[#301 '+']: r#196
[#301 '++']: r#196
[#301 '+=']: r#196
[#301 ',']: r#196
[#301 '-']: r#196
[#301 '--']: r#196
[#301 '-=']: r#196
[#301 '.']: r#196
[#301 '/']: r#196
[#301 '/=']: r#196
[#301 ':']: r#196
[#301 ';']: r#196
[#301 '<']: r#196
[#301 '<<']: r#196
[#301 '<<=']: r#196
[#301 '<=']: r#196
[#301 '=']: r#196
[#301 '==']: r#196
[#301 '>']: r#196
[#301 '>=']: r#196
[#301 '>>']: r#196
[#301 '>>=']: r#196
[#301 '[']: r#196
[#301 ']']: r#196
[#301 '^']: r#196
[#301 '^=']: r#196
[#301 '{']: r#196
[#301 '|']: r#196
[#301 '|=']: r#196
[#301 '||']: r#196
[#302 '!=']: r#197
[#302 '%']: r#197
[#302 '%=']: r#197
[#302 '&&']: r#197
[#302 '&']: r#197
[#302 '&=']: r#197
[#302 ')']: r#197
[#302 '*']: r#197
[#302 '*=']: r#197
[#302 '+']: r#197
[#302 '++']: r#197
[#302 '+=']: r#197
[#302 ',']: r#197
[#302 '-']: r#197
[#302 '--']: r#197
[#302 '-=']: r#197
[#302 '.']: r#197
[#302 '/']: r#197
[#302 '/=']: r#197
[#302 ':']: r#197
[#302 ';']: r#197
[#302 '<']: r#197
[#302 '<<']: r#197
[#302 '<<=']: r#197
[#302 '<=']: r#197
[#302 '=']: r#197
[#302 '==']: r#197
[#302 '>']: r#197
[#302 '>=']: r#197
[#302 '>>']: r#197
[#302 '>>=']: r#197
[#302 '[']: r#197
[#302 ']']: r#197
[#302 '^']: r#197
[#302 '^=']: r#197
[#302 '{']: r#197
[#302 '|']: r#197
[#302 '|=']: r#197
[#302 '||']: r#197
[#303 '!=']: r#198
[#303 '%']: r#198
[#303 '%=']: r#198
[#303 '&&']: r#198
[#303 '&']: r#198
[#303 '&=']: r#198
[#303 ')']: r#198
[#303 '*']: r#198
[#303 '*=']: r#198
[#303 '+']: r#198
[#303 '++']: r#198
[#303 '+=']: r#198
[#303 ',']: r#198
[#303 '-']: r#198
[#303 '--']: r#198
[#303 '-=']: r#198
[#303 '.']: r#198
[#303 '/']: r#198
[#303 '/=']: r#198
[#303 ':']: r#198
[#303 ';']: r#198
[#303 '<']: r#198
[#303 '<<']: r#198
[#303 '<<=']: r#198
[#303 '<=']: r#198
[#303 '=']: r#198
[#303 '==']: r#198
[#303 '>']: r#198
[#303 '>=']: r#198
[#303 '>>']: r#198
[#303 '>>=']: r#198
[#303 '[']: r#198
[#303 ']']: r#198
[#303 '^']: r#198
[#303 '^=']: r#198
[#303 '{']: r#198
[#303 '|']: r#198
[#303 '|=']: r#198
[#303 '||']: r#198
[#304 ']']: s#491
[#305 ')']: s#316
[#306 '!']: s#70
[#306 '&']: s#73
[#306 '(']: s#115
[#306 '*']: s#72
[#306 '-']: s#69
[#306 'array']: s#83
[#306 'bitcast']: s#78
[#306 'bool']: s#88
[#306 'f16']: s#117
[#306 'f32']: s#116
[#306 'false']: s#114
[#306 'i32']: s#118
[#306 'mat2x2']: s#99
[#306 'mat2x3']: s#100
[#306 'mat2x4']: s#101
[#306 'mat3x2']: s#102
[#306 'mat3x3']: s#103
[#306 'mat3x4']: s#104
[#306 'mat4x2']: s#105
[#306 'mat4x3']: s#106
[#306 'mat4x4']: s#107
[#306 'ptr']: s#120
[#306 'sampler']: s#134
[#306 'sampler_comparison']: s#135
[#306 'texture_1d']: s#141
[#306 'texture_2d']: s#142
[#306 'texture_2d_array']: s#143
[#306 'texture_3d']: s#144
[#306 'texture_cube']: s#145
[#306 'texture_cube_array']: s#146
[#306 'texture_depth_2d']: s#136
[#306 'texture_depth_2d_array']: s#137
[#306 'texture_depth_cube']: s#138
[#306 'texture_depth_cube_array']: s#139
[#306 'texture_depth_multisampled_2d']: s#140
[#306 'texture_multisampled_2d']: s#147
[#306 'texture_storage_1d']: s#148
[#306 'texture_storage_2d']: s#149
[#306 'texture_storage_2d_array']: s#150
[#306 'texture_storage_3d']: s#151
[#306 'true']: s#113
[#306 'u32']: s#119
[#306 'vec2']: s#96
[#306 'vec3']: s#97
[#306 'vec4']: s#98
[#306 '~']: s#71
[#306 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#306 /0[fh]/]: s#129
[#306 /0[iu]?/]: s#109
[#306 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#306 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#306 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#306 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#306 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#306 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#306 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#306 /[1-9][0-9]*[fh]/]: s#130
[#306 /[1-9][0-9]*[iu]?/]: s#110
[#307 '!']: r#199
[#307 '&']: r#199
[#307 '(']: r#199
[#307 '*']: r#199
[#307 '-']: r#199
[#307 'array']: r#199
[#307 'bitcast']: r#199
[#307 'bool']: r#199
[#307 'f16']: r#199
[#307 'f32']: r#199
[#307 'false']: r#199
[#307 'i32']: r#199
[#307 'mat2x2']: r#199
[#307 'mat2x3']: r#199
[#307 'mat2x4']: r#199
[#307 'mat3x2']: r#199
[#307 'mat3x3']: r#199
[#307 'mat3x4']: r#199
[#307 'mat4x2']: r#199
[#307 'mat4x3']: r#199
[#307 'mat4x4']: r#199
[#307 'ptr']: r#199
[#307 'sampler']: r#199
[#307 'sampler_comparison']: r#199
[#307 'texture_1d']: r#199
[#307 'texture_2d']: r#199
[#307 'texture_2d_array']: r#199
[#307 'texture_3d']: r#199
[#307 'texture_cube']: r#199
[#307 'texture_cube_array']: r#199
[#307 'texture_depth_2d']: r#199
[#307 'texture_depth_2d_array']: r#199
[#307 'texture_depth_cube']: r#199
[#307 'texture_depth_cube_array']: r#199
[#307 'texture_depth_multisampled_2d']: r#199
[#307 'texture_multisampled_2d']: r#199
[#307 'texture_storage_1d']: r#199
[#307 'texture_storage_2d']: r#199
[#307 'texture_storage_2d_array']: r#199
[#307 'texture_storage_3d']: r#199
[#307 'true']: r#199
[#307 'u32']: r#199
[#307 'vec2']: r#199
[#307 'vec3']: r#199
[#307 'vec4']: r#199
[#307 '~']: r#199
[#308 '!']: s#70
[#308 '&']: s#73
[#308 '(']: s#115
[#308 '*']: s#72
[#308 '-']: s#69
[#308 'array']: s#83
[#308 'bitcast']: s#78
[#308 'bool']: s#88
[#308 'f16']: s#117
[#308 'f32']: s#116
[#308 'false']: s#114
[#308 'i32']: s#118
[#308 'mat2x2']: s#99
[#308 'mat2x3']: s#100
[#308 'mat2x4']: s#101
[#308 'mat3x2']: s#102
[#308 'mat3x3']: s#103
[#308 'mat3x4']: s#104
[#308 'mat4x2']: s#105
[#308 'mat4x3']: s#106
[#308 'mat4x4']: s#107
[#308 'ptr']: s#120
[#308 'sampler']: s#134
[#308 'sampler_comparison']: s#135
[#308 'texture_1d']: s#141
[#308 'texture_2d']: s#142
[#308 'texture_2d_array']: s#143
[#308 'texture_3d']: s#144
[#308 'texture_cube']: s#145
[#308 'texture_cube_array']: s#146
[#308 'texture_depth_2d']: s#136
[#308 'texture_depth_2d_array']: s#137
[#308 'texture_depth_cube']: s#138
[#308 'texture_depth_cube_array']: s#139
[#308 'texture_depth_multisampled_2d']: s#140
[#308 'texture_multisampled_2d']: s#147
[#308 'texture_storage_1d']: s#148
[#308 'texture_storage_2d']: s#149
[#308 'texture_storage_2d_array']: s#150
[#308 'texture_storage_3d']: s#151
[#308 'true']: s#113
[#308 'u32']: s#119
[#308 'vec2']: s#96
[#308 'vec3']: s#97
[#308 'vec4']: s#98
[#308 '~']: s#71
[#308 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#308 /0[fh]/]: s#129
[#308 /0[iu]?/]: s#109
[#308 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#308 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#308 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#308 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#308 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#308 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#308 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#308 /[1-9][0-9]*[fh]/]: s#130
[#308 /[1-9][0-9]*[iu]?/]: s#110
[#309 ',']: s#401
[#310 '>']: s#231
[#311 ')']: r#200
[#311 ',']: r#200
[#311 ';']: r#200
[#311 '=']: r#200
[#311 '>']: r#200
[#311 '{']: r#200
[#311 '}']: r#200
[#312 ')']: r#201
[#312 ',']: r#201
[#312 ';']: r#201
[#312 '=']: r#201
[#312 '>']: r#201
[#312 '{']: r#201
[#312 '}']: r#201
[#313 '<']: s#171
[#314 ',']: s#401
[#315 '!=']: r#202
[#315 '%']: r#202
[#315 '&&']: r#202
[#315 '&']: r#202
[#315 ')']: r#202
[#315 '*']: r#202
[#315 '+']: r#202
[#315 ',']: r#202
[#315 '-']: r#202
[#315 '.']: r#202
[#315 '/']: r#202
[#315 ':']: r#202
[#315 ';']: r#202
[#315 '<']: r#202
[#315 '<<']: r#202
[#315 '<=']: r#202
[#315 '==']: r#202
[#315 '>']: r#202
[#315 '>=']: r#202
[#315 '>>']: r#202
[#315 '[']: r#202
[#315 ']']: r#202
[#315 '^']: r#202
[#315 '{']: r#202
[#315 '|']: r#202
[#315 '||']: r#202
[#316 '!=']: r#203
[#316 '%']: r#203
[#316 '%=']: r#203
[#316 '&&']: r#203
[#316 '&']: r#203
[#316 '&=']: r#203
[#316 ')']: r#203
[#316 '*']: r#203
[#316 '*=']: r#203
[#316 '+']: r#203
[#316 '++']: r#203
[#316 '+=']: r#203
[#316 ',']: r#203
[#316 '-']: r#203
[#316 '--']: r#203
[#316 '-=']: r#203
[#316 '->']: r#203
[#316 '.']: r#203
[#316 '/']: r#203
[#316 '/=']: r#203
[#316 ':']: r#203
[#316 ';']: r#203
[#316 '<']: r#203
[#316 '<<']: r#203
[#316 '<<=']: r#203
[#316 '<=']: r#203
[#316 '=']: r#203
[#316 '==']: r#203
[#316 '>']: r#203
[#316 '>=']: r#203
[#316 '>>']: r#203
[#316 '>>=']: r#203
[#316 '@']: r#203
[#316 '[']: r#203
[#316 ']']: r#203
[#316 '^']: r#203
[#316 '^=']: r#203
[#316 'array']: r#203
[#316 'bool']: r#203
[#316 'f16']: r#203
[#316 'f32']: r#203
[#316 'fn']: r#203
[#316 'i32']: r#203
[#316 'override']: r#203
[#316 'ptr']: r#203
[#316 'sampler']: r#203
[#316 'sampler_comparison']: r#203
[#316 'texture_1d']: r#203
[#316 'texture_2d']: r#203
[#316 'texture_2d_array']: r#203
[#316 'texture_3d']: r#203
[#316 'texture_cube']: r#203
[#316 'texture_cube_array']: r#203
[#316 'texture_depth_2d']: r#203
[#316 'texture_depth_2d_array']: r#203
[#316 'texture_depth_cube']: r#203
[#316 'texture_depth_cube_array']: r#203
[#316 'texture_depth_multisampled_2d']: r#203
[#316 'texture_multisampled_2d']: r#203
[#316 'texture_storage_1d']: r#203
[#316 'texture_storage_2d']: r#203
[#316 'texture_storage_2d_array']: r#203
[#316 'texture_storage_3d']: r#203
[#316 'u32']: r#203
[#316 'var']: r#203
[#316 '{']: r#203
[#316 '|']: r#203
[#316 '|=']: r#203
[#316 '||']: r#203
[#316 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#203
[#317 ',']: s#401
[#318 ',']: r#204
[#318 '>']: r#204
[#319 ',']: r#205
[#319 '>']: r#205
[#320 ',']: r#206
[#320 '>']: r#206
[#321 ',']: r#207
[#321 '>']: r#207
[#322 ',']: r#208
[#322 '>']: r#208
[#323 '>']: s#231
[#324 '>']: s#231
[#325 ',']: s#401
[#326 ',']: r#209
[#327 ',']: r#210
[#328 ',']: r#211
[#329 ',']: r#212
[#330 ',']: r#213
[#331 ',']: r#214
[#332 ',']: r#215
[#333 ',']: r#216
[#334 ',']: r#217
[#335 ',']: r#218
[#336 ',']: r#219
[#337 ',']: r#220
[#338 ',']: r#221
[#339 ',']: r#222
[#340 ',']: r#223
[#341 ',']: r#224
[#342 '}']: s#478
[#343 '}']: r#225
[#344 '&']: s#73
[#344 '*']: s#72
[#344 ';']: s#19
[#344 'break']: s#372
[#344 'const']: s#371
[#344 'continue']: s#373
[#344 'discard']: s#356
[#344 'for']: s#366
[#344 'if']: s#375
[#344 'let']: s#370
[#344 'loop']: s#365
[#344 'return']: s#362
[#344 'static_assert']: s#26
[#344 'switch']: s#364
[#344 'var']: s#161
[#344 'while']: s#367
[#344 '{']: s#184
[#344 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#345 '&']: r#226
[#345 '(']: r#226
[#345 '*']: r#226
[#345 ';']: r#226
[#345 'break']: r#226
[#345 'const']: r#226
[#345 'continue']: r#226
[#345 'continuing']: r#226
[#345 'discard']: r#226
[#345 'fallthrough']: r#226
[#345 'for']: r#226
[#345 'if']: r#226
[#345 'let']: r#226
[#345 'loop']: r#226
[#345 'return']: r#226
[#345 'static_assert']: r#226
[#345 'switch']: r#226
[#345 'var']: r#226
[#345 'while']: r#226
[#345 '{']: r#226
[#345 '}']: r#226
[#345 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#226
[#346 ';']: s#19
[#347 '&']: r#227
[#347 '(']: r#227
[#347 '*']: r#227
[#347 ';']: r#227
[#347 'break']: r#227
[#347 'const']: r#227
[#347 'continue']: r#227
[#347 'continuing']: r#227
[#347 'discard']: r#227
[#347 'fallthrough']: r#227
[#347 'for']: r#227
[#347 'if']: r#227
[#347 'let']: r#227
[#347 'loop']: r#227
[#347 'return']: r#227
[#347 'static_assert']: r#227
[#347 'switch']: r#227
[#347 'var']: r#227
[#347 'while']: r#227
[#347 '{']: r#227
[#347 '}']: r#227
[#347 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#227
[#348 '&']: r#228
[#348 '(']: r#228
[#348 '*']: r#228
[#348 ';']: r#228
[#348 'break']: r#228
[#348 'const']: r#228
[#348 'continue']: r#228
[#348 'continuing']: r#228
[#348 'discard']: r#228
[#348 'fallthrough']: r#228
[#348 'for']: r#228
[#348 'if']: r#228
[#348 'let']: r#228
[#348 'loop']: r#228
[#348 'return']: r#228
[#348 'static_assert']: r#228
[#348 'switch']: r#228
[#348 'var']: r#228
[#348 'while']: r#228
[#348 '{']: r#228
[#348 '}']: r#228
[#348 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#228
[#349 '&']: r#229
[#349 '(']: r#229
[#349 '*']: r#229
[#349 ';']: r#229
[#349 'break']: r#229
[#349 'const']: r#229
[#349 'continue']: r#229
[#349 'continuing']: r#229
[#349 'discard']: r#229
[#349 'fallthrough']: r#229
[#349 'for']: r#229
[#349 'if']: r#229
[#349 'let']: r#229
[#349 'loop']: r#229
[#349 'return']: r#229
[#349 'static_assert']: r#229
[#349 'switch']: r#229
[#349 'var']: r#229
[#349 'while']: r#229
[#349 '{']: r#229
[#349 '}']: r#229
[#349 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#229
[#350 '&']: r#230
[#350 '(']: r#230
[#350 '*']: r#230
[#350 ';']: r#230
[#350 'break']: r#230
[#350 'const']: r#230
[#350 'continue']: r#230
[#350 'continuing']: r#230
[#350 'discard']: r#230
[#350 'fallthrough']: r#230
[#350 'for']: r#230
[#350 'if']: r#230
[#350 'let']: r#230
[#350 'loop']: r#230
[#350 'return']: r#230
[#350 'static_assert']: r#230
[#350 'switch']: r#230
[#350 'var']: r#230
[#350 'while']: r#230
[#350 '{']: r#230
[#350 '}']: r#230
[#350 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#230
[#351 '&']: r#231
[#351 '(']: r#231
[#351 '*']: r#231
[#351 ';']: r#231
[#351 'break']: r#231
[#351 'const']: r#231
[#351 'continue']: r#231
[#351 'continuing']: r#231
[#351 'discard']: r#231
[#351 'fallthrough']: r#231
[#351 'for']: r#231
[#351 'if']: r#231
[#351 'let']: r#231
[#351 'loop']: r#231
[#351 'return']: r#231
[#351 'static_assert']: r#231
[#351 'switch']: r#231
[#351 'var']: r#231
[#351 'while']: r#231
[#351 '{']: r#231
[#351 '}']: r#231
[#351 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#231
[#352 ';']: s#19
[#353 ';']: s#19
[#354 ';']: s#19
[#355 ';']: s#19
[#356 ';']: s#19
[#357 ';']: s#19
[#358 '&']: r#232
[#358 '(']: r#232
[#358 '*']: r#232
[#358 ';']: r#232
[#358 'break']: r#232
[#358 'const']: r#232
[#358 'continue']: r#232
[#358 'continuing']: r#232
[#358 'discard']: r#232
[#358 'fallthrough']: r#232
[#358 'for']: r#232
[#358 'if']: r#232
[#358 'let']: r#232
[#358 'loop']: r#232
[#358 'return']: r#232
[#358 'static_assert']: r#232
[#358 'switch']: r#232
[#358 'var']: r#232
[#358 'while']: r#232
[#358 '{']: r#232
[#358 '}']: r#232
[#358 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#232
[#359 ';']: s#19
[#360 ';']: s#19
[#361 ';']: s#19
[#362 '!']: s#70
[#362 '&']: s#73
[#362 '(']: s#115
[#362 '*']: s#72
[#362 '-']: s#69
[#362 'array']: s#83
[#362 'bitcast']: s#78
[#362 'bool']: s#88
[#362 'f16']: s#117
[#362 'f32']: s#116
[#362 'false']: s#114
[#362 'i32']: s#118
[#362 'mat2x2']: s#99
[#362 'mat2x3']: s#100
[#362 'mat2x4']: s#101
[#362 'mat3x2']: s#102
[#362 'mat3x3']: s#103
[#362 'mat3x4']: s#104
[#362 'mat4x2']: s#105
[#362 'mat4x3']: s#106
[#362 'mat4x4']: s#107
[#362 'ptr']: s#120
[#362 'sampler']: s#134
[#362 'sampler_comparison']: s#135
[#362 'texture_1d']: s#141
[#362 'texture_2d']: s#142
[#362 'texture_2d_array']: s#143
[#362 'texture_3d']: s#144
[#362 'texture_cube']: s#145
[#362 'texture_cube_array']: s#146
[#362 'texture_depth_2d']: s#136
[#362 'texture_depth_2d_array']: s#137
[#362 'texture_depth_cube']: s#138
[#362 'texture_depth_cube_array']: s#139
[#362 'texture_depth_multisampled_2d']: s#140
[#362 'texture_multisampled_2d']: s#147
[#362 'texture_storage_1d']: s#148
[#362 'texture_storage_2d']: s#149
[#362 'texture_storage_2d_array']: s#150
[#362 'texture_storage_3d']: s#151
[#362 'true']: s#113
[#362 'u32']: s#119
[#362 'vec2']: s#96
[#362 'vec3']: s#97
[#362 'vec4']: s#98
[#362 '~']: s#71
[#362 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#362 /0[fh]/]: s#129
[#362 /0[iu]?/]: s#109
[#362 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#362 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#362 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#362 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#362 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#362 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#362 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#362 /[1-9][0-9]*[fh]/]: s#130
[#362 /[1-9][0-9]*[iu]?/]: s#110
[#363 'else']: s#463
[#364 '!']: s#70
[#364 '&']: s#73
[#364 '(']: s#115
[#364 '*']: s#72
[#364 '-']: s#69
[#364 'array']: s#83
[#364 'bitcast']: s#78
[#364 'bool']: s#88
[#364 'f16']: s#117
[#364 'f32']: s#116
[#364 'false']: s#114
[#364 'i32']: s#118
[#364 'mat2x2']: s#99
[#364 'mat2x3']: s#100
[#364 'mat2x4']: s#101
[#364 'mat3x2']: s#102
[#364 'mat3x3']: s#103
[#364 'mat3x4']: s#104
[#364 'mat4x2']: s#105
[#364 'mat4x3']: s#106
[#364 'mat4x4']: s#107
[#364 'ptr']: s#120
[#364 'sampler']: s#134
[#364 'sampler_comparison']: s#135
[#364 'texture_1d']: s#141
[#364 'texture_2d']: s#142
[#364 'texture_2d_array']: s#143
[#364 'texture_3d']: s#144
[#364 'texture_cube']: s#145
[#364 'texture_cube_array']: s#146
[#364 'texture_depth_2d']: s#136
[#364 'texture_depth_2d_array']: s#137
[#364 'texture_depth_cube']: s#138
[#364 'texture_depth_cube_array']: s#139
[#364 'texture_depth_multisampled_2d']: s#140
[#364 'texture_multisampled_2d']: s#147
[#364 'texture_storage_1d']: s#148
[#364 'texture_storage_2d']: s#149
[#364 'texture_storage_2d_array']: s#150
[#364 'texture_storage_3d']: s#151
[#364 'true']: s#113
[#364 'u32']: s#119
[#364 'vec2']: s#96
[#364 'vec3']: s#97
[#364 'vec4']: s#98
[#364 '~']: s#71
[#364 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#364 /0[fh]/]: s#129
[#364 /0[iu]?/]: s#109
[#364 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#364 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#364 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#364 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#364 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#364 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#364 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#364 /[1-9][0-9]*[fh]/]: s#130
[#364 /[1-9][0-9]*[iu]?/]: s#110
[#365 '{']: s#184
[#366 '(']: s#115
[#367 '!']: s#70
[#367 '&']: s#73
[#367 '(']: s#115
[#367 '*']: s#72
[#367 '-']: s#69
[#367 'array']: s#83
[#367 'bitcast']: s#78
[#367 'bool']: s#88
[#367 'f16']: s#117
[#367 'f32']: s#116
[#367 'false']: s#114
[#367 'i32']: s#118
[#367 'mat2x2']: s#99
[#367 'mat2x3']: s#100
[#367 'mat2x4']: s#101
[#367 'mat3x2']: s#102
[#367 'mat3x3']: s#103
[#367 'mat3x4']: s#104
[#367 'mat4x2']: s#105
[#367 'mat4x3']: s#106
[#367 'mat4x4']: s#107
[#367 'ptr']: s#120
[#367 'sampler']: s#134
[#367 'sampler_comparison']: s#135
[#367 'texture_1d']: s#141
[#367 'texture_2d']: s#142
[#367 'texture_2d_array']: s#143
[#367 'texture_3d']: s#144
[#367 'texture_cube']: s#145
[#367 'texture_cube_array']: s#146
[#367 'texture_depth_2d']: s#136
[#367 'texture_depth_2d_array']: s#137
[#367 'texture_depth_cube']: s#138
[#367 'texture_depth_cube_array']: s#139
[#367 'texture_depth_multisampled_2d']: s#140
[#367 'texture_multisampled_2d']: s#147
[#367 'texture_storage_1d']: s#148
[#367 'texture_storage_2d']: s#149
[#367 'texture_storage_2d_array']: s#150
[#367 'texture_storage_3d']: s#151
[#367 'true']: s#113
[#367 'u32']: s#119
[#367 'vec2']: s#96
[#367 'vec3']: s#97
[#367 'vec4']: s#98
[#367 '~']: s#71
[#367 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#367 /0[fh]/]: s#129
[#367 /0[iu]?/]: s#109
[#367 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#367 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#367 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#367 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#367 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#367 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#367 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#367 /[1-9][0-9]*[fh]/]: s#130
[#367 /[1-9][0-9]*[iu]?/]: s#110
[#368 '(']: s#115
[#369 ';']: r#233
[#370 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#371 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#372 ';']: r#234
[#373 ';']: r#235
[#374 '%=']: s#443
[#374 '&=']: s#444
[#374 '*=']: s#441
[#374 '++']: s#427
[#374 '+=']: s#439
[#374 '--']: s#428
[#374 '-=']: s#440
[#374 '/=']: s#442
[#374 '<<=']: s#448
[#374 '=']: s#174
[#374 '>>=']: s#447
[#374 '^=']: s#446
[#374 '|=']: s#445
[#375 '!']: s#70
[#375 '&']: s#73
[#375 '(']: s#115
[#375 '*']: s#72
[#375 '-']: s#69
[#375 'array']: s#83
[#375 'bitcast']: s#78
[#375 'bool']: s#88
[#375 'f16']: s#117
[#375 'f32']: s#116
[#375 'false']: s#114
[#375 'i32']: s#118
[#375 'mat2x2']: s#99
[#375 'mat2x3']: s#100
[#375 'mat2x4']: s#101
[#375 'mat3x2']: s#102
[#375 'mat3x3']: s#103
[#375 'mat3x4']: s#104
[#375 'mat4x2']: s#105
[#375 'mat4x3']: s#106
[#375 'mat4x4']: s#107
[#375 'ptr']: s#120
[#375 'sampler']: s#134
[#375 'sampler_comparison']: s#135
[#375 'texture_1d']: s#141
[#375 'texture_2d']: s#142
[#375 'texture_2d_array']: s#143
[#375 'texture_3d']: s#144
[#375 'texture_cube']: s#145
[#375 'texture_cube_array']: s#146
[#375 'texture_depth_2d']: s#136
[#375 'texture_depth_2d_array']: s#137
[#375 'texture_depth_cube']: s#138
[#375 'texture_depth_cube_array']: s#139
[#375 'texture_depth_multisampled_2d']: s#140
[#375 'texture_multisampled_2d']: s#147
[#375 'texture_storage_1d']: s#148
[#375 'texture_storage_2d']: s#149
[#375 'texture_storage_2d_array']: s#150
[#375 'texture_storage_3d']: s#151
[#375 'true']: s#113
[#375 'u32']: s#119
[#375 'vec2']: s#96
[#375 'vec3']: s#97
[#375 'vec4']: s#98
[#375 '~']: s#71
[#375 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#375 /0[fh]/]: s#129
[#375 /0[iu]?/]: s#109
[#375 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#375 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#375 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#375 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#375 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#375 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#375 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#375 /[1-9][0-9]*[fh]/]: s#130
[#375 /[1-9][0-9]*[iu]?/]: s#110
[#376 '(']: s#115
[#376 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#377 '(']: r#236
[#378 '&']: s#73
[#378 '*']: s#72
[#379 '&']: r#237
[#379 '(']: r#237
[#379 '*']: r#237
[#380 '&']: r#238
[#380 '(']: r#238
[#380 '*']: r#238
[#381 '@']: s#32
[#382 '@']: s#32
[#383 '@']: r#239
[#383 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#239
[#384 '@']: s#32
[#385 ',']: s#401
[#386 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#295
[#388 '@']: s#32
[#389 ';']: r#240
[#390 ';']: r#241
[#391 '!']: s#70
[#391 '&']: s#73
[#391 '(']: s#115
[#391 '*']: s#72
[#391 '-']: s#69
[#391 'array']: s#83
[#391 'bitcast']: s#78
[#391 'bool']: s#88
[#391 'f16']: s#117
[#391 'f32']: s#116
[#391 'false']: s#114
[#391 'i32']: s#118
[#391 'mat2x2']: s#99
[#391 'mat2x3']: s#100
[#391 'mat2x4']: s#101
[#391 'mat3x2']: s#102
[#391 'mat3x3']: s#103
[#391 'mat3x4']: s#104
[#391 'mat4x2']: s#105
[#391 'mat4x3']: s#106
[#391 'mat4x4']: s#107
[#391 'ptr']: s#120
[#391 'sampler']: s#134
[#391 'sampler_comparison']: s#135
[#391 'texture_1d']: s#141
[#391 'texture_2d']: s#142
[#391 'texture_2d_array']: s#143
[#391 'texture_3d']: s#144
[#391 'texture_cube']: s#145
[#391 'texture_cube_array']: s#146
[#391 'texture_depth_2d']: s#136
[#391 'texture_depth_2d_array']: s#137
[#391 'texture_depth_cube']: s#138
[#391 'texture_depth_cube_array']: s#139
[#391 'texture_depth_multisampled_2d']: s#140
[#391 'texture_multisampled_2d']: s#147
[#391 'texture_storage_1d']: s#148
[#391 'texture_storage_2d']: s#149
[#391 'texture_storage_2d_array']: s#150
[#391 'texture_storage_3d']: s#151
[#391 'true']: s#113
[#391 'u32']: s#119
[#391 'vec2']: s#96
[#391 'vec3']: s#97
[#391 'vec4']: s#98
[#391 '~']: s#71
[#391 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#391 /0[fh]/]: s#129
[#391 /0[iu]?/]: s#109
[#391 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#391 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#391 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#391 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#391 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#391 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#391 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#391 /[1-9][0-9]*[fh]/]: s#130
[#391 /[1-9][0-9]*[iu]?/]: s#110
[#392 ';']: r#242
[#393 ')']: r#243
[#393 ',']: r#243
[#393 ';']: r#243
[#393 '=']: r#243
[#394 ';']: r#244
[#395 ',']: s#401
[#396 ';']: r#245
[#396 '=']: r#245
[#397 ':']: s#176
[#397 ';']: r#246
[#397 '=']: r#246
[#398 ';']: r#247
[#398 '=']: r#247
[#399 '>']: s#231
[#400 'read']: s#527
[#400 'read_write']: s#529
[#400 'write']: s#528
[#401 '!']: r#248
[#401 '&']: r#248
[#401 '(']: r#248
[#401 ')']: r#248
[#401 '*']: r#248
[#401 '-']: r#248
[#401 ':']: r#248
[#401 '@']: r#248
[#401 'array']: r#248
[#401 'bitcast']: r#248
[#401 'bool']: r#248
[#401 'f16']: r#248
[#401 'f32']: r#248
[#401 'false']: r#248
[#401 'i32']: r#248
[#401 'mat2x2']: r#248
[#401 'mat2x3']: r#248
[#401 'mat2x4']: r#248
[#401 'mat3x2']: r#248
[#401 'mat3x3']: r#248
[#401 'mat3x4']: r#248
[#401 'mat4x2']: r#248
[#401 'mat4x3']: r#248
[#401 'mat4x4']: r#248
[#401 'ptr']: r#248
[#401 'sampler']: r#248
[#401 'sampler_comparison']: r#248
[#401 'texture_1d']: r#248
[#401 'texture_2d']: r#248
[#401 'texture_2d_array']: r#248
[#401 'texture_3d']: r#248
[#401 'texture_cube']: r#248
[#401 'texture_cube_array']: r#248
[#401 'texture_depth_2d']: r#248
[#401 'texture_depth_2d_array']: r#248
[#401 'texture_depth_cube']: r#248
[#401 'texture_depth_cube_array']: r#248
[#401 'texture_depth_multisampled_2d']: r#248
[#401 'texture_multisampled_2d']: r#248
[#401 'texture_storage_1d']: r#248
[#401 'texture_storage_2d']: r#248
[#401 'texture_storage_2d_array']: r#248
[#401 'texture_storage_3d']: r#248
[#401 'true']: r#248
[#401 'u32']: r#248
[#401 'vec2']: r#248
[#401 'vec3']: r#248
[#401 'vec4']: r#248
[#401 '{']: r#248
[#401 '}']: r#248
[#401 '~']: r#248
[#401 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#248
[#402 ';']: r#249
[#404 ':']: s#176
[#405 '@']: r#250
[#405 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#250
[#406 '@']: r#251
[#406 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#251
[#407 ',']: s#401
[#408 ')']: s#316
[#409 ')']: r#252
[#410 '@']: s#32
[#411 '@']: r#253
[#411 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#253
[#412 '@']: s#32
[#413 ',']: s#401
[#414 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#415 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#254
[#416 '@']: s#32
[#417 '(']: r#255
[#418 '.']: s#202
[#418 '[']: s#201
[#419 '%=']: r#256
[#419 '&=']: r#256
[#419 ')']: r#256
[#419 '*=']: r#256
[#419 '++']: r#256
[#419 '+=']: r#256
[#419 '--']: r#256
[#419 '-=']: r#256
[#419 '.']: r#256
[#419 '/=']: r#256
[#419 '<<=']: r#256
[#419 '=']: r#256
[#419 '>>=']: r#256
[#419 '[']: r#256
[#419 '^=']: r#256
[#419 '|=']: r#256
[#420 '&']: s#73
[#420 '*']: s#72
[#421 '{']: s#184
[#422 '!']: s#70
[#422 '&']: s#73
[#422 '(']: s#115
[#422 '*']: s#72
[#422 '-']: s#69
[#422 'array']: s#83
[#422 'bitcast']: s#78
[#422 'bool']: s#88
[#422 'f16']: s#117
[#422 'f32']: s#116
[#422 'false']: s#114
[#422 'i32']: s#118
[#422 'mat2x2']: s#99
[#422 'mat2x3']: s#100
[#422 'mat2x4']: s#101
[#422 'mat3x2']: s#102
[#422 'mat3x3']: s#103
[#422 'mat3x4']: s#104
[#422 'mat4x2']: s#105
[#422 'mat4x3']: s#106
[#422 'mat4x4']: s#107
[#422 'ptr']: s#120
[#422 'sampler']: s#134
[#422 'sampler_comparison']: s#135
[#422 'texture_1d']: s#141
[#422 'texture_2d']: s#142
[#422 'texture_2d_array']: s#143
[#422 'texture_3d']: s#144
[#422 'texture_cube']: s#145
[#422 'texture_cube_array']: s#146
[#422 'texture_depth_2d']: s#136
[#422 'texture_depth_2d_array']: s#137
[#422 'texture_depth_cube']: s#138
[#422 'texture_depth_cube_array']: s#139
[#422 'texture_depth_multisampled_2d']: s#140
[#422 'texture_multisampled_2d']: s#147
[#422 'texture_storage_1d']: s#148
[#422 'texture_storage_2d']: s#149
[#422 'texture_storage_2d_array']: s#150
[#422 'texture_storage_3d']: s#151
[#422 'true']: s#113
[#422 'u32']: s#119
[#422 'vec2']: s#96
[#422 'vec3']: s#97
[#422 'vec4']: s#98
[#422 '~']: s#71
[#422 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#422 /0[fh]/]: s#129
[#422 /0[iu]?/]: s#109
[#422 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#422 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#422 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#422 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#422 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#422 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#422 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#422 /[1-9][0-9]*[fh]/]: s#130
[#422 /[1-9][0-9]*[iu]?/]: s#110
[#423 ')']: r#257
[#423 ';']: r#257
[#424 ')']: r#258
[#424 ';']: r#258
[#425 '!']: r#259
[#425 '&']: r#259
[#425 '(']: r#259
[#425 '*']: r#259
[#425 '-']: r#259
[#425 'array']: r#259
[#425 'bitcast']: r#259
[#425 'bool']: r#259
[#425 'f16']: r#259
[#425 'f32']: r#259
[#425 'false']: r#259
[#425 'i32']: r#259
[#425 'mat2x2']: r#259
[#425 'mat2x3']: r#259
[#425 'mat2x4']: r#259
[#425 'mat3x2']: r#259
[#425 'mat3x3']: r#259
[#425 'mat3x4']: r#259
[#425 'mat4x2']: r#259
[#425 'mat4x3']: r#259
[#425 'mat4x4']: r#259
[#425 'ptr']: r#259
[#425 'sampler']: r#259
[#425 'sampler_comparison']: r#259
[#425 'texture_1d']: r#259
[#425 'texture_2d']: r#259
[#425 'texture_2d_array']: r#259
[#425 'texture_3d']: r#259
[#425 'texture_cube']: r#259
[#425 'texture_cube_array']: r#259
[#425 'texture_depth_2d']: r#259
[#425 'texture_depth_2d_array']: r#259
[#425 'texture_depth_cube']: r#259
[#425 'texture_depth_cube_array']: r#259
[#425 'texture_depth_multisampled_2d']: r#259
[#425 'texture_multisampled_2d']: r#259
[#425 'texture_storage_1d']: r#259
[#425 'texture_storage_2d']: r#259
[#425 'texture_storage_2d_array']: r#259
[#425 'texture_storage_3d']: r#259
[#425 'true']: r#259
[#425 'u32']: r#259
[#425 'vec2']: r#259
[#425 'vec3']: r#259
[#425 'vec4']: r#259
[#425 '~']: r#259
[#426 '!']: r#260
[#426 '&']: r#260
[#426 '(']: r#260
[#426 '*']: r#260
[#426 '-']: r#260
[#426 'array']: r#260
[#426 'bitcast']: r#260
[#426 'bool']: r#260
[#426 'f16']: r#260
[#426 'f32']: r#260
[#426 'false']: r#260
[#426 'i32']: r#260
[#426 'mat2x2']: r#260
[#426 'mat2x3']: r#260
[#426 'mat2x4']: r#260
[#426 'mat3x2']: r#260
[#426 'mat3x3']: r#260
[#426 'mat3x4']: r#260
[#426 'mat4x2']: r#260
[#426 'mat4x3']: r#260
[#426 'mat4x4']: r#260
[#426 'ptr']: r#260
[#426 'sampler']: r#260
[#426 'sampler_comparison']: r#260
[#426 'texture_1d']: r#260
[#426 'texture_2d']: r#260
[#426 'texture_2d_array']: r#260
[#426 'texture_3d']: r#260
[#426 'texture_cube']: r#260
[#426 'texture_cube_array']: r#260
[#426 'texture_depth_2d']: r#260
[#426 'texture_depth_2d_array']: r#260
[#426 'texture_depth_cube']: r#260
[#426 'texture_depth_cube_array']: r#260
[#426 'texture_depth_multisampled_2d']: r#260
[#426 'texture_multisampled_2d']: r#260
[#426 'texture_storage_1d']: r#260
[#426 'texture_storage_2d']: r#260
[#426 'texture_storage_2d_array']: r#260
[#426 'texture_storage_3d']: r#260
[#426 'true']: r#260
[#426 'u32']: r#260
[#426 'vec2']: r#260
[#426 'vec3']: r#260
[#426 'vec4']: r#260
[#426 '~']: r#260
[#427 ')']: r#261
[#427 ';']: r#261
[#428 ')']: r#262
[#428 ';']: r#262
[#429 '!']: r#263
[#429 '&']: r#263
[#429 '(']: r#263
[#429 '*']: r#263
[#429 '-']: r#263
[#429 'array']: r#263
[#429 'bitcast']: r#263
[#429 'bool']: r#263
[#429 'f16']: r#263
[#429 'f32']: r#263
[#429 'false']: r#263
[#429 'i32']: r#263
[#429 'mat2x2']: r#263
[#429 'mat2x3']: r#263
[#429 'mat2x4']: r#263
[#429 'mat3x2']: r#263
[#429 'mat3x3']: r#263
[#429 'mat3x4']: r#263
[#429 'mat4x2']: r#263
[#429 'mat4x3']: r#263
[#429 'mat4x4']: r#263
[#429 'ptr']: r#263
[#429 'sampler']: r#263
[#429 'sampler_comparison']: r#263
[#429 'texture_1d']: r#263
[#429 'texture_2d']: r#263
[#429 'texture_2d_array']: r#263
[#429 'texture_3d']: r#263
[#429 'texture_cube']: r#263
[#429 'texture_cube_array']: r#263
[#429 'texture_depth_2d']: r#263
[#429 'texture_depth_2d_array']: r#263
[#429 'texture_depth_cube']: r#263
[#429 'texture_depth_cube_array']: r#263
[#429 'texture_depth_multisampled_2d']: r#263
[#429 'texture_multisampled_2d']: r#263
[#429 'texture_storage_1d']: r#263
[#429 'texture_storage_2d']: r#263
[#429 'texture_storage_2d_array']: r#263
[#429 'texture_storage_3d']: r#263
[#429 'true']: r#263
[#429 'u32']: r#263
[#429 'vec2']: r#263
[#429 'vec3']: r#263
[#429 'vec4']: r#263
[#429 '~']: r#263
[#430 '!']: r#264
[#430 '&']: r#264
[#430 '(']: r#264
[#430 '*']: r#264
[#430 '-']: r#264
[#430 'array']: r#264
[#430 'bitcast']: r#264
[#430 'bool']: r#264
[#430 'f16']: r#264
[#430 'f32']: r#264
[#430 'false']: r#264
[#430 'i32']: r#264
[#430 'mat2x2']: r#264
[#430 'mat2x3']: r#264
[#430 'mat2x4']: r#264
[#430 'mat3x2']: r#264
[#430 'mat3x3']: r#264
[#430 'mat3x4']: r#264
[#430 'mat4x2']: r#264
[#430 'mat4x3']: r#264
[#430 'mat4x4']: r#264
[#430 'ptr']: r#264
[#430 'sampler']: r#264
[#430 'sampler_comparison']: r#264
[#430 'texture_1d']: r#264
[#430 'texture_2d']: r#264
[#430 'texture_2d_array']: r#264
[#430 'texture_3d']: r#264
[#430 'texture_cube']: r#264
[#430 'texture_cube_array']: r#264
[#430 'texture_depth_2d']: r#264
[#430 'texture_depth_2d_array']: r#264
[#430 'texture_depth_cube']: r#264
[#430 'texture_depth_cube_array']: r#264
[#430 'texture_depth_multisampled_2d']: r#264
[#430 'texture_multisampled_2d']: r#264
[#430 'texture_storage_1d']: r#264
[#430 'texture_storage_2d']: r#264
[#430 'texture_storage_2d_array']: r#264
[#430 'texture_storage_3d']: r#264
[#430 'true']: r#264
[#430 'u32']: r#264
[#430 'vec2']: r#264
[#430 'vec3']: r#264
[#430 'vec4']: r#264
[#430 '~']: r#264
[#431 '!']: r#265
[#431 '&']: r#265
[#431 '(']: r#265
[#431 '*']: r#265
[#431 '-']: r#265
[#431 'array']: r#265
[#431 'bitcast']: r#265
[#431 'bool']: r#265
[#431 'f16']: r#265
[#431 'f32']: r#265
[#431 'false']: r#265
[#431 'i32']: r#265
[#431 'mat2x2']: r#265
[#431 'mat2x3']: r#265
[#431 'mat2x4']: r#265
[#431 'mat3x2']: r#265
[#431 'mat3x3']: r#265
[#431 'mat3x4']: r#265
[#431 'mat4x2']: r#265
[#431 'mat4x3']: r#265
[#431 'mat4x4']: r#265
[#431 'ptr']: r#265
[#431 'sampler']: r#265
[#431 'sampler_comparison']: r#265
[#431 'texture_1d']: r#265
[#431 'texture_2d']: r#265
[#431 'texture_2d_array']: r#265
[#431 'texture_3d']: r#265
[#431 'texture_cube']: r#265
[#431 'texture_cube_array']: r#265
[#431 'texture_depth_2d']: r#265
[#431 'texture_depth_2d_array']: r#265
[#431 'texture_depth_cube']: r#265
[#431 'texture_depth_cube_array']: r#265
[#431 'texture_depth_multisampled_2d']: r#265
[#431 'texture_multisampled_2d']: r#265
[#431 'texture_storage_1d']: r#265
[#431 'texture_storage_2d']: r#265
[#431 'texture_storage_2d_array']: r#265
[#431 'texture_storage_3d']: r#265
[#431 'true']: r#265
[#431 'u32']: r#265
[#431 'vec2']: r#265
[#431 'vec3']: r#265
[#431 'vec4']: r#265
[#431 '~']: r#265
[#432 '!']: r#266
[#432 '&']: r#266
[#432 '(']: r#266
[#432 '*']: r#266
[#432 '-']: r#266
[#432 'array']: r#266
[#432 'bitcast']: r#266
[#432 'bool']: r#266
[#432 'f16']: r#266
[#432 'f32']: r#266
[#432 'false']: r#266
[#432 'i32']: r#266
[#432 'mat2x2']: r#266
[#432 'mat2x3']: r#266
[#432 'mat2x4']: r#266
[#432 'mat3x2']: r#266
[#432 'mat3x3']: r#266
[#432 'mat3x4']: r#266
[#432 'mat4x2']: r#266
[#432 'mat4x3']: r#266
[#432 'mat4x4']: r#266
[#432 'ptr']: r#266
[#432 'sampler']: r#266
[#432 'sampler_comparison']: r#266
[#432 'texture_1d']: r#266
[#432 'texture_2d']: r#266
[#432 'texture_2d_array']: r#266
[#432 'texture_3d']: r#266
[#432 'texture_cube']: r#266
[#432 'texture_cube_array']: r#266
[#432 'texture_depth_2d']: r#266
[#432 'texture_depth_2d_array']: r#266
[#432 'texture_depth_cube']: r#266
[#432 'texture_depth_cube_array']: r#266
[#432 'texture_depth_multisampled_2d']: r#266
[#432 'texture_multisampled_2d']: r#266
[#432 'texture_storage_1d']: r#266
[#432 'texture_storage_2d']: r#266
[#432 'texture_storage_2d_array']: r#266
[#432 'texture_storage_3d']: r#266
[#432 'true']: r#266
[#432 'u32']: r#266
[#432 'vec2']: r#266
[#432 'vec3']: r#266
[#432 'vec4']: r#266
[#432 '~']: r#266
[#433 '!']: r#267
[#433 '&']: r#267
[#433 '(']: r#267
[#433 '*']: r#267
[#433 '-']: r#267
[#433 'array']: r#267
[#433 'bitcast']: r#267
[#433 'bool']: r#267
[#433 'f16']: r#267
[#433 'f32']: r#267
[#433 'false']: r#267
[#433 'i32']: r#267
[#433 'mat2x2']: r#267
[#433 'mat2x3']: r#267
[#433 'mat2x4']: r#267
[#433 'mat3x2']: r#267
[#433 'mat3x3']: r#267
[#433 'mat3x4']: r#267
[#433 'mat4x2']: r#267
[#433 'mat4x3']: r#267
[#433 'mat4x4']: r#267
[#433 'ptr']: r#267
[#433 'sampler']: r#267
[#433 'sampler_comparison']: r#267
[#433 'texture_1d']: r#267
[#433 'texture_2d']: r#267
[#433 'texture_2d_array']: r#267
[#433 'texture_3d']: r#267
[#433 'texture_cube']: r#267
[#433 'texture_cube_array']: r#267
[#433 'texture_depth_2d']: r#267
[#433 'texture_depth_2d_array']: r#267
[#433 'texture_depth_cube']: r#267
[#433 'texture_depth_cube_array']: r#267
[#433 'texture_depth_multisampled_2d']: r#267
[#433 'texture_multisampled_2d']: r#267
[#433 'texture_storage_1d']: r#267
[#433 'texture_storage_2d']: r#267
[#433 'texture_storage_2d_array']: r#267
[#433 'texture_storage_3d']: r#267
[#433 'true']: r#267
[#433 'u32']: r#267
[#433 'vec2']: r#267
[#433 'vec3']: r#267
[#433 'vec4']: r#267
[#433 '~']: r#267
[#434 '!']: r#268
[#434 '&']: r#268
[#434 '(']: r#268
[#434 '*']: r#268
[#434 '-']: r#268
[#434 'array']: r#268
[#434 'bitcast']: r#268
[#434 'bool']: r#268
[#434 'f16']: r#268
[#434 'f32']: r#268
[#434 'false']: r#268
[#434 'i32']: r#268
[#434 'mat2x2']: r#268
[#434 'mat2x3']: r#268
[#434 'mat2x4']: r#268
[#434 'mat3x2']: r#268
[#434 'mat3x3']: r#268
[#434 'mat3x4']: r#268
[#434 'mat4x2']: r#268
[#434 'mat4x3']: r#268
[#434 'mat4x4']: r#268
[#434 'ptr']: r#268
[#434 'sampler']: r#268
[#434 'sampler_comparison']: r#268
[#434 'texture_1d']: r#268
[#434 'texture_2d']: r#268
[#434 'texture_2d_array']: r#268
[#434 'texture_3d']: r#268
[#434 'texture_cube']: r#268
[#434 'texture_cube_array']: r#268
[#434 'texture_depth_2d']: r#268
[#434 'texture_depth_2d_array']: r#268
[#434 'texture_depth_cube']: r#268
[#434 'texture_depth_cube_array']: r#268
[#434 'texture_depth_multisampled_2d']: r#268
[#434 'texture_multisampled_2d']: r#268
[#434 'texture_storage_1d']: r#268
[#434 'texture_storage_2d']: r#268
[#434 'texture_storage_2d_array']: r#268
[#434 'texture_storage_3d']: r#268
[#434 'true']: r#268
[#434 'u32']: r#268
[#434 'vec2']: r#268
[#434 'vec3']: r#268
[#434 'vec4']: r#268
[#434 '~']: r#268
[#435 '!']: r#269
[#435 '&']: r#269
[#435 '(']: r#269
[#435 '*']: r#269
[#435 '-']: r#269
[#435 'array']: r#269
[#435 'bitcast']: r#269
[#435 'bool']: r#269
[#435 'f16']: r#269
[#435 'f32']: r#269
[#435 'false']: r#269
[#435 'i32']: r#269
[#435 'mat2x2']: r#269
[#435 'mat2x3']: r#269
[#435 'mat2x4']: r#269
[#435 'mat3x2']: r#269
[#435 'mat3x3']: r#269
[#435 'mat3x4']: r#269
[#435 'mat4x2']: r#269
[#435 'mat4x3']: r#269
[#435 'mat4x4']: r#269
[#435 'ptr']: r#269
[#435 'sampler']: r#269
[#435 'sampler_comparison']: r#269
[#435 'texture_1d']: r#269
[#435 'texture_2d']: r#269
[#435 'texture_2d_array']: r#269
[#435 'texture_3d']: r#269
[#435 'texture_cube']: r#269
[#435 'texture_cube_array']: r#269
[#435 'texture_depth_2d']: r#269
[#435 'texture_depth_2d_array']: r#269
[#435 'texture_depth_cube']: r#269
[#435 'texture_depth_cube_array']: r#269
[#435 'texture_depth_multisampled_2d']: r#269
[#435 'texture_multisampled_2d']: r#269
[#435 'texture_storage_1d']: r#269
[#435 'texture_storage_2d']: r#269
[#435 'texture_storage_2d_array']: r#269
[#435 'texture_storage_3d']: r#269
[#435 'true']: r#269
[#435 'u32']: r#269
[#435 'vec2']: r#269
[#435 'vec3']: r#269
[#435 'vec4']: r#269
[#435 '~']: r#269
[#436 '!']: r#270
[#436 '&']: r#270
[#436 '(']: r#270
[#436 '*']: r#270
[#436 '-']: r#270
[#436 'array']: r#270
[#436 'bitcast']: r#270
[#436 'bool']: r#270
[#436 'f16']: r#270
[#436 'f32']: r#270
[#436 'false']: r#270
[#436 'i32']: r#270
[#436 'mat2x2']: r#270
[#436 'mat2x3']: r#270
[#436 'mat2x4']: r#270
[#436 'mat3x2']: r#270
[#436 'mat3x3']: r#270
[#436 'mat3x4']: r#270
[#436 'mat4x2']: r#270
[#436 'mat4x3']: r#270
[#436 'mat4x4']: r#270
[#436 'ptr']: r#270
[#436 'sampler']: r#270
[#436 'sampler_comparison']: r#270
[#436 'texture_1d']: r#270
[#436 'texture_2d']: r#270
[#436 'texture_2d_array']: r#270
[#436 'texture_3d']: r#270
[#436 'texture_cube']: r#270
[#436 'texture_cube_array']: r#270
[#436 'texture_depth_2d']: r#270
[#436 'texture_depth_2d_array']: r#270
[#436 'texture_depth_cube']: r#270
[#436 'texture_depth_cube_array']: r#270
[#436 'texture_depth_multisampled_2d']: r#270
[#436 'texture_multisampled_2d']: r#270
[#436 'texture_storage_1d']: r#270
[#436 'texture_storage_2d']: r#270
[#436 'texture_storage_2d_array']: r#270
[#436 'texture_storage_3d']: r#270
[#436 'true']: r#270
[#436 'u32']: r#270
[#436 'vec2']: r#270
[#436 'vec3']: r#270
[#436 'vec4']: r#270
[#436 '~']: r#270
[#437 '!']: r#271
[#437 '&']: r#271
[#437 '(']: r#271
[#437 '*']: r#271
[#437 '-']: r#271
[#437 'array']: r#271
[#437 'bitcast']: r#271
[#437 'bool']: r#271
[#437 'f16']: r#271
[#437 'f32']: r#271
[#437 'false']: r#271
[#437 'i32']: r#271
[#437 'mat2x2']: r#271
[#437 'mat2x3']: r#271
[#437 'mat2x4']: r#271
[#437 'mat3x2']: r#271
[#437 'mat3x3']: r#271
[#437 'mat3x4']: r#271
[#437 'mat4x2']: r#271
[#437 'mat4x3']: r#271
[#437 'mat4x4']: r#271
[#437 'ptr']: r#271
[#437 'sampler']: r#271
[#437 'sampler_comparison']: r#271
[#437 'texture_1d']: r#271
[#437 'texture_2d']: r#271
[#437 'texture_2d_array']: r#271
[#437 'texture_3d']: r#271
[#437 'texture_cube']: r#271
[#437 'texture_cube_array']: r#271
[#437 'texture_depth_2d']: r#271
[#437 'texture_depth_2d_array']: r#271
[#437 'texture_depth_cube']: r#271
[#437 'texture_depth_cube_array']: r#271
[#437 'texture_depth_multisampled_2d']: r#271
[#437 'texture_multisampled_2d']: r#271
[#437 'texture_storage_1d']: r#271
[#437 'texture_storage_2d']: r#271
[#437 'texture_storage_2d_array']: r#271
[#437 'texture_storage_3d']: r#271
[#437 'true']: r#271
[#437 'u32']: r#271
[#437 'vec2']: r#271
[#437 'vec3']: r#271
[#437 'vec4']: r#271
[#437 '~']: r#271
[#438 '!']: r#272
[#438 '&']: r#272
[#438 '(']: r#272
[#438 '*']: r#272
[#438 '-']: r#272
[#438 'array']: r#272
[#438 'bitcast']: r#272
[#438 'bool']: r#272
[#438 'f16']: r#272
[#438 'f32']: r#272
[#438 'false']: r#272
[#438 'i32']: r#272
[#438 'mat2x2']: r#272
[#438 'mat2x3']: r#272
[#438 'mat2x4']: r#272
[#438 'mat3x2']: r#272
[#438 'mat3x3']: r#272
[#438 'mat3x4']: r#272
[#438 'mat4x2']: r#272
[#438 'mat4x3']: r#272
[#438 'mat4x4']: r#272
[#438 'ptr']: r#272
[#438 'sampler']: r#272
[#438 'sampler_comparison']: r#272
[#438 'texture_1d']: r#272
[#438 'texture_2d']: r#272
[#438 'texture_2d_array']: r#272
[#438 'texture_3d']: r#272
[#438 'texture_cube']: r#272
[#438 'texture_cube_array']: r#272
[#438 'texture_depth_2d']: r#272
[#438 'texture_depth_2d_array']: r#272
[#438 'texture_depth_cube']: r#272
[#438 'texture_depth_cube_array']: r#272
[#438 'texture_depth_multisampled_2d']: r#272
[#438 'texture_multisampled_2d']: r#272
[#438 'texture_storage_1d']: r#272
[#438 'texture_storage_2d']: r#272
[#438 'texture_storage_2d_array']: r#272
[#438 'texture_storage_3d']: r#272
[#438 'true']: r#272
[#438 'u32']: r#272
[#438 'vec2']: r#272
[#438 'vec3']: r#272
[#438 'vec4']: r#272
[#438 '~']: r#272
[#439 '!']: r#273
[#439 '&']: r#273
[#439 '(']: r#273
[#439 '*']: r#273
[#439 '-']: r#273
[#439 'array']: r#273
[#439 'bitcast']: r#273
[#439 'bool']: r#273
[#439 'f16']: r#273
[#439 'f32']: r#273
[#439 'false']: r#273
[#439 'i32']: r#273
[#439 'mat2x2']: r#273
[#439 'mat2x3']: r#273
[#439 'mat2x4']: r#273
[#439 'mat3x2']: r#273
[#439 'mat3x3']: r#273
[#439 'mat3x4']: r#273
[#439 'mat4x2']: r#273
[#439 'mat4x3']: r#273
[#439 'mat4x4']: r#273
[#439 'ptr']: r#273
[#439 'sampler']: r#273
[#439 'sampler_comparison']: r#273
[#439 'texture_1d']: r#273
[#439 'texture_2d']: r#273
[#439 'texture_2d_array']: r#273
[#439 'texture_3d']: r#273
[#439 'texture_cube']: r#273
[#439 'texture_cube_array']: r#273
[#439 'texture_depth_2d']: r#273
[#439 'texture_depth_2d_array']: r#273
[#439 'texture_depth_cube']: r#273
[#439 'texture_depth_cube_array']: r#273
[#439 'texture_depth_multisampled_2d']: r#273
[#439 'texture_multisampled_2d']: r#273
[#439 'texture_storage_1d']: r#273
[#439 'texture_storage_2d']: r#273
[#439 'texture_storage_2d_array']: r#273
[#439 'texture_storage_3d']: r#273
[#439 'true']: r#273
[#439 'u32']: r#273
[#439 'vec2']: r#273
[#439 'vec3']: r#273
[#439 'vec4']: r#273
[#439 '~']: r#273
[#440 '!']: r#274
[#440 '&']: r#274
[#440 '(']: r#274
[#440 '*']: r#274
[#440 '-']: r#274
[#440 'array']: r#274
[#440 'bitcast']: r#274
[#440 'bool']: r#274
[#440 'f16']: r#274
[#440 'f32']: r#274
[#440 'false']: r#274
[#440 'i32']: r#274
[#440 'mat2x2']: r#274
[#440 'mat2x3']: r#274
[#440 'mat2x4']: r#274
[#440 'mat3x2']: r#274
[#440 'mat3x3']: r#274
[#440 'mat3x4']: r#274
[#440 'mat4x2']: r#274
[#440 'mat4x3']: r#274
[#440 'mat4x4']: r#274
[#440 'ptr']: r#274
[#440 'sampler']: r#274
[#440 'sampler_comparison']: r#274
[#440 'texture_1d']: r#274
[#440 'texture_2d']: r#274
[#440 'texture_2d_array']: r#274
[#440 'texture_3d']: r#274
[#440 'texture_cube']: r#274
[#440 'texture_cube_array']: r#274
[#440 'texture_depth_2d']: r#274
[#440 'texture_depth_2d_array']: r#274
[#440 'texture_depth_cube']: r#274
[#440 'texture_depth_cube_array']: r#274
[#440 'texture_depth_multisampled_2d']: r#274
[#440 'texture_multisampled_2d']: r#274
[#440 'texture_storage_1d']: r#274
[#440 'texture_storage_2d']: r#274
[#440 'texture_storage_2d_array']: r#274
[#440 'texture_storage_3d']: r#274
[#440 'true']: r#274
[#440 'u32']: r#274
[#440 'vec2']: r#274
[#440 'vec3']: r#274
[#440 'vec4']: r#274
[#440 '~']: r#274
[#441 '!']: r#275
[#441 '&']: r#275
[#441 '(']: r#275
[#441 '*']: r#275
[#441 '-']: r#275
[#441 'array']: r#275
[#441 'bitcast']: r#275
[#441 'bool']: r#275
[#441 'f16']: r#275
[#441 'f32']: r#275
[#441 'false']: r#275
[#441 'i32']: r#275
[#441 'mat2x2']: r#275
[#441 'mat2x3']: r#275
[#441 'mat2x4']: r#275
[#441 'mat3x2']: r#275
[#441 'mat3x3']: r#275
[#441 'mat3x4']: r#275
[#441 'mat4x2']: r#275
[#441 'mat4x3']: r#275
[#441 'mat4x4']: r#275
[#441 'ptr']: r#275
[#441 'sampler']: r#275
[#441 'sampler_comparison']: r#275
[#441 'texture_1d']: r#275
[#441 'texture_2d']: r#275
[#441 'texture_2d_array']: r#275
[#441 'texture_3d']: r#275
[#441 'texture_cube']: r#275
[#441 'texture_cube_array']: r#275
[#441 'texture_depth_2d']: r#275
[#441 'texture_depth_2d_array']: r#275
[#441 'texture_depth_cube']: r#275
[#441 'texture_depth_cube_array']: r#275
[#441 'texture_depth_multisampled_2d']: r#275
[#441 'texture_multisampled_2d']: r#275
[#441 'texture_storage_1d']: r#275
[#441 'texture_storage_2d']: r#275
[#441 'texture_storage_2d_array']: r#275
[#441 'texture_storage_3d']: r#275
[#441 'true']: r#275
[#441 'u32']: r#275
[#441 'vec2']: r#275
[#441 'vec3']: r#275
[#441 'vec4']: r#275
[#441 '~']: r#275
[#442 '!']: r#276
[#442 '&']: r#276
[#442 '(']: r#276
[#442 '*']: r#276
[#442 '-']: r#276
[#442 'array']: r#276
[#442 'bitcast']: r#276
[#442 'bool']: r#276
[#442 'f16']: r#276
[#442 'f32']: r#276
[#442 'false']: r#276
[#442 'i32']: r#276
[#442 'mat2x2']: r#276
[#442 'mat2x3']: r#276
[#442 'mat2x4']: r#276
[#442 'mat3x2']: r#276
[#442 'mat3x3']: r#276
[#442 'mat3x4']: r#276
[#442 'mat4x2']: r#276
[#442 'mat4x3']: r#276
[#442 'mat4x4']: r#276
[#442 'ptr']: r#276
[#442 'sampler']: r#276
[#442 'sampler_comparison']: r#276
[#442 'texture_1d']: r#276
[#442 'texture_2d']: r#276
[#442 'texture_2d_array']: r#276
[#442 'texture_3d']: r#276
[#442 'texture_cube']: r#276
[#442 'texture_cube_array']: r#276
[#442 'texture_depth_2d']: r#276
[#442 'texture_depth_2d_array']: r#276
[#442 'texture_depth_cube']: r#276
[#442 'texture_depth_cube_array']: r#276
[#442 'texture_depth_multisampled_2d']: r#276
[#442 'texture_multisampled_2d']: r#276
[#442 'texture_storage_1d']: r#276
[#442 'texture_storage_2d']: r#276
[#442 'texture_storage_2d_array']: r#276
[#442 'texture_storage_3d']: r#276
[#442 'true']: r#276
[#442 'u32']: r#276
[#442 'vec2']: r#276
[#442 'vec3']: r#276
[#442 'vec4']: r#276
[#442 '~']: r#276
[#443 '!']: r#277
[#443 '&']: r#277
[#443 '(']: r#277
[#443 '*']: r#277
[#443 '-']: r#277
[#443 'array']: r#277
[#443 'bitcast']: r#277
[#443 'bool']: r#277
[#443 'f16']: r#277
[#443 'f32']: r#277
[#443 'false']: r#277
[#443 'i32']: r#277
[#443 'mat2x2']: r#277
[#443 'mat2x3']: r#277
[#443 'mat2x4']: r#277
[#443 'mat3x2']: r#277
[#443 'mat3x3']: r#277
[#443 'mat3x4']: r#277
[#443 'mat4x2']: r#277
[#443 'mat4x3']: r#277
[#443 'mat4x4']: r#277
[#443 'ptr']: r#277
[#443 'sampler']: r#277
[#443 'sampler_comparison']: r#277
[#443 'texture_1d']: r#277
[#443 'texture_2d']: r#277
[#443 'texture_2d_array']: r#277
[#443 'texture_3d']: r#277
[#443 'texture_cube']: r#277
[#443 'texture_cube_array']: r#277
[#443 'texture_depth_2d']: r#277
[#443 'texture_depth_2d_array']: r#277
[#443 'texture_depth_cube']: r#277
[#443 'texture_depth_cube_array']: r#277
[#443 'texture_depth_multisampled_2d']: r#277
[#443 'texture_multisampled_2d']: r#277
[#443 'texture_storage_1d']: r#277
[#443 'texture_storage_2d']: r#277
[#443 'texture_storage_2d_array']: r#277
[#443 'texture_storage_3d']: r#277
[#443 'true']: r#277
[#443 'u32']: r#277
[#443 'vec2']: r#277
[#443 'vec3']: r#277
[#443 'vec4']: r#277
[#443 '~']: r#277
[#444 '!']: r#278
[#444 '&']: r#278
[#444 '(']: r#278
[#444 '*']: r#278
[#444 '-']: r#278
[#444 'array']: r#278
[#444 'bitcast']: r#278
[#444 'bool']: r#278
[#444 'f16']: r#278
[#444 'f32']: r#278
[#444 'false']: r#278
[#444 'i32']: r#278
[#444 'mat2x2']: r#278
[#444 'mat2x3']: r#278
[#444 'mat2x4']: r#278
[#444 'mat3x2']: r#278
[#444 'mat3x3']: r#278
[#444 'mat3x4']: r#278
[#444 'mat4x2']: r#278
[#444 'mat4x3']: r#278
[#444 'mat4x4']: r#278
[#444 'ptr']: r#278
[#444 'sampler']: r#278
[#444 'sampler_comparison']: r#278
[#444 'texture_1d']: r#278
[#444 'texture_2d']: r#278
[#444 'texture_2d_array']: r#278
[#444 'texture_3d']: r#278
[#444 'texture_cube']: r#278
[#444 'texture_cube_array']: r#278
[#444 'texture_depth_2d']: r#278
[#444 'texture_depth_2d_array']: r#278
[#444 'texture_depth_cube']: r#278
[#444 'texture_depth_cube_array']: r#278
[#444 'texture_depth_multisampled_2d']: r#278
[#444 'texture_multisampled_2d']: r#278
[#444 'texture_storage_1d']: r#278
[#444 'texture_storage_2d']: r#278
[#444 'texture_storage_2d_array']: r#278
[#444 'texture_storage_3d']: r#278
[#444 'true']: r#278
[#444 'u32']: r#278
[#444 'vec2']: r#278
[#444 'vec3']: r#278
[#444 'vec4']: r#278
[#444 '~']: r#278
[#445 '!']: r#279
[#445 '&']: r#279
[#445 '(']: r#279
[#445 '*']: r#279
[#445 '-']: r#279
[#445 'array']: r#279
[#445 'bitcast']: r#279
[#445 'bool']: r#279
[#445 'f16']: r#279
[#445 'f32']: r#279
[#445 'false']: r#279
[#445 'i32']: r#279
[#445 'mat2x2']: r#279
[#445 'mat2x3']: r#279
[#445 'mat2x4']: r#279
[#445 'mat3x2']: r#279
[#445 'mat3x3']: r#279
[#445 'mat3x4']: r#279
[#445 'mat4x2']: r#279
[#445 'mat4x3']: r#279
[#445 'mat4x4']: r#279
[#445 'ptr']: r#279
[#445 'sampler']: r#279
[#445 'sampler_comparison']: r#279
[#445 'texture_1d']: r#279
[#445 'texture_2d']: r#279
[#445 'texture_2d_array']: r#279
[#445 'texture_3d']: r#279
[#445 'texture_cube']: r#279
[#445 'texture_cube_array']: r#279
[#445 'texture_depth_2d']: r#279
[#445 'texture_depth_2d_array']: r#279
[#445 'texture_depth_cube']: r#279
[#445 'texture_depth_cube_array']: r#279
[#445 'texture_depth_multisampled_2d']: r#279
[#445 'texture_multisampled_2d']: r#279
[#445 'texture_storage_1d']: r#279
[#445 'texture_storage_2d']: r#279
[#445 'texture_storage_2d_array']: r#279
[#445 'texture_storage_3d']: r#279
[#445 'true']: r#279
[#445 'u32']: r#279
[#445 'vec2']: r#279
[#445 'vec3']: r#279
[#445 'vec4']: r#279
[#445 '~']: r#279
[#446 '!']: r#280
[#446 '&']: r#280
[#446 '(']: r#280
[#446 '*']: r#280
[#446 '-']: r#280
[#446 'array']: r#280
[#446 'bitcast']: r#280
[#446 'bool']: r#280
[#446 'f16']: r#280
[#446 'f32']: r#280
[#446 'false']: r#280
[#446 'i32']: r#280
[#446 'mat2x2']: r#280
[#446 'mat2x3']: r#280
[#446 'mat2x4']: r#280
[#446 'mat3x2']: r#280
[#446 'mat3x3']: r#280
[#446 'mat3x4']: r#280
[#446 'mat4x2']: r#280
[#446 'mat4x3']: r#280
[#446 'mat4x4']: r#280
[#446 'ptr']: r#280
[#446 'sampler']: r#280
[#446 'sampler_comparison']: r#280
[#446 'texture_1d']: r#280
[#446 'texture_2d']: r#280
[#446 'texture_2d_array']: r#280
[#446 'texture_3d']: r#280
[#446 'texture_cube']: r#280
[#446 'texture_cube_array']: r#280
[#446 'texture_depth_2d']: r#280
[#446 'texture_depth_2d_array']: r#280
[#446 'texture_depth_cube']: r#280
[#446 'texture_depth_cube_array']: r#280
[#446 'texture_depth_multisampled_2d']: r#280
[#446 'texture_multisampled_2d']: r#280
[#446 'texture_storage_1d']: r#280
[#446 'texture_storage_2d']: r#280
[#446 'texture_storage_2d_array']: r#280
[#446 'texture_storage_3d']: r#280
[#446 'true']: r#280
[#446 'u32']: r#280
[#446 'vec2']: r#280
[#446 'vec3']: r#280
[#446 'vec4']: r#280
[#446 '~']: r#280
[#447 '!']: r#281
[#447 '&']: r#281
[#447 '(']: r#281
[#447 '*']: r#281
[#447 '-']: r#281
[#447 'array']: r#281
[#447 'bitcast']: r#281
[#447 'bool']: r#281
[#447 'f16']: r#281
[#447 'f32']: r#281
[#447 'false']: r#281
[#447 'i32']: r#281
[#447 'mat2x2']: r#281
[#447 'mat2x3']: r#281
[#447 'mat2x4']: r#281
[#447 'mat3x2']: r#281
[#447 'mat3x3']: r#281
[#447 'mat3x4']: r#281
[#447 'mat4x2']: r#281
[#447 'mat4x3']: r#281
[#447 'mat4x4']: r#281
[#447 'ptr']: r#281
[#447 'sampler']: r#281
[#447 'sampler_comparison']: r#281
[#447 'texture_1d']: r#281
[#447 'texture_2d']: r#281
[#447 'texture_2d_array']: r#281
[#447 'texture_3d']: r#281
[#447 'texture_cube']: r#281
[#447 'texture_cube_array']: r#281
[#447 'texture_depth_2d']: r#281
[#447 'texture_depth_2d_array']: r#281
[#447 'texture_depth_cube']: r#281
[#447 'texture_depth_cube_array']: r#281
[#447 'texture_depth_multisampled_2d']: r#281
[#447 'texture_multisampled_2d']: r#281
[#447 'texture_storage_1d']: r#281
[#447 'texture_storage_2d']: r#281
[#447 'texture_storage_2d_array']: r#281
[#447 'texture_storage_3d']: r#281
[#447 'true']: r#281
[#447 'u32']: r#281
[#447 'vec2']: r#281
[#447 'vec3']: r#281
[#447 'vec4']: r#281
[#447 '~']: r#281
[#448 '!']: r#282
[#448 '&']: r#282
[#448 '(']: r#282
[#448 '*']: r#282
[#448 '-']: r#282
[#448 'array']: r#282
[#448 'bitcast']: r#282
[#448 'bool']: r#282
[#448 'f16']: r#282
[#448 'f32']: r#282
[#448 'false']: r#282
[#448 'i32']: r#282
[#448 'mat2x2']: r#282
[#448 'mat2x3']: r#282
[#448 'mat2x4']: r#282
[#448 'mat3x2']: r#282
[#448 'mat3x3']: r#282
[#448 'mat3x4']: r#282
[#448 'mat4x2']: r#282
[#448 'mat4x3']: r#282
[#448 'mat4x4']: r#282
[#448 'ptr']: r#282
[#448 'sampler']: r#282
[#448 'sampler_comparison']: r#282
[#448 'texture_1d']: r#282
[#448 'texture_2d']: r#282
[#448 'texture_2d_array']: r#282
[#448 'texture_3d']: r#282
[#448 'texture_cube']: r#282
[#448 'texture_cube_array']: r#282
[#448 'texture_depth_2d']: r#282
[#448 'texture_depth_2d_array']: r#282
[#448 'texture_depth_cube']: r#282
[#448 'texture_depth_cube_array']: r#282
[#448 'texture_depth_multisampled_2d']: r#282
[#448 'texture_multisampled_2d']: r#282
[#448 'texture_storage_1d']: r#282
[#448 'texture_storage_2d']: r#282
[#448 'texture_storage_2d_array']: r#282
[#448 'texture_storage_3d']: r#282
[#448 'true']: r#282
[#448 'u32']: r#282
[#448 'vec2']: r#282
[#448 'vec3']: r#282
[#448 'vec4']: r#282
[#448 '~']: r#282
[#449 '=']: s#174
[#450 ':']: s#176
[#450 '=']: r#283
[#451 '=']: r#284
[#452 '=']: s#174
[#453 ':']: s#176
[#453 '=']: r#285
[#454 '=']: r#286
[#455 ')']: r#287
[#455 ';']: r#287
[#456 '{']: s#184
[#457 '&']: s#73
[#457 '*']: s#72
[#457 'const']: s#371
[#457 'let']: s#370
[#457 'var']: s#161
[#457 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#458 '&']: s#73
[#458 '*']: s#72
[#458 ';']: s#19
[#458 'break']: s#372
[#458 'const']: s#371
[#458 'continue']: s#373
[#458 'discard']: s#356
[#458 'for']: s#366
[#458 'if']: s#375
[#458 'let']: s#370
[#458 'loop']: s#365
[#458 'return']: s#362
[#458 'static_assert']: s#26
[#458 'switch']: s#364
[#458 'var']: s#161
[#458 'while']: s#367
[#458 '{']: s#184
[#458 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#459 '{']: s#184
[#460 'else']: s#534
[#461 '&']: r#288
[#461 '(']: r#288
[#461 '*']: r#288
[#461 ';']: r#288
[#461 'break']: r#288
[#461 'const']: r#288
[#461 'continue']: r#288
[#461 'continuing']: r#288
[#461 'discard']: r#288
[#461 'else']: r#288
[#461 'fallthrough']: r#288
[#461 'for']: r#288
[#461 'if']: r#288
[#461 'let']: r#288
[#461 'loop']: r#288
[#461 'return']: r#288
[#461 'static_assert']: r#288
[#461 'switch']: r#288
[#461 'var']: r#288
[#461 'while']: r#288
[#461 '{']: r#288
[#461 '}']: r#288
[#461 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#288
[#462 'else']: s#463
[#463 'if']: s#530
[#464 ';']: r#289
[#465 ';']: r#290
[#466 '&']: r#291
[#466 '(']: r#291
[#466 '*']: r#291
[#466 ';']: r#291
[#466 'break']: r#291
[#466 'const']: r#291
[#466 'continue']: r#291
[#466 'continuing']: r#291
[#466 'discard']: r#291
[#466 'fallthrough']: r#291
[#466 'for']: r#291
[#466 'if']: r#291
[#466 'let']: r#291
[#466 'loop']: r#291
[#466 'return']: r#291
[#466 'static_assert']: r#291
[#466 'switch']: r#291
[#466 'var']: r#291
[#466 'while']: r#291
[#466 '{']: r#291
[#466 '}']: r#291
[#466 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#291
[#467 '&']: r#292
[#467 '(']: r#292
[#467 '*']: r#292
[#467 ';']: r#292
[#467 'break']: r#292
[#467 'const']: r#292
[#467 'continue']: r#292
[#467 'continuing']: r#292
[#467 'discard']: r#292
[#467 'fallthrough']: r#292
[#467 'for']: r#292
[#467 'if']: r#292
[#467 'let']: r#292
[#467 'loop']: r#292
[#467 'return']: r#292
[#467 'static_assert']: r#292
[#467 'switch']: r#292
[#467 'var']: r#292
[#467 'while']: r#292
[#467 '{']: r#292
[#467 '}']: r#292
[#467 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#292
[#468 '&']: r#293
[#468 '(']: r#293
[#468 '*']: r#293
[#468 ';']: r#293
[#468 'break']: r#293
[#468 'const']: r#293
[#468 'continue']: r#293
[#468 'continuing']: r#293
[#468 'discard']: r#293
[#468 'fallthrough']: r#293
[#468 'for']: r#293
[#468 'if']: r#293
[#468 'let']: r#293
[#468 'loop']: r#293
[#468 'return']: r#293
[#468 'static_assert']: r#293
[#468 'switch']: r#293
[#468 'var']: r#293
[#468 'while']: r#293
[#468 '{']: r#293
[#468 '}']: r#293
[#468 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#293
[#469 '&']: r#294
[#469 '(']: r#294
[#469 '*']: r#294
[#469 ';']: r#294
[#469 'break']: r#294
[#469 'const']: r#294
[#469 'continue']: r#294
[#469 'continuing']: r#294
[#469 'discard']: r#294
[#469 'fallthrough']: r#294
[#469 'for']: r#294
[#469 'if']: r#294
[#469 'let']: r#294
[#469 'loop']: r#294
[#469 'return']: r#294
[#469 'static_assert']: r#294
[#469 'switch']: r#294
[#469 'var']: r#294
[#469 'while']: r#294
[#469 '{']: r#294
[#469 '}']: r#294
[#469 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#294
[#470 '&']: r#295
[#470 '(']: r#295
[#470 '*']: r#295
[#470 ';']: r#295
[#470 'break']: r#295
[#470 'const']: r#295
[#470 'continue']: r#295
[#470 'continuing']: r#295
[#470 'discard']: r#295
[#470 'fallthrough']: r#295
[#470 'for']: r#295
[#470 'if']: r#295
[#470 'let']: r#295
[#470 'loop']: r#295
[#470 'return']: r#295
[#470 'static_assert']: r#295
[#470 'switch']: r#295
[#470 'var']: r#295
[#470 'while']: r#295
[#470 '{']: r#295
[#470 '}']: r#295
[#470 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#295
[#471 '&']: r#296
[#471 '(']: r#296
[#471 '*']: r#296
[#471 ';']: r#296
[#471 'break']: r#296
[#471 'const']: r#296
[#471 'continue']: r#296
[#471 'continuing']: r#296
[#471 'discard']: r#296
[#471 'fallthrough']: r#296
[#471 'for']: r#296
[#471 'if']: r#296
[#471 'let']: r#296
[#471 'loop']: r#296
[#471 'return']: r#296
[#471 'static_assert']: r#296
[#471 'switch']: r#296
[#471 'var']: r#296
[#471 'while']: r#296
[#471 '{']: r#296
[#471 '}']: r#296
[#471 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#296
[#472 '&']: r#297
[#472 '(']: r#297
[#472 '*']: r#297
[#472 ';']: r#297
[#472 'break']: r#297
[#472 'const']: r#297
[#472 'continue']: r#297
[#472 'continuing']: r#297
[#472 'discard']: r#297
[#472 'fallthrough']: r#297
[#472 'for']: r#297
[#472 'if']: r#297
[#472 'let']: r#297
[#472 'loop']: r#297
[#472 'return']: r#297
[#472 'static_assert']: r#297
[#472 'switch']: r#297
[#472 'var']: r#297
[#472 'while']: r#297
[#472 '{']: r#297
[#472 '}']: r#297
[#472 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#297
[#473 '&']: r#298
[#473 '(']: r#298
[#473 '*']: r#298
[#473 ';']: r#298
[#473 'break']: r#298
[#473 'const']: r#298
[#473 'continue']: r#298
[#473 'continuing']: r#298
[#473 'discard']: r#298
[#473 'fallthrough']: r#298
[#473 'for']: r#298
[#473 'if']: r#298
[#473 'let']: r#298
[#473 'loop']: r#298
[#473 'return']: r#298
[#473 'static_assert']: r#298
[#473 'switch']: r#298
[#473 'var']: r#298
[#473 'while']: r#298
[#473 '{']: r#298
[#473 '}']: r#298
[#473 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#298
[#474 '&']: r#299
[#474 '(']: r#299
[#474 '*']: r#299
[#474 ';']: r#299
[#474 'break']: r#299
[#474 'const']: r#299
[#474 'continue']: r#299
[#474 'continuing']: r#299
[#474 'discard']: r#299
[#474 'fallthrough']: r#299
[#474 'for']: r#299
[#474 'if']: r#299
[#474 'let']: r#299
[#474 'loop']: r#299
[#474 'return']: r#299
[#474 'static_assert']: r#299
[#474 'switch']: r#299
[#474 'var']: r#299
[#474 'while']: r#299
[#474 '{']: r#299
[#474 '}']: r#299
[#474 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#299
[#475 '&']: r#300
[#475 '(']: r#300
[#475 '*']: r#300
[#475 ';']: r#300
[#475 'break']: r#300
[#475 'const']: r#300
[#475 'continue']: r#300
[#475 'continuing']: r#300
[#475 'discard']: r#300
[#475 'fallthrough']: r#300
[#475 'for']: r#300
[#475 'if']: r#300
[#475 'let']: r#300
[#475 'loop']: r#300
[#475 'return']: r#300
[#475 'static_assert']: r#300
[#475 'switch']: r#300
[#475 'var']: r#300
[#475 'while']: r#300
[#475 '{']: r#300
[#475 '}']: r#300
[#475 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#300
[#476 '}']: r#301
[#477 '&']: r#302
[#477 '(']: r#302
[#477 '*']: r#302
[#477 ';']: r#302
[#477 '@']: r#302
[#477 'break']: r#302
[#477 'const']: r#302
[#477 'continue']: r#302
[#477 'continuing']: r#302
[#477 'discard']: r#302
[#477 'else']: r#302
[#477 'fallthrough']: r#302
[#477 'fn']: r#302
[#477 'for']: r#302
[#477 'if']: r#302
[#477 'let']: r#302
[#477 'loop']: r#302
[#477 'override']: r#302
[#477 'return']: r#302
[#477 'static_assert']: r#302
[#477 'struct']: r#302
[#477 'switch']: r#302
[#477 'type']: r#302
[#477 'var']: r#302
[#477 'while']: r#302
[#477 '{']: r#302
[#477 '}']: r#302
[#477 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#302
[#477 EndOfText]: r#302
[#478 '&']: r#303
[#478 '(']: r#303
[#478 '*']: r#303
[#478 ';']: r#303
[#478 '@']: r#303
[#478 'break']: r#303
[#478 'case']: r#303
[#478 'const']: r#303
[#478 'continue']: r#303
[#478 'continuing']: r#303
[#478 'default']: r#303
[#478 'discard']: r#303
[#478 'else']: r#303
[#478 'fallthrough']: r#303
[#478 'fn']: r#303
[#478 'for']: r#303
[#478 'if']: r#303
[#478 'let']: r#303
[#478 'loop']: r#303
[#478 'override']: r#303
[#478 'return']: r#303
[#478 'static_assert']: r#303
[#478 'struct']: r#303
[#478 'switch']: r#303
[#478 'type']: r#303
[#478 'var']: r#303
[#478 'while']: r#303
[#478 '{']: r#303
[#478 '}']: r#303
[#478 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#303
[#478 EndOfText]: r#303
[#479 'read']: s#527
[#479 'read_write']: s#529
[#479 'write']: s#528
[#480 '(']: r#304
[#480 ')']: r#304
[#480 ',']: r#304
[#480 ';']: r#304
[#480 '=']: r#304
[#480 '>']: r#304
[#480 '{']: r#304
[#480 '}']: r#304
[#481 '(']: r#305
[#481 ')']: r#305
[#481 ',']: r#305
[#481 ';']: r#305
[#481 '=']: r#305
[#481 '>']: r#305
[#481 '{']: r#305
[#481 '}']: r#305
[#482 'array']: s#313
[#482 'bool']: s#88
[#482 'f16']: s#117
[#482 'f32']: s#116
[#482 'i32']: s#118
[#482 'ptr']: s#120
[#482 'sampler']: s#134
[#482 'sampler_comparison']: s#135
[#482 'texture_1d']: s#141
[#482 'texture_2d']: s#142
[#482 'texture_2d_array']: s#143
[#482 'texture_3d']: s#144
[#482 'texture_cube']: s#145
[#482 'texture_cube_array']: s#146
[#482 'texture_depth_2d']: s#136
[#482 'texture_depth_2d_array']: s#137
[#482 'texture_depth_cube']: s#138
[#482 'texture_depth_cube_array']: s#139
[#482 'texture_depth_multisampled_2d']: s#140
[#482 'texture_multisampled_2d']: s#147
[#482 'texture_storage_1d']: s#148
[#482 'texture_storage_2d']: s#149
[#482 'texture_storage_2d_array']: s#150
[#482 'texture_storage_3d']: s#151
[#482 'u32']: s#119
[#482 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#483 '>']: s#231
[#484 '!']: s#70
[#484 '&']: s#73
[#484 '(']: s#115
[#484 '*']: s#72
[#484 '-']: s#69
[#484 'array']: s#83
[#484 'bitcast']: s#78
[#484 'bool']: s#88
[#484 'f16']: s#117
[#484 'f32']: s#116
[#484 'false']: s#114
[#484 'i32']: s#118
[#484 'mat2x2']: s#99
[#484 'mat2x3']: s#100
[#484 'mat2x4']: s#101
[#484 'mat3x2']: s#102
[#484 'mat3x3']: s#103
[#484 'mat3x4']: s#104
[#484 'mat4x2']: s#105
[#484 'mat4x3']: s#106
[#484 'mat4x4']: s#107
[#484 'ptr']: s#120
[#484 'sampler']: s#134
[#484 'sampler_comparison']: s#135
[#484 'texture_1d']: s#141
[#484 'texture_2d']: s#142
[#484 'texture_2d_array']: s#143
[#484 'texture_3d']: s#144
[#484 'texture_cube']: s#145
[#484 'texture_cube_array']: s#146
[#484 'texture_depth_2d']: s#136
[#484 'texture_depth_2d_array']: s#137
[#484 'texture_depth_cube']: s#138
[#484 'texture_depth_cube_array']: s#139
[#484 'texture_depth_multisampled_2d']: s#140
[#484 'texture_multisampled_2d']: s#147
[#484 'texture_storage_1d']: s#148
[#484 'texture_storage_2d']: s#149
[#484 'texture_storage_2d_array']: s#150
[#484 'texture_storage_3d']: s#151
[#484 'true']: s#113
[#484 'u32']: s#119
[#484 'vec2']: s#96
[#484 'vec3']: s#97
[#484 'vec4']: s#98
[#484 '~']: s#71
[#484 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#484 /0[fh]/]: s#129
[#484 /0[iu]?/]: s#109
[#484 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#484 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#484 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#484 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#484 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#484 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#484 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#484 /[1-9][0-9]*[fh]/]: s#130
[#484 /[1-9][0-9]*[iu]?/]: s#110
[#485 '(']: s#115
[#486 '!']: r#306
[#486 '&']: r#306
[#486 '(']: r#306
[#486 '*']: r#306
[#486 '-']: r#306
[#486 'array']: r#306
[#486 'bitcast']: r#306
[#486 'bool']: r#306
[#486 'f16']: r#306
[#486 'f32']: r#306
[#486 'false']: r#306
[#486 'i32']: r#306
[#486 'mat2x2']: r#306
[#486 'mat2x3']: r#306
[#486 'mat2x4']: r#306
[#486 'mat3x2']: r#306
[#486 'mat3x3']: r#306
[#486 'mat3x4']: r#306
[#486 'mat4x2']: r#306
[#486 'mat4x3']: r#306
[#486 'mat4x4']: r#306
[#486 'ptr']: r#306
[#486 'sampler']: r#306
[#486 'sampler_comparison']: r#306
[#486 'texture_1d']: r#306
[#486 'texture_2d']: r#306
[#486 'texture_2d_array']: r#306
[#486 'texture_3d']: r#306
[#486 'texture_cube']: r#306
[#486 'texture_cube_array']: r#306
[#486 'texture_depth_2d']: r#306
[#486 'texture_depth_2d_array']: r#306
[#486 'texture_depth_cube']: r#306
[#486 'texture_depth_cube_array']: r#306
[#486 'texture_depth_multisampled_2d']: r#306
[#486 'texture_multisampled_2d']: r#306
[#486 'texture_storage_1d']: r#306
[#486 'texture_storage_2d']: r#306
[#486 'texture_storage_2d_array']: r#306
[#486 'texture_storage_3d']: r#306
[#486 'true']: r#306
[#486 'u32']: r#306
[#486 'vec2']: r#306
[#486 'vec3']: r#306
[#486 'vec4']: r#306
[#486 '~']: r#306
[#487 '!']: r#307
[#487 '&']: r#307
[#487 '(']: r#307
[#487 '*']: r#307
[#487 '-']: r#307
[#487 'array']: r#307
[#487 'bitcast']: r#307
[#487 'bool']: r#307
[#487 'f16']: r#307
[#487 'f32']: r#307
[#487 'false']: r#307
[#487 'i32']: r#307
[#487 'mat2x2']: r#307
[#487 'mat2x3']: r#307
[#487 'mat2x4']: r#307
[#487 'mat3x2']: r#307
[#487 'mat3x3']: r#307
[#487 'mat3x4']: r#307
[#487 'mat4x2']: r#307
[#487 'mat4x3']: r#307
[#487 'mat4x4']: r#307
[#487 'ptr']: r#307
[#487 'sampler']: r#307
[#487 'sampler_comparison']: r#307
[#487 'texture_1d']: r#307
[#487 'texture_2d']: r#307
[#487 'texture_2d_array']: r#307
[#487 'texture_3d']: r#307
[#487 'texture_cube']: r#307
[#487 'texture_cube_array']: r#307
[#487 'texture_depth_2d']: r#307
[#487 'texture_depth_2d_array']: r#307
[#487 'texture_depth_cube']: r#307
[#487 'texture_depth_cube_array']: r#307
[#487 'texture_depth_multisampled_2d']: r#307
[#487 'texture_multisampled_2d']: r#307
[#487 'texture_storage_1d']: r#307
[#487 'texture_storage_2d']: r#307
[#487 'texture_storage_2d_array']: r#307
[#487 'texture_storage_3d']: r#307
[#487 'true']: r#307
[#487 'u32']: r#307
[#487 'vec2']: r#307
[#487 'vec3']: r#307
[#487 'vec4']: r#307
[#487 '~']: r#307
[#488 ',']: s#401
[#489 '!=']: r#308
[#489 '%']: r#308
[#489 '&&']: r#308
[#489 '&']: r#308
[#489 ')']: r#308
[#489 '*']: r#308
[#489 '+']: r#308
[#489 ',']: r#308
[#489 '-']: r#308
[#489 '.']: r#308
[#489 '/']: r#308
[#489 ':']: r#308
[#489 ';']: r#308
[#489 '<']: r#308
[#489 '<<']: r#308
[#489 '<=']: r#308
[#489 '==']: r#308
[#489 '>']: r#308
[#489 '>=']: r#308
[#489 '>>']: r#308
[#489 '[']: r#308
[#489 ']']: r#308
[#489 '^']: r#308
[#489 '{']: r#308
[#489 '|']: r#308
[#489 '||']: r#308
[#490 '.']: s#202
[#490 '[']: s#201
[#491 '!=']: r#309
[#491 '%']: r#309
[#491 '%=']: r#309
[#491 '&&']: r#309
[#491 '&']: r#309
[#491 '&=']: r#309
[#491 ')']: r#309
[#491 '*']: r#309
[#491 '*=']: r#309
[#491 '+']: r#309
[#491 '++']: r#309
[#491 '+=']: r#309
[#491 ',']: r#309
[#491 '-']: r#309
[#491 '--']: r#309
[#491 '-=']: r#309
[#491 '.']: r#309
[#491 '/']: r#309
[#491 '/=']: r#309
[#491 ':']: r#309
[#491 ';']: r#309
[#491 '<']: r#309
[#491 '<<']: r#309
[#491 '<<=']: r#309
[#491 '<=']: r#309
[#491 '=']: r#309
[#491 '==']: r#309
[#491 '>']: r#309
[#491 '>=']: r#309
[#491 '>>']: r#309
[#491 '>>=']: r#309
[#491 '[']: r#309
[#491 ']']: r#309
[#491 '^']: r#309
[#491 '^=']: r#309
[#491 '{']: r#309
[#491 '|']: r#309
[#491 '|=']: r#309
[#491 '||']: r#309
[#492 '!=']: r#310
[#492 '%']: r#310
[#492 '%=']: r#310
[#492 '&&']: r#310
[#492 '&']: r#310
[#492 '&=']: r#310
[#492 ')']: r#310
[#492 '*']: r#310
[#492 '*=']: r#310
[#492 '+']: r#310
[#492 '++']: r#310
[#492 '+=']: r#310
[#492 ',']: r#310
[#492 '-']: r#310
[#492 '--']: r#310
[#492 '-=']: r#310
[#492 '/']: r#310
[#492 '/=']: r#310
[#492 ':']: r#310
[#492 ';']: r#310
[#492 '<']: r#310
[#492 '<<']: r#310
[#492 '<<=']: r#310
[#492 '<=']: r#310
[#492 '=']: r#310
[#492 '==']: r#310
[#492 '>']: r#310
[#492 '>=']: r#310
[#492 '>>']: r#310
[#492 '>>=']: r#310
[#492 ']']: r#310
[#492 '^']: r#310
[#492 '^=']: r#310
[#492 '{']: r#310
[#492 '|']: r#310
[#492 '|=']: r#310
[#492 '||']: r#310
[#493 '!=']: r#311
[#493 '%']: r#311
[#493 '%=']: r#311
[#493 '&&']: r#311
[#493 '&']: r#311
[#493 '&=']: r#311
[#493 ')']: r#311
[#493 '*']: r#311
[#493 '*=']: r#311
[#493 '+']: r#311
[#493 '++']: r#311
[#493 '+=']: r#311
[#493 ',']: r#311
[#493 '-']: r#311
[#493 '--']: r#311
[#493 '-=']: r#311
[#493 '/']: r#311
[#493 '/=']: r#311
[#493 ':']: r#311
[#493 ';']: r#311
[#493 '<']: r#311
[#493 '<<']: r#311
[#493 '<<=']: r#311
[#493 '<=']: r#311
[#493 '=']: r#311
[#493 '==']: r#311
[#493 '>']: r#311
[#493 '>=']: r#311
[#493 '>>']: r#311
[#493 '>>=']: r#311
[#493 ']']: r#311
[#493 '^']: r#311
[#493 '^=']: r#311
[#493 '{']: r#311
[#493 '|']: r#311
[#493 '|=']: r#311
[#493 '||']: r#311
[#494 '!=']: r#312
[#494 '%']: r#312
[#494 '%=']: r#312
[#494 '&&']: r#312
[#494 '&']: r#312
[#494 '&=']: r#312
[#494 ')']: r#312
[#494 '*']: r#312
[#494 '*=']: r#312
[#494 '+']: r#312
[#494 '++']: r#312
[#494 '+=']: r#312
[#494 ',']: r#312
[#494 '-']: r#312
[#494 '--']: r#312
[#494 '-=']: r#312
[#494 '/']: r#312
[#494 '/=']: r#312
[#494 ':']: r#312
[#494 ';']: r#312
[#494 '<']: r#312
[#494 '<<']: r#312
[#494 '<<=']: r#312
[#494 '<=']: r#312
[#494 '=']: r#312
[#494 '==']: r#312
[#494 '>']: r#312
[#494 '>=']: r#312
[#494 '>>']: r#312
[#494 '>>=']: r#312
[#494 ']']: r#312
[#494 '^']: r#312
[#494 '^=']: r#312
[#494 '{']: r#312
[#494 '|']: r#312
[#494 '|=']: r#312
[#494 '||']: r#312
[#495 '!=']: r#313
[#495 '%']: r#313
[#495 '%=']: r#313
[#495 '&&']: r#313
[#495 '&']: r#313
[#495 '&=']: r#313
[#495 ')']: r#313
[#495 '*']: r#313
[#495 '*=']: r#313
[#495 '+']: r#313
[#495 '++']: r#313
[#495 '+=']: r#313
[#495 ',']: r#313
[#495 '-']: r#313
[#495 '--']: r#313
[#495 '-=']: r#313
[#495 '/']: r#313
[#495 '/=']: r#313
[#495 ':']: r#313
[#495 ';']: r#313
[#495 '<']: r#313
[#495 '<<']: r#313
[#495 '<<=']: r#313
[#495 '<=']: r#313
[#495 '=']: r#313
[#495 '==']: r#313
[#495 '>']: r#313
[#495 '>=']: r#313
[#495 '>>']: r#313
[#495 '>>=']: r#313
[#495 ']']: r#313
[#495 '^']: r#313
[#495 '^=']: r#313
[#495 '{']: r#313
[#495 '|']: r#313
[#495 '|=']: r#313
[#495 '||']: r#313
[#496 '@']: r#314
[#496 'array']: r#314
[#496 'bool']: r#314
[#496 'f16']: r#314
[#496 'f32']: r#314
[#496 'fn']: r#314
[#496 'i32']: r#314
[#496 'override']: r#314
[#496 'ptr']: r#314
[#496 'sampler']: r#314
[#496 'sampler_comparison']: r#314
[#496 'texture_1d']: r#314
[#496 'texture_2d']: r#314
[#496 'texture_2d_array']: r#314
[#496 'texture_3d']: r#314
[#496 'texture_cube']: r#314
[#496 'texture_cube_array']: r#314
[#496 'texture_depth_2d']: r#314
[#496 'texture_depth_2d_array']: r#314
[#496 'texture_depth_cube']: r#314
[#496 'texture_depth_cube_array']: r#314
[#496 'texture_depth_multisampled_2d']: r#314
[#496 'texture_multisampled_2d']: r#314
[#496 'texture_storage_1d']: r#314
[#496 'texture_storage_2d']: r#314
[#496 'texture_storage_2d_array']: r#314
[#496 'texture_storage_3d']: r#314
[#496 'u32']: r#314
[#496 'var']: r#314
[#496 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#314
[#497 '!']: s#70
[#497 '&']: s#73
[#497 '(']: s#115
[#497 ')']: r#315
[#497 '*']: s#72
[#497 '-']: s#69
[#497 'array']: s#83
[#497 'bitcast']: s#78
[#497 'bool']: s#88
[#497 'f16']: s#117
[#497 'f32']: s#116
[#497 'false']: s#114
[#497 'i32']: s#118
[#497 'mat2x2']: s#99
[#497 'mat2x3']: s#100
[#497 'mat2x4']: s#101
[#497 'mat3x2']: s#102
[#497 'mat3x3']: s#103
[#497 'mat3x4']: s#104
[#497 'mat4x2']: s#105
[#497 'mat4x3']: s#106
[#497 'mat4x4']: s#107
[#497 'ptr']: s#120
[#497 'sampler']: s#134
[#497 'sampler_comparison']: s#135
[#497 'texture_1d']: s#141
[#497 'texture_2d']: s#142
[#497 'texture_2d_array']: s#143
[#497 'texture_3d']: s#144
[#497 'texture_cube']: s#145
[#497 'texture_cube_array']: s#146
[#497 'texture_depth_2d']: s#136
[#497 'texture_depth_2d_array']: s#137
[#497 'texture_depth_cube']: s#138
[#497 'texture_depth_cube_array']: s#139
[#497 'texture_depth_multisampled_2d']: s#140
[#497 'texture_multisampled_2d']: s#147
[#497 'texture_storage_1d']: s#148
[#497 'texture_storage_2d']: s#149
[#497 'texture_storage_2d_array']: s#150
[#497 'texture_storage_3d']: s#151
[#497 'true']: s#113
[#497 'u32']: s#119
[#497 'vec2']: s#96
[#497 'vec3']: s#97
[#497 'vec4']: s#98
[#497 '~']: s#71
[#497 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#497 /0[fh]/]: s#129
[#497 /0[iu]?/]: s#109
[#497 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#497 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#497 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#497 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#497 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#497 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#497 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#497 /[1-9][0-9]*[fh]/]: s#130
[#497 /[1-9][0-9]*[iu]?/]: s#110
[#498 ')']: s#316
[#499 '@']: r#316
[#499 'array']: r#316
[#499 'bool']: r#316
[#499 'f16']: r#316
[#499 'f32']: r#316
[#499 'fn']: r#316
[#499 'i32']: r#316
[#499 'override']: r#316
[#499 'ptr']: r#316
[#499 'sampler']: r#316
[#499 'sampler_comparison']: r#316
[#499 'texture_1d']: r#316
[#499 'texture_2d']: r#316
[#499 'texture_2d_array']: r#316
[#499 'texture_3d']: r#316
[#499 'texture_cube']: r#316
[#499 'texture_cube_array']: r#316
[#499 'texture_depth_2d']: r#316
[#499 'texture_depth_2d_array']: r#316
[#499 'texture_depth_cube']: r#316
[#499 'texture_depth_cube_array']: r#316
[#499 'texture_depth_multisampled_2d']: r#316
[#499 'texture_multisampled_2d']: r#316
[#499 'texture_storage_1d']: r#316
[#499 'texture_storage_2d']: r#316
[#499 'texture_storage_2d_array']: r#316
[#499 'texture_storage_3d']: r#316
[#499 'u32']: r#316
[#499 'var']: r#316
[#499 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#316
[#500 ')']: r#315
[#501 '@']: r#317
[#501 'array']: r#317
[#501 'bool']: r#317
[#501 'f16']: r#317
[#501 'f32']: r#317
[#501 'fn']: r#317
[#501 'i32']: r#317
[#501 'override']: r#317
[#501 'ptr']: r#317
[#501 'sampler']: r#317
[#501 'sampler_comparison']: r#317
[#501 'texture_1d']: r#317
[#501 'texture_2d']: r#317
[#501 'texture_2d_array']: r#317
[#501 'texture_3d']: r#317
[#501 'texture_cube']: r#317
[#501 'texture_cube_array']: r#317
[#501 'texture_depth_2d']: r#317
[#501 'texture_depth_2d_array']: r#317
[#501 'texture_depth_cube']: r#317
[#501 'texture_depth_cube_array']: r#317
[#501 'texture_depth_multisampled_2d']: r#317
[#501 'texture_multisampled_2d']: r#317
[#501 'texture_storage_1d']: r#317
[#501 'texture_storage_2d']: r#317
[#501 'texture_storage_2d_array']: r#317
[#501 'texture_storage_3d']: r#317
[#501 'u32']: r#317
[#501 'var']: r#317
[#501 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#317
[#502 '@']: r#318
[#502 'array']: r#318
[#502 'bool']: r#318
[#502 'f16']: r#318
[#502 'f32']: r#318
[#502 'fn']: r#318
[#502 'i32']: r#318
[#502 'override']: r#318
[#502 'ptr']: r#318
[#502 'sampler']: r#318
[#502 'sampler_comparison']: r#318
[#502 'texture_1d']: r#318
[#502 'texture_2d']: r#318
[#502 'texture_2d_array']: r#318
[#502 'texture_3d']: r#318
[#502 'texture_cube']: r#318
[#502 'texture_cube_array']: r#318
[#502 'texture_depth_2d']: r#318
[#502 'texture_depth_2d_array']: r#318
[#502 'texture_depth_cube']: r#318
[#502 'texture_depth_cube_array']: r#318
[#502 'texture_depth_multisampled_2d']: r#318
[#502 'texture_multisampled_2d']: r#318
[#502 'texture_storage_1d']: r#318
[#502 'texture_storage_2d']: r#318
[#502 'texture_storage_2d_array']: r#318
[#502 'texture_storage_3d']: r#318
[#502 'u32']: r#318
[#502 'var']: r#318
[#502 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#318
[#503 ')']: r#315
[#503 'center']: s#510
[#503 'centroid']: s#511
[#503 'sample']: s#512
[#504 '@']: r#319
[#504 'array']: r#319
[#504 'bool']: r#319
[#504 'f16']: r#319
[#504 'f32']: r#319
[#504 'fn']: r#319
[#504 'i32']: r#319
[#504 'override']: r#319
[#504 'ptr']: r#319
[#504 'sampler']: r#319
[#504 'sampler_comparison']: r#319
[#504 'texture_1d']: r#319
[#504 'texture_2d']: r#319
[#504 'texture_2d_array']: r#319
[#504 'texture_3d']: r#319
[#504 'texture_cube']: r#319
[#504 'texture_cube_array']: r#319
[#504 'texture_depth_2d']: r#319
[#504 'texture_depth_2d_array']: r#319
[#504 'texture_depth_cube']: r#319
[#504 'texture_depth_cube_array']: r#319
[#504 'texture_depth_multisampled_2d']: r#319
[#504 'texture_multisampled_2d']: r#319
[#504 'texture_storage_1d']: r#319
[#504 'texture_storage_2d']: r#319
[#504 'texture_storage_2d_array']: r#319
[#504 'texture_storage_3d']: r#319
[#504 'u32']: r#319
[#504 'var']: r#319
[#504 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#319
[#505 '@']: r#320
[#505 'array']: r#320
[#505 'bool']: r#320
[#505 'f16']: r#320
[#505 'f32']: r#320
[#505 'fn']: r#320
[#505 'i32']: r#320
[#505 'override']: r#320
[#505 'ptr']: r#320
[#505 'sampler']: r#320
[#505 'sampler_comparison']: r#320
[#505 'texture_1d']: r#320
[#505 'texture_2d']: r#320
[#505 'texture_2d_array']: r#320
[#505 'texture_3d']: r#320
[#505 'texture_cube']: r#320
[#505 'texture_cube_array']: r#320
[#505 'texture_depth_2d']: r#320
[#505 'texture_depth_2d_array']: r#320
[#505 'texture_depth_cube']: r#320
[#505 'texture_depth_cube_array']: r#320
[#505 'texture_depth_multisampled_2d']: r#320
[#505 'texture_multisampled_2d']: r#320
[#505 'texture_storage_1d']: r#320
[#505 'texture_storage_2d']: r#320
[#505 'texture_storage_2d_array']: r#320
[#505 'texture_storage_3d']: r#320
[#505 'u32']: r#320
[#505 'var']: r#320
[#505 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#320
[#506 '@']: r#321
[#506 'array']: r#321
[#506 'bool']: r#321
[#506 'f16']: r#321
[#506 'f32']: r#321
[#506 'fn']: r#321
[#506 'i32']: r#321
[#506 'override']: r#321
[#506 'ptr']: r#321
[#506 'sampler']: r#321
[#506 'sampler_comparison']: r#321
[#506 'texture_1d']: r#321
[#506 'texture_2d']: r#321
[#506 'texture_2d_array']: r#321
[#506 'texture_3d']: r#321
[#506 'texture_cube']: r#321
[#506 'texture_cube_array']: r#321
[#506 'texture_depth_2d']: r#321
[#506 'texture_depth_2d_array']: r#321
[#506 'texture_depth_cube']: r#321
[#506 'texture_depth_cube_array']: r#321
[#506 'texture_depth_multisampled_2d']: r#321
[#506 'texture_multisampled_2d']: r#321
[#506 'texture_storage_1d']: r#321
[#506 'texture_storage_2d']: r#321
[#506 'texture_storage_2d_array']: r#321
[#506 'texture_storage_3d']: r#321
[#506 'u32']: r#321
[#506 'var']: r#321
[#506 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#321
[#507 '@']: r#322
[#507 'array']: r#322
[#507 'bool']: r#322
[#507 'f16']: r#322
[#507 'f32']: r#322
[#507 'fn']: r#322
[#507 'i32']: r#322
[#507 'override']: r#322
[#507 'ptr']: r#322
[#507 'sampler']: r#322
[#507 'sampler_comparison']: r#322
[#507 'texture_1d']: r#322
[#507 'texture_2d']: r#322
[#507 'texture_2d_array']: r#322
[#507 'texture_3d']: r#322
[#507 'texture_cube']: r#322
[#507 'texture_cube_array']: r#322
[#507 'texture_depth_2d']: r#322
[#507 'texture_depth_2d_array']: r#322
[#507 'texture_depth_cube']: r#322
[#507 'texture_depth_cube_array']: r#322
[#507 'texture_depth_multisampled_2d']: r#322
[#507 'texture_multisampled_2d']: r#322
[#507 'texture_storage_1d']: r#322
[#507 'texture_storage_2d']: r#322
[#507 'texture_storage_2d_array']: r#322
[#507 'texture_storage_3d']: r#322
[#507 'u32']: r#322
[#507 'var']: r#322
[#507 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#322
[#508 '@']: r#323
[#508 'array']: r#323
[#508 'bool']: r#323
[#508 'f16']: r#323
[#508 'f32']: r#323
[#508 'fn']: r#323
[#508 'i32']: r#323
[#508 'override']: r#323
[#508 'ptr']: r#323
[#508 'sampler']: r#323
[#508 'sampler_comparison']: r#323
[#508 'texture_1d']: r#323
[#508 'texture_2d']: r#323
[#508 'texture_2d_array']: r#323
[#508 'texture_3d']: r#323
[#508 'texture_cube']: r#323
[#508 'texture_cube_array']: r#323
[#508 'texture_depth_2d']: r#323
[#508 'texture_depth_2d_array']: r#323
[#508 'texture_depth_cube']: r#323
[#508 'texture_depth_cube_array']: r#323
[#508 'texture_depth_multisampled_2d']: r#323
[#508 'texture_multisampled_2d']: r#323
[#508 'texture_storage_1d']: r#323
[#508 'texture_storage_2d']: r#323
[#508 'texture_storage_2d_array']: r#323
[#508 'texture_storage_3d']: r#323
[#508 'u32']: r#323
[#508 'var']: r#323
[#508 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#323
[#509 ',']: s#401
[#510 ')']: r#324
[#510 ',']: r#324
[#511 ')']: r#325
[#511 ',']: r#325
[#512 ')']: r#326
[#512 ',']: r#326
[#513 '@']: r#327
[#513 'array']: r#327
[#513 'bool']: r#327
[#513 'f16']: r#327
[#513 'f32']: r#327
[#513 'fn']: r#327
[#513 'i32']: r#327
[#513 'override']: r#327
[#513 'ptr']: r#327
[#513 'sampler']: r#327
[#513 'sampler_comparison']: r#327
[#513 'texture_1d']: r#327
[#513 'texture_2d']: r#327
[#513 'texture_2d_array']: r#327
[#513 'texture_3d']: r#327
[#513 'texture_cube']: r#327
[#513 'texture_cube_array']: r#327
[#513 'texture_depth_2d']: r#327
[#513 'texture_depth_2d_array']: r#327
[#513 'texture_depth_cube']: r#327
[#513 'texture_depth_cube_array']: r#327
[#513 'texture_depth_multisampled_2d']: r#327
[#513 'texture_multisampled_2d']: r#327
[#513 'texture_storage_1d']: r#327
[#513 'texture_storage_2d']: r#327
[#513 'texture_storage_2d_array']: r#327
[#513 'texture_storage_3d']: r#327
[#513 'u32']: r#327
[#513 'var']: r#327
[#513 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#327
[#514 ',']: s#401
[#515 '!=']: r#328
[#515 '%']: r#328
[#515 '%=']: r#328
[#515 '&&']: r#328
[#515 '&']: r#328
[#515 '&=']: r#328
[#515 ')']: r#328
[#515 '*']: r#328
[#515 '*=']: r#328
[#515 '+']: r#328
[#515 '++']: r#328
[#515 '+=']: r#328
[#515 ',']: r#328
[#515 '-']: r#328
[#515 '--']: r#328
[#515 '-=']: r#328
[#515 '/']: r#328
[#515 '/=']: r#328
[#515 ':']: r#328
[#515 ';']: r#328
[#515 '<']: r#328
[#515 '<<']: r#328
[#515 '<<=']: r#328
[#515 '<=']: r#328
[#515 '=']: r#328
[#515 '==']: r#328
[#515 '>']: r#328
[#515 '>=']: r#328
[#515 '>>']: r#328
[#515 '>>=']: r#328
[#515 ']']: r#328
[#515 '^']: r#328
[#515 '^=']: r#328
[#515 '{']: r#328
[#515 '|']: r#328
[#515 '|=']: r#328
[#515 '||']: r#328
[#516 '!=']: r#329
[#516 '%']: r#329
[#516 '%=']: r#329
[#516 '&&']: r#329
[#516 '&']: r#329
[#516 '&=']: r#329
[#516 ')']: r#329
[#516 '*']: r#329
[#516 '*=']: r#329
[#516 '+']: r#329
[#516 '++']: r#329
[#516 '+=']: r#329
[#516 ',']: r#329
[#516 '-']: r#329
[#516 '--']: r#329
[#516 '-=']: r#329
[#516 '/']: r#329
[#516 '/=']: r#329
[#516 ':']: r#329
[#516 ';']: r#329
[#516 '<']: r#329
[#516 '<<']: r#329
[#516 '<<=']: r#329
[#516 '<=']: r#329
[#516 '=']: r#329
[#516 '==']: r#329
[#516 '>']: r#329
[#516 '>=']: r#329
[#516 '>>']: r#329
[#516 '>>=']: r#329
[#516 ']']: r#329
[#516 '^']: r#329
[#516 '^=']: r#329
[#516 '{']: r#329
[#516 '|']: r#329
[#516 '|=']: r#329
[#516 '||']: r#329
[#517 ')']: r#330
[#518 ')']: r#331
[#519 '!=']: r#332
[#519 '%']: r#332
[#519 '&&']: r#332
[#519 '&']: r#332
[#519 ')']: r#332
[#519 '*']: r#332
[#519 '+']: r#332
[#519 ',']: r#332
[#519 '-']: r#332
[#519 '.']: r#332
[#519 '/']: r#332
[#519 ':']: r#332
[#519 ';']: r#332
[#519 '<']: r#332
[#519 '<<']: r#332
[#519 '<=']: r#332
[#519 '==']: r#332
[#519 '>']: r#332
[#519 '>=']: r#332
[#519 '>>']: r#332
[#519 '[']: r#332
[#519 ']']: r#332
[#519 '^']: r#332
[#519 '{']: r#332
[#519 '|']: r#332
[#519 '||']: r#332
[#520 '>']: r#333
[#521 '+']: s#219
[#521 '-']: s#69
[#521 '>']: r#334
[#522 '>']: r#335
[#523 '%']: r#31
[#523 '&']: r#28
[#523 '*']: r#31
[#523 '+']: r#31
[#523 '-']: r#31
[#523 '/']: r#31
[#523 '>']: r#31
[#523 '^']: r#30
[#523 '|']: r#29
[#524 '(']: r#336
[#524 ')']: r#336
[#524 ',']: r#336
[#524 ';']: r#336
[#524 '=']: r#336
[#524 '>']: r#336
[#524 '{']: r#336
[#524 '}']: r#336
[#525 ',']: s#401
[#526 '>']: s#231
[#527 '>']: r#337
[#528 '>']: r#338
[#529 '>']: r#339
[#530 '!']: s#70
[#530 '&']: s#73
[#530 '(']: s#115
[#530 '*']: s#72
[#530 '-']: s#69
[#530 'array']: s#83
[#530 'bitcast']: s#78
[#530 'bool']: s#88
[#530 'f16']: s#117
[#530 'f32']: s#116
[#530 'false']: s#114
[#530 'i32']: s#118
[#530 'mat2x2']: s#99
[#530 'mat2x3']: s#100
[#530 'mat2x4']: s#101
[#530 'mat3x2']: s#102
[#530 'mat3x3']: s#103
[#530 'mat3x4']: s#104
[#530 'mat4x2']: s#105
[#530 'mat4x3']: s#106
[#530 'mat4x4']: s#107
[#530 'ptr']: s#120
[#530 'sampler']: s#134
[#530 'sampler_comparison']: s#135
[#530 'texture_1d']: s#141
[#530 'texture_2d']: s#142
[#530 'texture_2d_array']: s#143
[#530 'texture_3d']: s#144
[#530 'texture_cube']: s#145
[#530 'texture_cube_array']: s#146
[#530 'texture_depth_2d']: s#136
[#530 'texture_depth_2d_array']: s#137
[#530 'texture_depth_cube']: s#138
[#530 'texture_depth_cube_array']: s#139
[#530 'texture_depth_multisampled_2d']: s#140
[#530 'texture_multisampled_2d']: s#147
[#530 'texture_storage_1d']: s#148
[#530 'texture_storage_2d']: s#149
[#530 'texture_storage_2d_array']: s#150
[#530 'texture_storage_3d']: s#151
[#530 'true']: s#113
[#530 'u32']: s#119
[#530 'vec2']: s#96
[#530 'vec3']: s#97
[#530 'vec4']: s#98
[#530 '~']: s#71
[#530 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#530 /0[fh]/]: s#129
[#530 /0[iu]?/]: s#109
[#530 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#530 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#530 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#530 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#530 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#530 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#530 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#530 /[1-9][0-9]*[fh]/]: s#130
[#530 /[1-9][0-9]*[iu]?/]: s#110
[#531 '&']: r#340
[#531 '(']: r#340
[#531 '*']: r#340
[#531 ';']: r#340
[#531 'break']: r#340
[#531 'const']: r#340
[#531 'continue']: r#340
[#531 'continuing']: r#340
[#531 'discard']: r#340
[#531 'else']: r#340
[#531 'fallthrough']: r#340
[#531 'for']: r#340
[#531 'if']: r#340
[#531 'let']: r#340
[#531 'loop']: r#340
[#531 'return']: r#340
[#531 'static_assert']: r#340
[#531 'switch']: r#340
[#531 'var']: r#340
[#531 'while']: r#340
[#531 '{']: r#340
[#531 '}']: r#340
[#531 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#340
[#532 '&']: r#341
[#532 '(']: r#341
[#532 '*']: r#341
[#532 ';']: r#341
[#532 'break']: r#341
[#532 'const']: r#341
[#532 'continue']: r#341
[#532 'continuing']: r#341
[#532 'discard']: r#341
[#532 'fallthrough']: r#341
[#532 'for']: r#341
[#532 'if']: r#341
[#532 'let']: r#341
[#532 'loop']: r#341
[#532 'return']: r#341
[#532 'static_assert']: r#341
[#532 'switch']: r#341
[#532 'var']: r#341
[#532 'while']: r#341
[#532 '{']: r#341
[#532 '}']: r#341
[#532 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#341
[#533 '&']: r#342
[#533 '(']: r#342
[#533 '*']: r#342
[#533 ';']: r#342
[#533 'break']: r#342
[#533 'const']: r#342
[#533 'continue']: r#342
[#533 'continuing']: r#342
[#533 'discard']: r#342
[#533 'fallthrough']: r#342
[#533 'for']: r#342
[#533 'if']: r#342
[#533 'let']: r#342
[#533 'loop']: r#342
[#533 'return']: r#342
[#533 'static_assert']: r#342
[#533 'switch']: r#342
[#533 'var']: r#342
[#533 'while']: r#342
[#533 '{']: r#342
[#533 '}']: r#342
[#533 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#342
[#534 '{']: s#184
[#535 'case']: s#586
[#535 'default']: s#587
[#536 'continuing']: s#582
[#537 'continuing']: r#343
[#537 '}']: r#343
[#538 '&']: s#73
[#538 '*']: s#72
[#538 ';']: s#19
[#538 'break']: s#372
[#538 'const']: s#371
[#538 'continue']: s#373
[#538 'discard']: s#356
[#538 'for']: s#366
[#538 'if']: s#375
[#538 'let']: s#370
[#538 'loop']: s#365
[#538 'return']: s#362
[#538 'static_assert']: s#26
[#538 'switch']: s#364
[#538 'var']: s#161
[#538 'while']: s#367
[#538 '{']: s#184
[#538 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#539 ')']: s#316
[#540 ';']: s#19
[#541 ';']: r#344
[#542 ';']: r#345
[#543 ';']: r#346
[#544 ';']: r#347
[#545 ';']: r#348
[#546 ';']: r#349
[#547 '&']: r#350
[#547 '(']: r#350
[#547 '*']: r#350
[#547 ';']: r#350
[#547 'break']: r#350
[#547 'const']: r#350
[#547 'continue']: r#350
[#547 'continuing']: r#350
[#547 'discard']: r#350
[#547 'fallthrough']: r#350
[#547 'for']: r#350
[#547 'if']: r#350
[#547 'let']: r#350
[#547 'loop']: r#350
[#547 'return']: r#350
[#547 'static_assert']: r#350
[#547 'switch']: r#350
[#547 'var']: r#350
[#547 'while']: r#350
[#547 '{']: r#350
[#547 '}']: r#350
[#547 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#350
[#548 '!']: s#70
[#548 '&']: s#73
[#548 '(']: s#115
[#548 '*']: s#72
[#548 '-']: s#69
[#548 'array']: s#83
[#548 'bitcast']: s#78
[#548 'bool']: s#88
[#548 'f16']: s#117
[#548 'f32']: s#116
[#548 'false']: s#114
[#548 'i32']: s#118
[#548 'mat2x2']: s#99
[#548 'mat2x3']: s#100
[#548 'mat2x4']: s#101
[#548 'mat3x2']: s#102
[#548 'mat3x3']: s#103
[#548 'mat3x4']: s#104
[#548 'mat4x2']: s#105
[#548 'mat4x3']: s#106
[#548 'mat4x4']: s#107
[#548 'ptr']: s#120
[#548 'sampler']: s#134
[#548 'sampler_comparison']: s#135
[#548 'texture_1d']: s#141
[#548 'texture_2d']: s#142
[#548 'texture_2d_array']: s#143
[#548 'texture_3d']: s#144
[#548 'texture_cube']: s#145
[#548 'texture_cube_array']: s#146
[#548 'texture_depth_2d']: s#136
[#548 'texture_depth_2d_array']: s#137
[#548 'texture_depth_cube']: s#138
[#548 'texture_depth_cube_array']: s#139
[#548 'texture_depth_multisampled_2d']: s#140
[#548 'texture_multisampled_2d']: s#147
[#548 'texture_storage_1d']: s#148
[#548 'texture_storage_2d']: s#149
[#548 'texture_storage_2d_array']: s#150
[#548 'texture_storage_3d']: s#151
[#548 'true']: s#113
[#548 'u32']: s#119
[#548 'vec2']: s#96
[#548 'vec3']: s#97
[#548 'vec4']: s#98
[#548 '~']: s#71
[#548 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#548 /0[fh]/]: s#129
[#548 /0[iu]?/]: s#109
[#548 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#548 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#548 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#548 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#548 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#548 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#548 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#548 /[1-9][0-9]*[fh]/]: s#130
[#548 /[1-9][0-9]*[iu]?/]: s#110
[#549 '!']: s#70
[#549 '&']: s#73
[#549 '(']: s#115
[#549 '*']: s#72
[#549 '-']: s#69
[#549 'array']: s#83
[#549 'bitcast']: s#78
[#549 'bool']: s#88
[#549 'f16']: s#117
[#549 'f32']: s#116
[#549 'false']: s#114
[#549 'i32']: s#118
[#549 'mat2x2']: s#99
[#549 'mat2x3']: s#100
[#549 'mat2x4']: s#101
[#549 'mat3x2']: s#102
[#549 'mat3x3']: s#103
[#549 'mat3x4']: s#104
[#549 'mat4x2']: s#105
[#549 'mat4x3']: s#106
[#549 'mat4x4']: s#107
[#549 'ptr']: s#120
[#549 'sampler']: s#134
[#549 'sampler_comparison']: s#135
[#549 'texture_1d']: s#141
[#549 'texture_2d']: s#142
[#549 'texture_2d_array']: s#143
[#549 'texture_3d']: s#144
[#549 'texture_cube']: s#145
[#549 'texture_cube_array']: s#146
[#549 'texture_depth_2d']: s#136
[#549 'texture_depth_2d_array']: s#137
[#549 'texture_depth_cube']: s#138
[#549 'texture_depth_cube_array']: s#139
[#549 'texture_depth_multisampled_2d']: s#140
[#549 'texture_multisampled_2d']: s#147
[#549 'texture_storage_1d']: s#148
[#549 'texture_storage_2d']: s#149
[#549 'texture_storage_2d_array']: s#150
[#549 'texture_storage_3d']: s#151
[#549 'true']: s#113
[#549 'u32']: s#119
[#549 'vec2']: s#96
[#549 'vec3']: s#97
[#549 'vec4']: s#98
[#549 '~']: s#71
[#549 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#549 /0[fh]/]: s#129
[#549 /0[iu]?/]: s#109
[#549 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#549 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#549 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#549 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#549 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#549 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#549 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#549 /[1-9][0-9]*[fh]/]: s#130
[#549 /[1-9][0-9]*[iu]?/]: s#110
[#550 ')']: r#351
[#550 ';']: r#351
[#551 '&']: r#352
[#551 '(']: r#352
[#551 '*']: r#352
[#551 ';']: r#352
[#551 'break']: r#352
[#551 'const']: r#352
[#551 'continue']: r#352
[#551 'continuing']: r#352
[#551 'discard']: r#352
[#551 'else']: r#352
[#551 'fallthrough']: r#352
[#551 'for']: r#352
[#551 'if']: r#352
[#551 'let']: r#352
[#551 'loop']: r#352
[#551 'return']: r#352
[#551 'static_assert']: r#352
[#551 'switch']: r#352
[#551 'var']: r#352
[#551 'while']: r#352
[#551 '{']: r#352
[#551 '}']: r#352
[#551 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#352
[#552 ')']: s#316
[#553 '%=']: r#353
[#553 '&=']: r#353
[#553 ')']: r#353
[#553 '*=']: r#353
[#553 '++']: r#353
[#553 '+=']: r#353
[#553 '--']: r#353
[#553 '-=']: r#353
[#553 '/=']: r#353
[#553 '<<=']: r#353
[#553 '=']: r#353
[#553 '>>=']: r#353
[#553 '^=']: r#353
[#553 '|=']: r#353
[#554 '%=']: r#354
[#554 '&=']: r#354
[#554 ')']: r#354
[#554 '*=']: r#354
[#554 '++']: r#354
[#554 '+=']: r#354
[#554 '--']: r#354
[#554 '-=']: r#354
[#554 '/=']: r#354
[#554 '<<=']: r#354
[#554 '=']: r#354
[#554 '>>=']: r#354
[#554 '^=']: r#354
[#554 '|=']: r#354
[#555 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#355
[#556 ')']: r#356
[#556 ',']: r#356
[#557 ':']: s#176
[#558 '@']: r#357
[#558 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#357
[#559 '@']: r#358
[#559 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#358
[#560 ',']: s#401
[#561 '->']: s#571
[#562 '}']: s#478
[#563 '}']: r#359
[#564 'array']: s#313
[#564 'bool']: s#88
[#564 'f16']: s#117
[#564 'f32']: s#116
[#564 'i32']: s#118
[#564 'ptr']: s#120
[#564 'sampler']: s#134
[#564 'sampler_comparison']: s#135
[#564 'texture_1d']: s#141
[#564 'texture_2d']: s#142
[#564 'texture_2d_array']: s#143
[#564 'texture_3d']: s#144
[#564 'texture_cube']: s#145
[#564 'texture_cube_array']: s#146
[#564 'texture_depth_2d']: s#136
[#564 'texture_depth_2d_array']: s#137
[#564 'texture_depth_cube']: s#138
[#564 'texture_depth_cube_array']: s#139
[#564 'texture_depth_multisampled_2d']: s#140
[#564 'texture_multisampled_2d']: s#147
[#564 'texture_storage_1d']: s#148
[#564 'texture_storage_2d']: s#149
[#564 'texture_storage_2d_array']: s#150
[#564 'texture_storage_3d']: s#151
[#564 'u32']: s#119
[#564 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#565 '>']: r#360
[#566 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#361
[#567 ',']: r#362
[#567 '}']: r#362
[#568 ';']: r#363
[#568 '@']: r#363
[#568 'const']: r#363
[#568 'fn']: r#363
[#568 'override']: r#363
[#568 'static_assert']: r#363
[#568 'struct']: r#363
[#568 'type']: r#363
[#568 'var']: r#363
[#568 EndOfText]: r#363
[#569 '{']: r#364
[#570 '@']: s#32
[#571 '@']: r#365
[#571 'array']: r#365
[#571 'bool']: r#365
[#571 'f16']: r#365
[#571 'f32']: r#365
[#571 'i32']: r#365
[#571 'ptr']: r#365
[#571 'sampler']: r#365
[#571 'sampler_comparison']: r#365
[#571 'texture_1d']: r#365
[#571 'texture_2d']: r#365
[#571 'texture_2d_array']: r#365
[#571 'texture_3d']: r#365
[#571 'texture_cube']: r#365
[#571 'texture_cube_array']: r#365
[#571 'texture_depth_2d']: r#365
[#571 'texture_depth_2d_array']: r#365
[#571 'texture_depth_cube']: r#365
[#571 'texture_depth_cube_array']: r#365
[#571 'texture_depth_multisampled_2d']: r#365
[#571 'texture_multisampled_2d']: r#365
[#571 'texture_storage_1d']: r#365
[#571 'texture_storage_2d']: r#365
[#571 'texture_storage_2d_array']: r#365
[#571 'texture_storage_3d']: r#365
[#571 'u32']: r#365
[#572 ')']: r#366
[#573 ')']: r#367
[#574 '%=']: r#368
[#574 '&=']: r#368
[#574 ')']: r#368
[#574 '*=']: r#368
[#574 '++']: r#368
[#574 '+=']: r#368
[#574 '--']: r#368
[#574 '-=']: r#368
[#574 '.']: r#368
[#574 '/=']: r#368
[#574 '<<=']: r#368
[#574 '=']: r#368
[#574 '>>=']: r#368
[#574 '[']: r#368
[#574 '^=']: r#368
[#574 '|=']: r#368
[#575 ';']: r#369
[#576 ';']: r#370
[#577 '!']: s#70
[#577 '&']: s#73
[#577 '(']: s#115
[#577 '*']: s#72
[#577 '-']: s#69
[#577 'array']: s#83
[#577 'bitcast']: s#78
[#577 'bool']: s#88
[#577 'f16']: s#117
[#577 'f32']: s#116
[#577 'false']: s#114
[#577 'i32']: s#118
[#577 'mat2x2']: s#99
[#577 'mat2x3']: s#100
[#577 'mat2x4']: s#101
[#577 'mat3x2']: s#102
[#577 'mat3x3']: s#103
[#577 'mat3x4']: s#104
[#577 'mat4x2']: s#105
[#577 'mat4x3']: s#106
[#577 'mat4x4']: s#107
[#577 'ptr']: s#120
[#577 'sampler']: s#134
[#577 'sampler_comparison']: s#135
[#577 'texture_1d']: s#141
[#577 'texture_2d']: s#142
[#577 'texture_2d_array']: s#143
[#577 'texture_3d']: s#144
[#577 'texture_cube']: s#145
[#577 'texture_cube_array']: s#146
[#577 'texture_depth_2d']: s#136
[#577 'texture_depth_2d_array']: s#137
[#577 'texture_depth_cube']: s#138
[#577 'texture_depth_cube_array']: s#139
[#577 'texture_depth_multisampled_2d']: s#140
[#577 'texture_multisampled_2d']: s#147
[#577 'texture_storage_1d']: s#148
[#577 'texture_storage_2d']: s#149
[#577 'texture_storage_2d_array']: s#150
[#577 'texture_storage_3d']: s#151
[#577 'true']: s#113
[#577 'u32']: s#119
[#577 'vec2']: s#96
[#577 'vec3']: s#97
[#577 'vec4']: s#98
[#577 '~']: s#71
[#577 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#577 /0[fh]/]: s#129
[#577 /0[iu]?/]: s#109
[#577 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#577 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#577 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#577 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#577 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#577 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#577 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#577 /[1-9][0-9]*[fh]/]: s#130
[#577 /[1-9][0-9]*[iu]?/]: s#110
[#578 '{']: s#184
[#579 'continuing']: r#371
[#579 '}']: r#371
[#580 '}']: s#478
[#581 '}']: r#372
[#582 '{']: s#184
[#583 '}']: s#478
[#584 '}']: r#373
[#585 'case']: s#586
[#585 'default']: s#587
[#586 '!']: s#70
[#586 '&']: s#73
[#586 '(']: s#115
[#586 '*']: s#72
[#586 '-']: s#69
[#586 'array']: s#83
[#586 'bitcast']: s#78
[#586 'bool']: s#88
[#586 'f16']: s#117
[#586 'f32']: s#116
[#586 'false']: s#114
[#586 'i32']: s#118
[#586 'mat2x2']: s#99
[#586 'mat2x3']: s#100
[#586 'mat2x4']: s#101
[#586 'mat3x2']: s#102
[#586 'mat3x3']: s#103
[#586 'mat3x4']: s#104
[#586 'mat4x2']: s#105
[#586 'mat4x3']: s#106
[#586 'mat4x4']: s#107
[#586 'ptr']: s#120
[#586 'sampler']: s#134
[#586 'sampler_comparison']: s#135
[#586 'texture_1d']: s#141
[#586 'texture_2d']: s#142
[#586 'texture_2d_array']: s#143
[#586 'texture_3d']: s#144
[#586 'texture_cube']: s#145
[#586 'texture_cube_array']: s#146
[#586 'texture_depth_2d']: s#136
[#586 'texture_depth_2d_array']: s#137
[#586 'texture_depth_cube']: s#138
[#586 'texture_depth_cube_array']: s#139
[#586 'texture_depth_multisampled_2d']: s#140
[#586 'texture_multisampled_2d']: s#147
[#586 'texture_storage_1d']: s#148
[#586 'texture_storage_2d']: s#149
[#586 'texture_storage_2d_array']: s#150
[#586 'texture_storage_3d']: s#151
[#586 'true']: s#113
[#586 'u32']: s#119
[#586 'vec2']: s#96
[#586 'vec3']: s#97
[#586 'vec4']: s#98
[#586 '~']: s#71
[#586 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#586 /0[fh]/]: s#129
[#586 /0[iu]?/]: s#109
[#586 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#586 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#586 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#586 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#586 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#586 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#586 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#586 /[1-9][0-9]*[fh]/]: s#130
[#586 /[1-9][0-9]*[iu]?/]: s#110
[#587 ':']: s#176
[#588 '&']: r#374
[#588 '(']: r#374
[#588 '*']: r#374
[#588 ';']: r#374
[#588 'break']: r#374
[#588 'const']: r#374
[#588 'continue']: r#374
[#588 'continuing']: r#374
[#588 'discard']: r#374
[#588 'fallthrough']: r#374
[#588 'for']: r#374
[#588 'if']: r#374
[#588 'let']: r#374
[#588 'loop']: r#374
[#588 'return']: r#374
[#588 'static_assert']: r#374
[#588 'switch']: r#374
[#588 'var']: r#374
[#588 'while']: r#374
[#588 '{']: r#374
[#588 '}']: r#374
[#588 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#374
[#589 '{']: s#184
[#590 '(']: r#375
[#590 ')']: r#375
[#590 ',']: r#375
[#590 ';']: r#375
[#590 '=']: r#375
[#590 '>']: r#375
[#590 '{']: r#375
[#590 '}']: r#375
[#591 '>']: s#231
[#592 'read']: s#527
[#592 'read_write']: s#529
[#592 'write']: s#528
[#593 '@']: r#376
[#593 'array']: r#376
[#593 'bool']: r#376
[#593 'f16']: r#376
[#593 'f32']: r#376
[#593 'fn']: r#376
[#593 'i32']: r#376
[#593 'override']: r#376
[#593 'ptr']: r#376
[#593 'sampler']: r#376
[#593 'sampler_comparison']: r#376
[#593 'texture_1d']: r#376
[#593 'texture_2d']: r#376
[#593 'texture_2d_array']: r#376
[#593 'texture_3d']: r#376
[#593 'texture_cube']: r#376
[#593 'texture_cube_array']: r#376
[#593 'texture_depth_2d']: r#376
[#593 'texture_depth_2d_array']: r#376
[#593 'texture_depth_cube']: r#376
[#593 'texture_depth_cube_array']: r#376
[#593 'texture_depth_multisampled_2d']: r#376
[#593 'texture_multisampled_2d']: r#376
[#593 'texture_storage_1d']: r#376
[#593 'texture_storage_2d']: r#376
[#593 'texture_storage_2d_array']: r#376
[#593 'texture_storage_3d']: r#376
[#593 'u32']: r#376
[#593 'var']: r#376
[#593 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#376
[#594 '!']: s#70
[#594 '&']: s#73
[#594 '(']: s#115
[#594 ')']: r#315
[#594 '*']: s#72
[#594 '-']: s#69
[#594 'array']: s#83
[#594 'bitcast']: s#78
[#594 'bool']: s#88
[#594 'f16']: s#117
[#594 'f32']: s#116
[#594 'false']: s#114
[#594 'i32']: s#118
[#594 'mat2x2']: s#99
[#594 'mat2x3']: s#100
[#594 'mat2x4']: s#101
[#594 'mat3x2']: s#102
[#594 'mat3x3']: s#103
[#594 'mat3x4']: s#104
[#594 'mat4x2']: s#105
[#594 'mat4x3']: s#106
[#594 'mat4x4']: s#107
[#594 'ptr']: s#120
[#594 'sampler']: s#134
[#594 'sampler_comparison']: s#135
[#594 'texture_1d']: s#141
[#594 'texture_2d']: s#142
[#594 'texture_2d_array']: s#143
[#594 'texture_3d']: s#144
[#594 'texture_cube']: s#145
[#594 'texture_cube_array']: s#146
[#594 'texture_depth_2d']: s#136
[#594 'texture_depth_2d_array']: s#137
[#594 'texture_depth_cube']: s#138
[#594 'texture_depth_cube_array']: s#139
[#594 'texture_depth_multisampled_2d']: s#140
[#594 'texture_multisampled_2d']: s#147
[#594 'texture_storage_1d']: s#148
[#594 'texture_storage_2d']: s#149
[#594 'texture_storage_2d_array']: s#150
[#594 'texture_storage_3d']: s#151
[#594 'true']: s#113
[#594 'u32']: s#119
[#594 'vec2']: s#96
[#594 'vec3']: s#97
[#594 'vec4']: s#98
[#594 '~']: s#71
[#594 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#594 /0[fh]/]: s#129
[#594 /0[iu]?/]: s#109
[#594 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#594 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#594 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#594 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#594 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#594 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#594 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#594 /[1-9][0-9]*[fh]/]: s#130
[#594 /[1-9][0-9]*[iu]?/]: s#110
[#595 '@']: r#377
[#595 'array']: r#377
[#595 'bool']: r#377
[#595 'f16']: r#377
[#595 'f32']: r#377
[#595 'fn']: r#377
[#595 'i32']: r#377
[#595 'override']: r#377
[#595 'ptr']: r#377
[#595 'sampler']: r#377
[#595 'sampler_comparison']: r#377
[#595 'texture_1d']: r#377
[#595 'texture_2d']: r#377
[#595 'texture_2d_array']: r#377
[#595 'texture_3d']: r#377
[#595 'texture_cube']: r#377
[#595 'texture_cube_array']: r#377
[#595 'texture_depth_2d']: r#377
[#595 'texture_depth_2d_array']: r#377
[#595 'texture_depth_cube']: r#377
[#595 'texture_depth_cube_array']: r#377
[#595 'texture_depth_multisampled_2d']: r#377
[#595 'texture_multisampled_2d']: r#377
[#595 'texture_storage_1d']: r#377
[#595 'texture_storage_2d']: r#377
[#595 'texture_storage_2d_array']: r#377
[#595 'texture_storage_3d']: r#377
[#595 'u32']: r#377
[#595 'var']: r#377
[#595 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#377
[#596 ',']: s#401
[#597 '>']: r#378
[#598 '(']: r#379
[#598 ')']: r#379
[#598 ',']: r#379
[#598 ';']: r#379
[#598 '=']: r#379
[#598 '>']: r#379
[#598 '{']: r#379
[#598 '}']: r#379
[#599 '&']: r#380
[#599 '(']: r#380
[#599 '*']: r#380
[#599 ';']: r#380
[#599 'break']: r#380
[#599 'const']: r#380
[#599 'continue']: r#380
[#599 'continuing']: r#380
[#599 'discard']: r#380
[#599 'else']: r#380
[#599 'fallthrough']: r#380
[#599 'for']: r#380
[#599 'if']: r#380
[#599 'let']: r#380
[#599 'loop']: r#380
[#599 'return']: r#380
[#599 'static_assert']: r#380
[#599 'switch']: r#380
[#599 'var']: r#380
[#599 'while']: r#380
[#599 '{']: r#380
[#599 '}']: r#380
[#599 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#380
[#600 '{']: s#184
[#601 '{']: r#381
[#602 ':']: s#176
[#603 ',']: s#401
[#604 '}']: r#382
[#605 '&']: r#383
[#605 '(']: r#383
[#605 '*']: r#383
[#605 ';']: r#383
[#605 'break']: r#383
[#605 'const']: r#383
[#605 'continue']: r#383
[#605 'continuing']: r#383
[#605 'discard']: r#383
[#605 'fallthrough']: r#383
[#605 'for']: r#383
[#605 'if']: r#383
[#605 'let']: r#383
[#605 'loop']: r#383
[#605 'return']: r#383
[#605 'static_assert']: r#383
[#605 'switch']: r#383
[#605 'var']: r#383
[#605 'while']: r#383
[#605 '{']: r#383
[#605 '}']: r#383
[#605 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#383
[#606 '}']: r#384
[#607 '&']: s#73
[#607 '*']: s#72
[#607 ';']: s#19
[#607 'break']: s#372
[#607 'const']: s#371
[#607 'continue']: s#373
[#607 'discard']: s#356
[#607 'for']: s#366
[#607 'if']: s#375
[#607 'let']: s#370
[#607 'loop']: s#365
[#607 'return']: s#362
[#607 'static_assert']: s#26
[#607 'switch']: s#364
[#607 'var']: s#161
[#607 'while']: s#367
[#607 '{']: s#184
[#607 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#608 '&']: r#385
[#608 '(']: r#385
[#608 '*']: r#385
[#608 ';']: r#385
[#608 'break']: r#385
[#608 'const']: r#385
[#608 'continue']: r#385
[#608 'continuing']: r#385
[#608 'discard']: r#385
[#608 'fallthrough']: r#385
[#608 'for']: r#385
[#608 'if']: r#385
[#608 'let']: r#385
[#608 'loop']: r#385
[#608 'return']: r#385
[#608 'static_assert']: r#385
[#608 'switch']: r#385
[#608 'var']: r#385
[#608 'while']: r#385
[#608 '{']: r#385
[#608 '}']: r#385
[#608 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#385
[#609 '&']: r#386
[#609 '(']: r#386
[#609 '*']: r#386
[#609 ';']: r#386
[#609 'break']: r#386
[#609 'const']: r#386
[#609 'continue']: r#386
[#609 'continuing']: r#386
[#609 'discard']: r#386
[#609 'fallthrough']: r#386
[#609 'for']: r#386
[#609 'if']: r#386
[#609 'let']: r#386
[#609 'loop']: r#386
[#609 'return']: r#386
[#609 'static_assert']: r#386
[#609 'switch']: r#386
[#609 'var']: r#386
[#609 'while']: r#386
[#609 '{']: r#386
[#609 '}']: r#386
[#609 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#386
[#610 ';']: s#19
[#611 ';']: r#387
[#612 'array']: s#313
[#612 'bool']: s#88
[#612 'f16']: s#117
[#612 'f32']: s#116
[#612 'i32']: s#118
[#612 'ptr']: s#120
[#612 'sampler']: s#134
[#612 'sampler_comparison']: s#135
[#612 'texture_1d']: s#141
[#612 'texture_2d']: s#142
[#612 'texture_2d_array']: s#143
[#612 'texture_3d']: s#144
[#612 'texture_cube']: s#145
[#612 'texture_cube_array']: s#146
[#612 'texture_depth_2d']: s#136
[#612 'texture_depth_2d_array']: s#137
[#612 'texture_depth_cube']: s#138
[#612 'texture_depth_cube_array']: s#139
[#612 'texture_depth_multisampled_2d']: s#140
[#612 'texture_multisampled_2d']: s#147
[#612 'texture_storage_1d']: s#148
[#612 'texture_storage_2d']: s#149
[#612 'texture_storage_2d_array']: s#150
[#612 'texture_storage_3d']: s#151
[#612 'u32']: s#119
[#612 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#613 'array']: r#388
[#613 'bool']: r#388
[#613 'f16']: r#388
[#613 'f32']: r#388
[#613 'i32']: r#388
[#613 'ptr']: r#388
[#613 'sampler']: r#388
[#613 'sampler_comparison']: r#388
[#613 'texture_1d']: r#388
[#613 'texture_2d']: r#388
[#613 'texture_2d_array']: r#388
[#613 'texture_3d']: r#388
[#613 'texture_cube']: r#388
[#613 'texture_cube_array']: r#388
[#613 'texture_depth_2d']: r#388
[#613 'texture_depth_2d_array']: r#388
[#613 'texture_depth_cube']: r#388
[#613 'texture_depth_cube_array']: r#388
[#613 'texture_depth_multisampled_2d']: r#388
[#613 'texture_multisampled_2d']: r#388
[#613 'texture_storage_1d']: r#388
[#613 'texture_storage_2d']: r#388
[#613 'texture_storage_2d_array']: r#388
[#613 'texture_storage_3d']: r#388
[#613 'u32']: r#388
[#614 '@']: s#32
[#615 'array']: r#389
[#615 'bool']: r#389
[#615 'f16']: r#389
[#615 'f32']: r#389
[#615 'i32']: r#389
[#615 'ptr']: r#389
[#615 'sampler']: r#389
[#615 'sampler_comparison']: r#389
[#615 'texture_1d']: r#389
[#615 'texture_2d']: r#389
[#615 'texture_2d_array']: r#389
[#615 'texture_3d']: r#389
[#615 'texture_cube']: r#389
[#615 'texture_cube_array']: r#389
[#615 'texture_depth_2d']: r#389
[#615 'texture_depth_2d_array']: r#389
[#615 'texture_depth_cube']: r#389
[#615 'texture_depth_cube_array']: r#389
[#615 'texture_depth_multisampled_2d']: r#389
[#615 'texture_multisampled_2d']: r#389
[#615 'texture_storage_1d']: r#389
[#615 'texture_storage_2d']: r#389
[#615 'texture_storage_2d_array']: r#389
[#615 'texture_storage_3d']: r#389
[#615 'u32']: r#389
[#616 '{']: r#390
[#617 '&']: s#73
[#617 '*']: s#72
[#617 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#618 'break']: s#641
[#619 'break']: r#391
[#619 '}']: r#391
[#620 '&']: s#73
[#620 '*']: s#72
[#620 ';']: s#19
[#620 'break']: s#372
[#620 'const']: s#371
[#620 'continue']: s#373
[#620 'discard']: s#356
[#620 'for']: s#366
[#620 'if']: s#375
[#620 'let']: s#370
[#620 'loop']: s#365
[#620 'return']: s#362
[#620 'static_assert']: s#26
[#620 'switch']: s#364
[#620 'var']: s#161
[#620 'while']: s#367
[#620 '{']: s#184
[#620 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#621 ',']: s#401
[#622 ',']: r#392
[#622 ':']: r#392
[#622 '{']: r#392
[#623 ',']: s#401
[#624 '!']: s#70
[#624 '&']: s#73
[#624 '(']: s#115
[#624 '*']: s#72
[#624 '-']: s#69
[#624 'array']: s#83
[#624 'bitcast']: s#78
[#624 'bool']: s#88
[#624 'f16']: s#117
[#624 'f32']: s#116
[#624 'false']: s#114
[#624 'i32']: s#118
[#624 'mat2x2']: s#99
[#624 'mat2x3']: s#100
[#624 'mat2x4']: s#101
[#624 'mat3x2']: s#102
[#624 'mat3x3']: s#103
[#624 'mat3x4']: s#104
[#624 'mat4x2']: s#105
[#624 'mat4x3']: s#106
[#624 'mat4x4']: s#107
[#624 'ptr']: s#120
[#624 'sampler']: s#134
[#624 'sampler_comparison']: s#135
[#624 'texture_1d']: s#141
[#624 'texture_2d']: s#142
[#624 'texture_2d_array']: s#143
[#624 'texture_3d']: s#144
[#624 'texture_cube']: s#145
[#624 'texture_cube_array']: s#146
[#624 'texture_depth_2d']: s#136
[#624 'texture_depth_2d_array']: s#137
[#624 'texture_depth_cube']: s#138
[#624 'texture_depth_cube_array']: s#139
[#624 'texture_depth_multisampled_2d']: s#140
[#624 'texture_multisampled_2d']: s#147
[#624 'texture_storage_1d']: s#148
[#624 'texture_storage_2d']: s#149
[#624 'texture_storage_2d_array']: s#150
[#624 'texture_storage_3d']: s#151
[#624 'true']: s#113
[#624 'u32']: s#119
[#624 'vec2']: s#96
[#624 'vec3']: s#97
[#624 'vec4']: s#98
[#624 '~']: s#71
[#624 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#624 /0[fh]/]: s#129
[#624 /0[iu]?/]: s#109
[#624 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#624 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#624 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#624 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#624 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#624 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#624 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#624 /[1-9][0-9]*[fh]/]: s#130
[#624 /[1-9][0-9]*[iu]?/]: s#110
[#625 '{']: s#184
[#626 '{']: r#393
[#627 'case']: r#394
[#627 'default']: r#394
[#627 '}']: r#394
[#628 '&']: s#73
[#628 '*']: s#72
[#628 ';']: s#19
[#628 'break']: s#372
[#628 'const']: s#371
[#628 'continue']: s#373
[#628 'discard']: s#356
[#628 'for']: s#366
[#628 'if']: s#375
[#628 'let']: s#370
[#628 'loop']: s#365
[#628 'return']: s#362
[#628 'static_assert']: s#26
[#628 'switch']: s#364
[#628 'var']: s#161
[#628 'while']: s#367
[#628 '{']: s#184
[#628 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#629 '@']: r#395
[#629 'array']: r#395
[#629 'bool']: r#395
[#629 'f16']: r#395
[#629 'f32']: r#395
[#629 'fn']: r#395
[#629 'i32']: r#395
[#629 'override']: r#395
[#629 'ptr']: r#395
[#629 'sampler']: r#395
[#629 'sampler_comparison']: r#395
[#629 'texture_1d']: r#395
[#629 'texture_2d']: r#395
[#629 'texture_2d_array']: r#395
[#629 'texture_3d']: r#395
[#629 'texture_cube']: r#395
[#629 'texture_cube_array']: r#395
[#629 'texture_depth_2d']: r#395
[#629 'texture_depth_2d_array']: r#395
[#629 'texture_depth_cube']: r#395
[#629 'texture_depth_cube_array']: r#395
[#629 'texture_depth_multisampled_2d']: r#395
[#629 'texture_multisampled_2d']: r#395
[#629 'texture_storage_1d']: r#395
[#629 'texture_storage_2d']: r#395
[#629 'texture_storage_2d_array']: r#395
[#629 'texture_storage_3d']: r#395
[#629 'u32']: r#395
[#629 'var']: r#395
[#629 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#395
[#630 'fallthrough']: s#653
[#631 'fallthrough']: r#396
[#631 '}']: r#396
[#632 '&']: s#73
[#632 '*']: s#72
[#632 ';']: s#19
[#632 'break']: s#372
[#632 'const']: s#371
[#632 'continue']: s#373
[#632 'discard']: s#356
[#632 'for']: s#366
[#632 'if']: s#375
[#632 'let']: s#370
[#632 'loop']: s#365
[#632 'return']: s#362
[#632 'static_assert']: s#26
[#632 'switch']: s#364
[#632 'var']: s#161
[#632 'while']: s#367
[#632 '{']: s#184
[#632 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#633 'case']: r#397
[#633 'default']: r#397
[#633 '}']: r#397
[#634 ',']: r#398
[#634 ':']: r#398
[#634 '{']: r#398
[#635 ',']: r#399
[#635 ':']: r#399
[#635 '{']: r#399
[#636 ':']: r#400
[#636 '{']: r#400
[#637 ':']: r#401
[#637 '{']: r#401
[#638 'break']: r#402
[#638 '}']: r#402
[#639 '}']: s#478
[#640 '}']: r#403
[#641 'if']: s#648
[#642 ')']: r#404
[#643 ')']: r#405
[#644 ')']: r#406
[#645 ')']: r#407
[#646 ')']: r#408
[#647 ')']: r#409
[#648 '!']: s#70
[#648 '&']: s#73
[#648 '(']: s#115
[#648 '*']: s#72
[#648 '-']: s#69
[#648 'array']: s#83
[#648 'bitcast']: s#78
[#648 'bool']: s#88
[#648 'f16']: s#117
[#648 'f32']: s#116
[#648 'false']: s#114
[#648 'i32']: s#118
[#648 'mat2x2']: s#99
[#648 'mat2x3']: s#100
[#648 'mat2x4']: s#101
[#648 'mat3x2']: s#102
[#648 'mat3x3']: s#103
[#648 'mat3x4']: s#104
[#648 'mat4x2']: s#105
[#648 'mat4x3']: s#106
[#648 'mat4x4']: s#107
[#648 'ptr']: s#120
[#648 'sampler']: s#134
[#648 'sampler_comparison']: s#135
[#648 'texture_1d']: s#141
[#648 'texture_2d']: s#142
[#648 'texture_2d_array']: s#143
[#648 'texture_3d']: s#144
[#648 'texture_cube']: s#145
[#648 'texture_cube_array']: s#146
[#648 'texture_depth_2d']: s#136
[#648 'texture_depth_2d_array']: s#137
[#648 'texture_depth_cube']: s#138
[#648 'texture_depth_cube_array']: s#139
[#648 'texture_depth_multisampled_2d']: s#140
[#648 'texture_multisampled_2d']: s#147
[#648 'texture_storage_1d']: s#148
[#648 'texture_storage_2d']: s#149
[#648 'texture_storage_2d_array']: s#150
[#648 'texture_storage_3d']: s#151
[#648 'true']: s#113
[#648 'u32']: s#119
[#648 'vec2']: s#96
[#648 'vec3']: s#97
[#648 'vec4']: s#98
[#648 '~']: s#71
[#648 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#648 /0[fh]/]: s#129
[#648 /0[iu]?/]: s#109
[#648 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#648 /0[xX][0-9a-fA-F]+[iu]?/]: s#108
[#648 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#648 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#648 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#648 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#648 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#648 /[1-9][0-9]*[fh]/]: s#130
[#648 /[1-9][0-9]*[iu]?/]: s#110
[#649 '}']: r#410
[#650 'fallthrough']: r#411
[#650 '}']: r#411
[#651 '}']: s#478
[#652 '}']: r#412
[#653 ';']: s#19
[#654 '}']: r#413
[#655 'case']: r#414
[#655 'default']: r#414
[#655 '}']: r#414
[#656 ';']: s#19
[#657 '}']: r#415

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attr]: #31
[#2 attribute]: #30
[#2 function_decl]: #17
[#2 function_decl/0.0]: #25
[#2 function_decl/0.0/0]: #29
[#2 global_constant_decl]: #14
[#2 global_constant_decl/1.0]: #22
[#2 global_constant_decl/1.0/0]: #28
[#2 global_decl]: #11
[#2 global_variable_decl]: #13
[#2 global_variable_decl/0.0]: #20
[#2 global_variable_decl/0.0/0]: #27
[#2 semicolon]: #12
[#2 static_assert_statement]: #18
[#2 struct_decl]: #16
[#2 translation_unit/0.1]: #9
[#2 translation_unit/0.1/0]: #10
[#2 type_alias_decl]: #15
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #8
[#5 extension_name]: #6
[#6 semicolon]: #167
[#11 attr]: #31
[#11 attribute]: #30
[#11 function_decl]: #17
[#11 function_decl/0.0]: #25
[#11 function_decl/0.0/0]: #29
[#11 global_constant_decl]: #14
[#11 global_constant_decl/1.0]: #22
[#11 global_constant_decl/1.0/0]: #28
[#11 global_decl]: #11
[#11 global_variable_decl]: #13
[#11 global_variable_decl/0.0]: #20
[#11 global_variable_decl/0.0/0]: #27
[#11 semicolon]: #12
[#11 static_assert_statement]: #18
[#11 struct_decl]: #16
[#11 translation_unit/0.1/0]: #166
[#11 type_alias_decl]: #15
[#13 semicolon]: #165
[#14 semicolon]: #164
[#15 semicolon]: #163
[#18 semicolon]: #162
[#20 variable_decl]: #160
[#21 global_constant_decl/0.1]: #157
[#21 ident]: #158
[#21 variable_ident_decl]: #159
[#23 ident]: #155
[#24 ident]: #154
[#25 function_header]: #152
[#26 additive_expression]: #59
[#26 and]: #67
[#26 array_type_decl]: #94
[#26 bang]: #64
[#26 binary_and_expression]: #56
[#26 binary_or_expression]: #57
[#26 binary_xor_expression]: #58
[#26 bitwise_expression]: #54
[#26 bool_literal]: #86
[#26 callable]: #75
[#26 const_literal]: #76
[#26 decimal_float_literal]: #111
[#26 depth_texture_type]: #122
[#26 expression]: #50
[#26 float16]: #90
[#26 float32]: #89
[#26 float_literal]: #85
[#26 hex_float_literal]: #112
[#26 ident]: #74
[#26 int32]: #91
[#26 int_literal]: #84
[#26 mat_prefix]: #82
[#26 minus]: #63
[#26 multiplicative_expression]: #61
[#26 multisampled_texture_type]: #124
[#26 paren_expression]: #77
[#26 paren_left]: #87
[#26 pointer]: #93
[#26 primary_expression]: #68
[#26 relational_expression]: #51
[#26 sampled_texture_type]: #123
[#26 sampler_type]: #121
[#26 shift_expression]: #55
[#26 short_circuit_and_expression]: #53
[#26 short_circuit_or_expression]: #52
[#26 singular_expression]: #62
[#26 star]: #66
[#26 storage_texture_type]: #125
[#26 texture_and_sampler_types]: #95
[#26 tilde]: #65
[#26 type_decl_without_ident]: #80
[#26 uint32]: #92
[#26 unary_expression]: #60
[#26 vec_prefix]: #81
[#30 attr]: #31
[#30 attribute]: #30
[#30 function_decl/0.0/0]: #49
[#30 global_constant_decl/1.0/0]: #48
[#30 global_variable_decl/0.0/0]: #47
[#33 paren_left]: #248
[#34 paren_left]: #247
[#35 paren_left]: #246
[#37 paren_left]: #245
[#38 paren_left]: #244
[#39 paren_left]: #243
[#41 paren_left]: #242
[#42 paren_left]: #241
[#43 paren_left]: #240
[#52 or_or]: #238
[#53 and_and]: #236
[#55 equal_equal]: #229
[#55 greater_than]: #226
[#55 greater_than_equal]: #228
[#55 less_than]: #225
[#55 less_than_equal]: #227
[#55 not_equal]: #230
[#56 and]: #224
[#57 or]: #222
[#58 xor]: #220
[#59 minus]: #218
[#59 plus]: #217
[#60 shift_left]: #213
[#60 shift_right]: #214
[#61 forward_slash]: #209
[#61 modulo]: #210
[#61 star]: #208
[#63 and]: #67
[#63 array_type_decl]: #94
[#63 bang]: #64
[#63 bool_literal]: #86
[#63 callable]: #75
[#63 const_literal]: #76
[#63 decimal_float_literal]: #111
[#63 depth_texture_type]: #122
[#63 float16]: #90
[#63 float32]: #89
[#63 float_literal]: #85
[#63 hex_float_literal]: #112
[#63 ident]: #74
[#63 int32]: #91
[#63 int_literal]: #84
[#63 mat_prefix]: #82
[#63 minus]: #63
[#63 multisampled_texture_type]: #124
[#63 paren_expression]: #77
[#63 paren_left]: #87
[#63 pointer]: #93
[#63 primary_expression]: #68
[#63 sampled_texture_type]: #123
[#63 sampler_type]: #121
[#63 singular_expression]: #62
[#63 star]: #66
[#63 storage_texture_type]: #125
[#63 texture_and_sampler_types]: #95
[#63 tilde]: #65
[#63 type_decl_without_ident]: #80
[#63 uint32]: #92
[#63 unary_expression]: #207
[#63 vec_prefix]: #81
[#64 and]: #67
[#64 array_type_decl]: #94
[#64 bang]: #64
[#64 bool_literal]: #86
[#64 callable]: #75
[#64 const_literal]: #76
[#64 decimal_float_literal]: #111
[#64 depth_texture_type]: #122
[#64 float16]: #90
[#64 float32]: #89
[#64 float_literal]: #85
[#64 hex_float_literal]: #112
[#64 ident]: #74
[#64 int32]: #91
[#64 int_literal]: #84
[#64 mat_prefix]: #82
[#64 minus]: #63
[#64 multisampled_texture_type]: #124
[#64 paren_expression]: #77
[#64 paren_left]: #87
[#64 pointer]: #93
[#64 primary_expression]: #68
[#64 sampled_texture_type]: #123
[#64 sampler_type]: #121
[#64 singular_expression]: #62
[#64 star]: #66
[#64 storage_texture_type]: #125
[#64 texture_and_sampler_types]: #95
[#64 tilde]: #65
[#64 type_decl_without_ident]: #80
[#64 uint32]: #92
[#64 unary_expression]: #206
[#64 vec_prefix]: #81
[#65 and]: #67
[#65 array_type_decl]: #94
[#65 bang]: #64
[#65 bool_literal]: #86
[#65 callable]: #75
[#65 const_literal]: #76
[#65 decimal_float_literal]: #111
[#65 depth_texture_type]: #122
[#65 float16]: #90
[#65 float32]: #89
[#65 float_literal]: #85
[#65 hex_float_literal]: #112
[#65 ident]: #74
[#65 int32]: #91
[#65 int_literal]: #84
[#65 mat_prefix]: #82
[#65 minus]: #63
[#65 multisampled_texture_type]: #124
[#65 paren_expression]: #77
[#65 paren_left]: #87
[#65 pointer]: #93
[#65 primary_expression]: #68
[#65 sampled_texture_type]: #123
[#65 sampler_type]: #121
[#65 singular_expression]: #62
[#65 star]: #66
[#65 storage_texture_type]: #125
[#65 texture_and_sampler_types]: #95
[#65 tilde]: #65
[#65 type_decl_without_ident]: #80
[#65 uint32]: #92
[#65 unary_expression]: #205
[#65 vec_prefix]: #81
[#66 and]: #67
[#66 array_type_decl]: #94
[#66 bang]: #64
[#66 bool_literal]: #86
[#66 callable]: #75
[#66 const_literal]: #76
[#66 decimal_float_literal]: #111
[#66 depth_texture_type]: #122
[#66 float16]: #90
[#66 float32]: #89
[#66 float_literal]: #85
[#66 hex_float_literal]: #112
[#66 ident]: #74
[#66 int32]: #91
[#66 int_literal]: #84
[#66 mat_prefix]: #82
[#66 minus]: #63
[#66 multisampled_texture_type]: #124
[#66 paren_expression]: #77
[#66 paren_left]: #87
[#66 pointer]: #93
[#66 primary_expression]: #68
[#66 sampled_texture_type]: #123
[#66 sampler_type]: #121
[#66 singular_expression]: #62
[#66 star]: #66
[#66 storage_texture_type]: #125
[#66 texture_and_sampler_types]: #95
[#66 tilde]: #65
[#66 type_decl_without_ident]: #80
[#66 uint32]: #92
[#66 unary_expression]: #204
[#66 vec_prefix]: #81
[#67 and]: #67
[#67 array_type_decl]: #94
[#67 bang]: #64
[#67 bool_literal]: #86
[#67 callable]: #75
[#67 const_literal]: #76
[#67 decimal_float_literal]: #111
[#67 depth_texture_type]: #122
[#67 float16]: #90
[#67 float32]: #89
[#67 float_literal]: #85
[#67 hex_float_literal]: #112
[#67 ident]: #74
[#67 int32]: #91
[#67 int_literal]: #84
[#67 mat_prefix]: #82
[#67 minus]: #63
[#67 multisampled_texture_type]: #124
[#67 paren_expression]: #77
[#67 paren_left]: #87
[#67 pointer]: #93
[#67 primary_expression]: #68
[#67 sampled_texture_type]: #123
[#67 sampler_type]: #121
[#67 singular_expression]: #62
[#67 star]: #66
[#67 storage_texture_type]: #125
[#67 texture_and_sampler_types]: #95
[#67 tilde]: #65
[#67 type_decl_without_ident]: #80
[#67 uint32]: #92
[#67 unary_expression]: #203
[#67 vec_prefix]: #81
[#68 bracket_left]: #199
[#68 period]: #200
[#68 postfix_expression]: #198
[#68 singular_expression/0.1]: #197
[#75 argument_expression_list]: #195
[#75 paren_left]: #196
[#78 less_than]: #194
[#83 less_than]: #193
[#87 additive_expression]: #59
[#87 and]: #67
[#87 array_type_decl]: #94
[#87 bang]: #64
[#87 binary_and_expression]: #56
[#87 binary_or_expression]: #57
[#87 binary_xor_expression]: #58
[#87 bitwise_expression]: #54
[#87 bool_literal]: #86
[#87 callable]: #75
[#87 const_literal]: #76
[#87 decimal_float_literal]: #111
[#87 depth_texture_type]: #122
[#87 expression]: #192
[#87 float16]: #90
[#87 float32]: #89
[#87 float_literal]: #85
[#87 hex_float_literal]: #112
[#87 ident]: #74
[#87 int32]: #91
[#87 int_literal]: #84
[#87 mat_prefix]: #82
[#87 minus]: #63
[#87 multiplicative_expression]: #61
[#87 multisampled_texture_type]: #124
[#87 paren_expression]: #77
[#87 paren_left]: #87
[#87 pointer]: #93
[#87 primary_expression]: #68
[#87 relational_expression]: #51
[#87 sampled_texture_type]: #123
[#87 sampler_type]: #121
[#87 shift_expression]: #55
[#87 short_circuit_and_expression]: #53
[#87 short_circuit_or_expression]: #52
[#87 singular_expression]: #62
[#87 star]: #66
[#87 storage_texture_type]: #125
[#87 texture_and_sampler_types]: #95
[#87 tilde]: #65
[#87 type_decl_without_ident]: #80
[#87 uint32]: #92
[#87 unary_expression]: #60
[#87 vec_prefix]: #81
[#93 less_than]: #191
[#123 less_than]: #190
[#124 less_than]: #189
[#125 less_than]: #188
[#152 brace_left]: #187
[#152 compound_statement]: #186
[#153 ident]: #185
[#154 brace_left]: #183
[#154 struct_body_decl]: #182
[#155 equal]: #181
[#156 global_constant_decl/1.2]: #178
[#156 ident]: #179
[#156 variable_ident_decl]: #180
[#157 equal]: #177
[#158 colon]: #175
[#160 equal]: #173
[#160 global_variable_decl/0.2]: #172
[#161 less_than]: #170
[#161 variable_decl/0.1]: #168
[#161 variable_qualifier]: #169
[#168 ident]: #397
[#168 variable_decl/0.2]: #396
[#168 variable_ident_decl]: #398
[#170 address_space]: #395
[#173 additive_expression]: #59
[#173 and]: #67
[#173 array_type_decl]: #94
[#173 bang]: #64
[#173 binary_and_expression]: #56
[#173 binary_or_expression]: #57
[#173 binary_xor_expression]: #58
[#173 bitwise_expression]: #54
[#173 bool_literal]: #86
[#173 callable]: #75
[#173 const_literal]: #76
[#173 decimal_float_literal]: #111
[#173 depth_texture_type]: #122
[#173 expression]: #394
[#173 float16]: #90
[#173 float32]: #89
[#173 float_literal]: #85
[#173 hex_float_literal]: #112
[#173 ident]: #74
[#173 int32]: #91
[#173 int_literal]: #84
[#173 mat_prefix]: #82
[#173 minus]: #63
[#173 multiplicative_expression]: #61
[#173 multisampled_texture_type]: #124
[#173 paren_expression]: #77
[#173 paren_left]: #87
[#173 pointer]: #93
[#173 primary_expression]: #68
[#173 relational_expression]: #51
[#173 sampled_texture_type]: #123
[#173 sampler_type]: #121
[#173 shift_expression]: #55
[#173 short_circuit_and_expression]: #53
[#173 short_circuit_or_expression]: #52
[#173 singular_expression]: #62
[#173 star]: #66
[#173 storage_texture_type]: #125
[#173 texture_and_sampler_types]: #95
[#173 tilde]: #65
[#173 type_decl_without_ident]: #80
[#173 uint32]: #92
[#173 unary_expression]: #60
[#173 vec_prefix]: #81
[#175 array_type_decl]: #94
[#175 depth_texture_type]: #122
[#175 float16]: #90
[#175 float32]: #89
[#175 ident]: #311
[#175 int32]: #91
[#175 multisampled_texture_type]: #124
[#175 pointer]: #93
[#175 sampled_texture_type]: #123
[#175 sampler_type]: #121
[#175 storage_texture_type]: #125
[#175 texture_and_sampler_types]: #95
[#175 type_decl]: #393
[#175 type_decl_without_ident]: #312
[#175 uint32]: #92
[#177 additive_expression]: #59
[#177 and]: #67
[#177 array_type_decl]: #94
[#177 bang]: #64
[#177 binary_and_expression]: #56
[#177 binary_or_expression]: #57
[#177 binary_xor_expression]: #58
[#177 bitwise_expression]: #54
[#177 bool_literal]: #86
[#177 callable]: #75
[#177 const_literal]: #76
[#177 decimal_float_literal]: #111
[#177 depth_texture_type]: #122
[#177 expression]: #392
[#177 float16]: #90
[#177 float32]: #89
[#177 float_literal]: #85
[#177 hex_float_literal]: #112
[#177 ident]: #74
[#177 int32]: #91
[#177 int_literal]: #84
[#177 mat_prefix]: #82
[#177 minus]: #63
[#177 multiplicative_expression]: #61
[#177 multisampled_texture_type]: #124
[#177 paren_expression]: #77
[#177 paren_left]: #87
[#177 pointer]: #93
[#177 primary_expression]: #68
[#177 relational_expression]: #51
[#177 sampled_texture_type]: #123
[#177 sampler_type]: #121
[#177 shift_expression]: #55
[#177 short_circuit_and_expression]: #53
[#177 short_circuit_or_expression]: #52
[#177 singular_expression]: #62
[#177 star]: #66
[#177 storage_texture_type]: #125
[#177 texture_and_sampler_types]: #95
[#177 tilde]: #65
[#177 type_decl_without_ident]: #80
[#177 uint32]: #92
[#177 unary_expression]: #60
[#177 vec_prefix]: #81
[#178 equal]: #391
[#178 global_constant_decl/1.3]: #390
[#179 colon]: #175
[#181 array_type_decl]: #94
[#181 depth_texture_type]: #122
[#181 float16]: #90
[#181 float32]: #89
[#181 ident]: #311
[#181 int32]: #91
[#181 multisampled_texture_type]: #124
[#181 pointer]: #93
[#181 sampled_texture_type]: #123
[#181 sampler_type]: #121
[#181 storage_texture_type]: #125
[#181 texture_and_sampler_types]: #95
[#181 type_decl]: #389
[#181 type_decl_without_ident]: #312
[#181 uint32]: #92
[#183 attr]: #31
[#183 attribute]: #388
[#183 struct_body_decl/0.1]: #382
[#183 struct_body_decl/0.1/0]: #383
[#183 struct_body_decl/0.1/0/0.0]: #384
[#183 struct_member]: #385
[#183 struct_member/0.0]: #386
[#183 struct_member/0.0/0]: #387
[#185 paren_left]: #381
[#187 and]: #380
[#187 assignment_statement]: #357
[#187 brace_left]: #187
[#187 break_statement]: #354
[#187 compound_statement]: #358
[#187 compound_statement/0.1]: #342
[#187 compound_statement/0.1/0]: #343
[#187 continue_statement]: #355
[#187 decrement_statement]: #360
[#187 for_statement]: #350
[#187 func_call_statement]: #352
[#187 ident]: #368
[#187 if_clause]: #363
[#187 if_statement]: #347
[#187 increment_statement]: #359
[#187 lhs_expression]: #374
[#187 lhs_expression/0.0]: #376
[#187 lhs_expression/0.0/0]: #377
[#187 lhs_expression/0.0/0/0.0]: #378
[#187 loop_statement]: #349
[#187 return_statement]: #346
[#187 semicolon]: #345
[#187 star]: #379
[#187 statement]: #344
[#187 static_assert_statement]: #361
[#187 switch_statement]: #348
[#187 variable_decl]: #369
[#187 variable_statement]: #353
[#187 while_statement]: #351
[#188 texel_format]: #325
[#189 array_type_decl]: #94
[#189 depth_texture_type]: #122
[#189 float16]: #90
[#189 float32]: #89
[#189 ident]: #311
[#189 int32]: #91
[#189 multisampled_texture_type]: #124
[#189 pointer]: #93
[#189 sampled_texture_type]: #123
[#189 sampler_type]: #121
[#189 storage_texture_type]: #125
[#189 texture_and_sampler_types]: #95
[#189 type_decl]: #324
[#189 type_decl_without_ident]: #312
[#189 uint32]: #92
[#190 array_type_decl]: #94
[#190 depth_texture_type]: #122
[#190 float16]: #90
[#190 float32]: #89
[#190 ident]: #311
[#190 int32]: #91
[#190 multisampled_texture_type]: #124
[#190 pointer]: #93
[#190 sampled_texture_type]: #123
[#190 sampler_type]: #121
[#190 storage_texture_type]: #125
[#190 texture_and_sampler_types]: #95
[#190 type_decl]: #323
[#190 type_decl_without_ident]: #312
[#190 uint32]: #92
[#191 address_space]: #317
[#192 paren_right]: #315
[#193 array_type_decl]: #94
[#193 depth_texture_type]: #122
[#193 float16]: #90
[#193 float32]: #89
[#193 ident]: #311
[#193 int32]: #91
[#193 multisampled_texture_type]: #124
[#193 pointer]: #93
[#193 sampled_texture_type]: #123
[#193 sampler_type]: #121
[#193 storage_texture_type]: #125
[#193 texture_and_sampler_types]: #95
[#193 type_decl]: #314
[#193 type_decl_without_ident]: #312
[#193 uint32]: #92
[#194 array_type_decl]: #94
[#194 depth_texture_type]: #122
[#194 float16]: #90
[#194 float32]: #89
[#194 ident]: #311
[#194 int32]: #91
[#194 multisampled_texture_type]: #124
[#194 pointer]: #93
[#194 sampled_texture_type]: #123
[#194 sampler_type]: #121
[#194 storage_texture_type]: #125
[#194 texture_and_sampler_types]: #95
[#194 type_decl]: #310
[#194 type_decl_without_ident]: #312
[#194 uint32]: #92
[#196 additive_expression]: #59
[#196 and]: #67
[#196 argument_expression_list/0.1]: #305
[#196 argument_expression_list/0.1/0.0]: #306
[#196 argument_expression_list/0.1/0.0/0]: #307
[#196 argument_expression_list/0.1/0.0/0/0.0]: #308
[#196 array_type_decl]: #94
[#196 bang]: #64
[#196 binary_and_expression]: #56
[#196 binary_or_expression]: #57
[#196 binary_xor_expression]: #58
[#196 bitwise_expression]: #54
[#196 bool_literal]: #86
[#196 callable]: #75
[#196 const_literal]: #76
[#196 decimal_float_literal]: #111
[#196 depth_texture_type]: #122
[#196 expression]: #309
[#196 float16]: #90
[#196 float32]: #89
[#196 float_literal]: #85
[#196 hex_float_literal]: #112
[#196 ident]: #74
[#196 int32]: #91
[#196 int_literal]: #84
[#196 mat_prefix]: #82
[#196 minus]: #63
[#196 multiplicative_expression]: #61
[#196 multisampled_texture_type]: #124
[#196 paren_expression]: #77
[#196 paren_left]: #87
[#196 pointer]: #93
[#196 primary_expression]: #68
[#196 relational_expression]: #51
[#196 sampled_texture_type]: #123
[#196 sampler_type]: #121
[#196 shift_expression]: #55
[#196 short_circuit_and_expression]: #53
[#196 short_circuit_or_expression]: #52
[#196 singular_expression]: #62
[#196 star]: #66
[#196 storage_texture_type]: #125
[#196 texture_and_sampler_types]: #95
[#196 tilde]: #65
[#196 type_decl_without_ident]: #80
[#196 uint32]: #92
[#196 unary_expression]: #60
[#196 vec_prefix]: #81
[#199 additive_expression]: #59
[#199 and]: #67
[#199 array_type_decl]: #94
[#199 bang]: #64
[#199 binary_and_expression]: #56
[#199 binary_or_expression]: #57
[#199 binary_xor_expression]: #58
[#199 bitwise_expression]: #54
[#199 bool_literal]: #86
[#199 callable]: #75
[#199 const_literal]: #76
[#199 decimal_float_literal]: #111
[#199 depth_texture_type]: #122
[#199 expression]: #304
[#199 float16]: #90
[#199 float32]: #89
[#199 float_literal]: #85
[#199 hex_float_literal]: #112
[#199 ident]: #74
[#199 int32]: #91
[#199 int_literal]: #84
[#199 mat_prefix]: #82
[#199 minus]: #63
[#199 multiplicative_expression]: #61
[#199 multisampled_texture_type]: #124
[#199 paren_expression]: #77
[#199 paren_left]: #87
[#199 pointer]: #93
[#199 primary_expression]: #68
[#199 relational_expression]: #51
[#199 sampled_texture_type]: #123
[#199 sampler_type]: #121
[#199 shift_expression]: #55
[#199 short_circuit_and_expression]: #53
[#199 short_circuit_or_expression]: #52
[#199 singular_expression]: #62
[#199 star]: #66
[#199 storage_texture_type]: #125
[#199 texture_and_sampler_types]: #95
[#199 tilde]: #65
[#199 type_decl_without_ident]: #80
[#199 uint32]: #92
[#199 unary_expression]: #60
[#199 vec_prefix]: #81
[#200 member_ident]: #293
[#200 swizzle_name]: #294
[#208 and]: #67
[#208 array_type_decl]: #94
[#208 bang]: #64
[#208 bool_literal]: #86
[#208 callable]: #75
[#208 const_literal]: #76
[#208 decimal_float_literal]: #111
[#208 depth_texture_type]: #122
[#208 float16]: #90
[#208 float32]: #89
[#208 float_literal]: #85
[#208 hex_float_literal]: #112
[#208 ident]: #74
[#208 int32]: #91
[#208 int_literal]: #84
[#208 mat_prefix]: #82
[#208 minus]: #63
[#208 multisampled_texture_type]: #124
[#208 paren_expression]: #77
[#208 paren_left]: #87
[#208 pointer]: #93
[#208 primary_expression]: #68
[#208 sampled_texture_type]: #123
[#208 sampler_type]: #121
[#208 singular_expression]: #62
[#208 star]: #66
[#208 storage_texture_type]: #125
[#208 texture_and_sampler_types]: #95
[#208 tilde]: #65
[#208 type_decl_without_ident]: #80
[#208 uint32]: #92
[#208 unary_expression]: #292
[#208 vec_prefix]: #81
[#209 and]: #67
[#209 array_type_decl]: #94
[#209 bang]: #64
[#209 bool_literal]: #86
[#209 callable]: #75
[#209 const_literal]: #76
[#209 decimal_float_literal]: #111
[#209 depth_texture_type]: #122
[#209 float16]: #90
[#209 float32]: #89
[#209 float_literal]: #85
[#209 hex_float_literal]: #112
[#209 ident]: #74
[#209 int32]: #91
[#209 int_literal]: #84
[#209 mat_prefix]: #82
[#209 minus]: #63
[#209 multisampled_texture_type]: #124
[#209 paren_expression]: #77
[#209 paren_left]: #87
[#209 pointer]: #93
[#209 primary_expression]: #68
[#209 sampled_texture_type]: #123
[#209 sampler_type]: #121
[#209 singular_expression]: #62
[#209 star]: #66
[#209 storage_texture_type]: #125
[#209 texture_and_sampler_types]: #95
[#209 tilde]: #65
[#209 type_decl_without_ident]: #80
[#209 uint32]: #92
[#209 unary_expression]: #291
[#209 vec_prefix]: #81
[#210 and]: #67
[#210 array_type_decl]: #94
[#210 bang]: #64
[#210 bool_literal]: #86
[#210 callable]: #75
[#210 const_literal]: #76
[#210 decimal_float_literal]: #111
[#210 depth_texture_type]: #122
[#210 float16]: #90
[#210 float32]: #89
[#210 float_literal]: #85
[#210 hex_float_literal]: #112
[#210 ident]: #74
[#210 int32]: #91
[#210 int_literal]: #84
[#210 mat_prefix]: #82
[#210 minus]: #63
[#210 multisampled_texture_type]: #124
[#210 paren_expression]: #77
[#210 paren_left]: #87
[#210 pointer]: #93
[#210 primary_expression]: #68
[#210 sampled_texture_type]: #123
[#210 sampler_type]: #121
[#210 singular_expression]: #62
[#210 star]: #66
[#210 storage_texture_type]: #125
[#210 texture_and_sampler_types]: #95
[#210 tilde]: #65
[#210 type_decl_without_ident]: #80
[#210 uint32]: #92
[#210 unary_expression]: #290
[#210 vec_prefix]: #81
[#213 and]: #67
[#213 array_type_decl]: #94
[#213 bang]: #64
[#213 bool_literal]: #86
[#213 callable]: #75
[#213 const_literal]: #76
[#213 decimal_float_literal]: #111
[#213 depth_texture_type]: #122
[#213 float16]: #90
[#213 float32]: #89
[#213 float_literal]: #85
[#213 hex_float_literal]: #112
[#213 ident]: #74
[#213 int32]: #91
[#213 int_literal]: #84
[#213 mat_prefix]: #82
[#213 minus]: #63
[#213 multisampled_texture_type]: #124
[#213 paren_expression]: #77
[#213 paren_left]: #87
[#213 pointer]: #93
[#213 primary_expression]: #68
[#213 sampled_texture_type]: #123
[#213 sampler_type]: #121
[#213 singular_expression]: #62
[#213 star]: #66
[#213 storage_texture_type]: #125
[#213 texture_and_sampler_types]: #95
[#213 tilde]: #65
[#213 type_decl_without_ident]: #80
[#213 uint32]: #92
[#213 unary_expression]: #289
[#213 vec_prefix]: #81
[#214 and]: #67
[#214 array_type_decl]: #94
[#214 bang]: #64
[#214 bool_literal]: #86
[#214 callable]: #75
[#214 const_literal]: #76
[#214 decimal_float_literal]: #111
[#214 depth_texture_type]: #122
[#214 float16]: #90
[#214 float32]: #89
[#214 float_literal]: #85
[#214 hex_float_literal]: #112
[#214 ident]: #74
[#214 int32]: #91
[#214 int_literal]: #84
[#214 mat_prefix]: #82
[#214 minus]: #63
[#214 multisampled_texture_type]: #124
[#214 paren_expression]: #77
[#214 paren_left]: #87
[#214 pointer]: #93
[#214 primary_expression]: #68
[#214 sampled_texture_type]: #123
[#214 sampler_type]: #121
[#214 singular_expression]: #62
[#214 star]: #66
[#214 storage_texture_type]: #125
[#214 texture_and_sampler_types]: #95
[#214 tilde]: #65
[#214 type_decl_without_ident]: #80
[#214 uint32]: #92
[#214 unary_expression]: #288
[#214 vec_prefix]: #81
[#217 and]: #67
[#217 array_type_decl]: #94
[#217 bang]: #64
[#217 bool_literal]: #86
[#217 callable]: #75
[#217 const_literal]: #76
[#217 decimal_float_literal]: #111
[#217 depth_texture_type]: #122
[#217 float16]: #90
[#217 float32]: #89
[#217 float_literal]: #85
[#217 hex_float_literal]: #112
[#217 ident]: #74
[#217 int32]: #91
[#217 int_literal]: #84
[#217 mat_prefix]: #82
[#217 minus]: #63
[#217 multiplicative_expression]: #287
[#217 multisampled_texture_type]: #124
[#217 paren_expression]: #77
[#217 paren_left]: #87
[#217 pointer]: #93
[#217 primary_expression]: #68
[#217 sampled_texture_type]: #123
[#217 sampler_type]: #121
[#217 singular_expression]: #62
[#217 star]: #66
[#217 storage_texture_type]: #125
[#217 texture_and_sampler_types]: #95
[#217 tilde]: #65
[#217 type_decl_without_ident]: #80
[#217 uint32]: #92
[#217 unary_expression]: #286
[#217 vec_prefix]: #81
[#218 and]: #67
[#218 array_type_decl]: #94
[#218 bang]: #64
[#218 bool_literal]: #86
[#218 callable]: #75
[#218 const_literal]: #76
[#218 decimal_float_literal]: #111
[#218 depth_texture_type]: #122
[#218 float16]: #90
[#218 float32]: #89
[#218 float_literal]: #85
[#218 hex_float_literal]: #112
[#218 ident]: #74
[#218 int32]: #91
[#218 int_literal]: #84
[#218 mat_prefix]: #82
[#218 minus]: #63
[#218 multiplicative_expression]: #285
[#218 multisampled_texture_type]: #124
[#218 paren_expression]: #77
[#218 paren_left]: #87
[#218 pointer]: #93
[#218 primary_expression]: #68
[#218 sampled_texture_type]: #123
[#218 sampler_type]: #121
[#218 singular_expression]: #62
[#218 star]: #66
[#218 storage_texture_type]: #125
[#218 texture_and_sampler_types]: #95
[#218 tilde]: #65
[#218 type_decl_without_ident]: #80
[#218 uint32]: #92
[#218 unary_expression]: #286
[#218 vec_prefix]: #81
[#220 and]: #67
[#220 array_type_decl]: #94
[#220 bang]: #64
[#220 bool_literal]: #86
[#220 callable]: #75
[#220 const_literal]: #76
[#220 decimal_float_literal]: #111
[#220 depth_texture_type]: #122
[#220 float16]: #90
[#220 float32]: #89
[#220 float_literal]: #85
[#220 hex_float_literal]: #112
[#220 ident]: #74
[#220 int32]: #91
[#220 int_literal]: #84
[#220 mat_prefix]: #82
[#220 minus]: #63
[#220 multisampled_texture_type]: #124
[#220 paren_expression]: #77
[#220 paren_left]: #87
[#220 pointer]: #93
[#220 primary_expression]: #68
[#220 sampled_texture_type]: #123
[#220 sampler_type]: #121
[#220 singular_expression]: #62
[#220 star]: #66
[#220 storage_texture_type]: #125
[#220 texture_and_sampler_types]: #95
[#220 tilde]: #65
[#220 type_decl_without_ident]: #80
[#220 uint32]: #92
[#220 unary_expression]: #284
[#220 vec_prefix]: #81
[#222 and]: #67
[#222 array_type_decl]: #94
[#222 bang]: #64
[#222 bool_literal]: #86
[#222 callable]: #75
[#222 const_literal]: #76
[#222 decimal_float_literal]: #111
[#222 depth_texture_type]: #122
[#222 float16]: #90
[#222 float32]: #89
[#222 float_literal]: #85
[#222 hex_float_literal]: #112
[#222 ident]: #74
[#222 int32]: #91
[#222 int_literal]: #84
[#222 mat_prefix]: #82
[#222 minus]: #63
[#222 multisampled_texture_type]: #124
[#222 paren_expression]: #77
[#222 paren_left]: #87
[#222 pointer]: #93
[#222 primary_expression]: #68
[#222 sampled_texture_type]: #123
[#222 sampler_type]: #121
[#222 singular_expression]: #62
[#222 star]: #66
[#222 storage_texture_type]: #125
[#222 texture_and_sampler_types]: #95
[#222 tilde]: #65
[#222 type_decl_without_ident]: #80
[#222 uint32]: #92
[#222 unary_expression]: #283
[#222 vec_prefix]: #81
[#224 and]: #67
[#224 array_type_decl]: #94
[#224 bang]: #64
[#224 bool_literal]: #86
[#224 callable]: #75
[#224 const_literal]: #76
[#224 decimal_float_literal]: #111
[#224 depth_texture_type]: #122
[#224 float16]: #90
[#224 float32]: #89
[#224 float_literal]: #85
[#224 hex_float_literal]: #112
[#224 ident]: #74
[#224 int32]: #91
[#224 int_literal]: #84
[#224 mat_prefix]: #82
[#224 minus]: #63
[#224 multisampled_texture_type]: #124
[#224 paren_expression]: #77
[#224 paren_left]: #87
[#224 pointer]: #93
[#224 primary_expression]: #68
[#224 sampled_texture_type]: #123
[#224 sampler_type]: #121
[#224 singular_expression]: #62
[#224 star]: #66
[#224 storage_texture_type]: #125
[#224 texture_and_sampler_types]: #95
[#224 tilde]: #65
[#224 type_decl_without_ident]: #80
[#224 uint32]: #92
[#224 unary_expression]: #282
[#224 vec_prefix]: #81
[#225 additive_expression]: #59
[#225 and]: #67
[#225 array_type_decl]: #94
[#225 bang]: #64
[#225 bool_literal]: #86
[#225 callable]: #75
[#225 const_literal]: #76
[#225 decimal_float_literal]: #111
[#225 depth_texture_type]: #122
[#225 float16]: #90
[#225 float32]: #89
[#225 float_literal]: #85
[#225 hex_float_literal]: #112
[#225 ident]: #74
[#225 int32]: #91
[#225 int_literal]: #84
[#225 mat_prefix]: #82
[#225 minus]: #63
[#225 multiplicative_expression]: #61
[#225 multisampled_texture_type]: #124
[#225 paren_expression]: #77
[#225 paren_left]: #87
[#225 pointer]: #93
[#225 primary_expression]: #68
[#225 sampled_texture_type]: #123
[#225 sampler_type]: #121
[#225 shift_expression]: #281
[#225 singular_expression]: #62
[#225 star]: #66
[#225 storage_texture_type]: #125
[#225 texture_and_sampler_types]: #95
[#225 tilde]: #65
[#225 type_decl_without_ident]: #80
[#225 uint32]: #92
[#225 unary_expression]: #274
[#225 vec_prefix]: #81
[#226 additive_expression]: #59
[#226 and]: #67
[#226 array_type_decl]: #94
[#226 bang]: #64
[#226 bool_literal]: #86
[#226 callable]: #75
[#226 const_literal]: #76
[#226 decimal_float_literal]: #111
[#226 depth_texture_type]: #122
[#226 float16]: #90
[#226 float32]: #89
[#226 float_literal]: #85
[#226 hex_float_literal]: #112
[#226 ident]: #74
[#226 int32]: #91
[#226 int_literal]: #84
[#226 mat_prefix]: #82
[#226 minus]: #63
[#226 multiplicative_expression]: #61
[#226 multisampled_texture_type]: #124
[#226 paren_expression]: #77
[#226 paren_left]: #87
[#226 pointer]: #93
[#226 primary_expression]: #68
[#226 sampled_texture_type]: #123
[#226 sampler_type]: #121
[#226 shift_expression]: #280
[#226 singular_expression]: #62
[#226 star]: #66
[#226 storage_texture_type]: #125
[#226 texture_and_sampler_types]: #95
[#226 tilde]: #65
[#226 type_decl_without_ident]: #80
[#226 uint32]: #92
[#226 unary_expression]: #274
[#226 vec_prefix]: #81
[#227 additive_expression]: #59
[#227 and]: #67
[#227 array_type_decl]: #94
[#227 bang]: #64
[#227 bool_literal]: #86
[#227 callable]: #75
[#227 const_literal]: #76
[#227 decimal_float_literal]: #111
[#227 depth_texture_type]: #122
[#227 float16]: #90
[#227 float32]: #89
[#227 float_literal]: #85
[#227 hex_float_literal]: #112
[#227 ident]: #74
[#227 int32]: #91
[#227 int_literal]: #84
[#227 mat_prefix]: #82
[#227 minus]: #63
[#227 multiplicative_expression]: #61
[#227 multisampled_texture_type]: #124
[#227 paren_expression]: #77
[#227 paren_left]: #87
[#227 pointer]: #93
[#227 primary_expression]: #68
[#227 sampled_texture_type]: #123
[#227 sampler_type]: #121
[#227 shift_expression]: #279
[#227 singular_expression]: #62
[#227 star]: #66
[#227 storage_texture_type]: #125
[#227 texture_and_sampler_types]: #95
[#227 tilde]: #65
[#227 type_decl_without_ident]: #80
[#227 uint32]: #92
[#227 unary_expression]: #274
[#227 vec_prefix]: #81
[#228 additive_expression]: #59
[#228 and]: #67
[#228 array_type_decl]: #94
[#228 bang]: #64
[#228 bool_literal]: #86
[#228 callable]: #75
[#228 const_literal]: #76
[#228 decimal_float_literal]: #111
[#228 depth_texture_type]: #122
[#228 float16]: #90
[#228 float32]: #89
[#228 float_literal]: #85
[#228 hex_float_literal]: #112
[#228 ident]: #74
[#228 int32]: #91
[#228 int_literal]: #84
[#228 mat_prefix]: #82
[#228 minus]: #63
[#228 multiplicative_expression]: #61
[#228 multisampled_texture_type]: #124
[#228 paren_expression]: #77
[#228 paren_left]: #87
[#228 pointer]: #93
[#228 primary_expression]: #68
[#228 sampled_texture_type]: #123
[#228 sampler_type]: #121
[#228 shift_expression]: #278
[#228 singular_expression]: #62
[#228 star]: #66
[#228 storage_texture_type]: #125
[#228 texture_and_sampler_types]: #95
[#228 tilde]: #65
[#228 type_decl_without_ident]: #80
[#228 uint32]: #92
[#228 unary_expression]: #274
[#228 vec_prefix]: #81
[#229 additive_expression]: #59
[#229 and]: #67
[#229 array_type_decl]: #94
[#229 bang]: #64
[#229 bool_literal]: #86
[#229 callable]: #75
[#229 const_literal]: #76
[#229 decimal_float_literal]: #111
[#229 depth_texture_type]: #122
[#229 float16]: #90
[#229 float32]: #89
[#229 float_literal]: #85
[#229 hex_float_literal]: #112
[#229 ident]: #74
[#229 int32]: #91
[#229 int_literal]: #84
[#229 mat_prefix]: #82
[#229 minus]: #63
[#229 multiplicative_expression]: #61
[#229 multisampled_texture_type]: #124
[#229 paren_expression]: #77
[#229 paren_left]: #87
[#229 pointer]: #93
[#229 primary_expression]: #68
[#229 sampled_texture_type]: #123
[#229 sampler_type]: #121
[#229 shift_expression]: #277
[#229 singular_expression]: #62
[#229 star]: #66
[#229 storage_texture_type]: #125
[#229 texture_and_sampler_types]: #95
[#229 tilde]: #65
[#229 type_decl_without_ident]: #80
[#229 uint32]: #92
[#229 unary_expression]: #274
[#229 vec_prefix]: #81
[#230 additive_expression]: #59
[#230 and]: #67
[#230 array_type_decl]: #94
[#230 bang]: #64
[#230 bool_literal]: #86
[#230 callable]: #75
[#230 const_literal]: #76
[#230 decimal_float_literal]: #111
[#230 depth_texture_type]: #122
[#230 float16]: #90
[#230 float32]: #89
[#230 float_literal]: #85
[#230 hex_float_literal]: #112
[#230 ident]: #74
[#230 int32]: #91
[#230 int_literal]: #84
[#230 mat_prefix]: #82
[#230 minus]: #63
[#230 multiplicative_expression]: #61
[#230 multisampled_texture_type]: #124
[#230 paren_expression]: #77
[#230 paren_left]: #87
[#230 pointer]: #93
[#230 primary_expression]: #68
[#230 sampled_texture_type]: #123
[#230 sampler_type]: #121
[#230 shift_expression]: #276
[#230 singular_expression]: #62
[#230 star]: #66
[#230 storage_texture_type]: #125
[#230 texture_and_sampler_types]: #95
[#230 tilde]: #65
[#230 type_decl_without_ident]: #80
[#230 uint32]: #92
[#230 unary_expression]: #274
[#230 vec_prefix]: #81
[#236 additive_expression]: #59
[#236 and]: #67
[#236 array_type_decl]: #94
[#236 bang]: #64
[#236 bool_literal]: #86
[#236 callable]: #75
[#236 const_literal]: #76
[#236 decimal_float_literal]: #111
[#236 depth_texture_type]: #122
[#236 float16]: #90
[#236 float32]: #89
[#236 float_literal]: #85
[#236 hex_float_literal]: #112
[#236 ident]: #74
[#236 int32]: #91
[#236 int_literal]: #84
[#236 mat_prefix]: #82
[#236 minus]: #63
[#236 multiplicative_expression]: #61
[#236 multisampled_texture_type]: #124
[#236 paren_expression]: #77
[#236 paren_left]: #87
[#236 pointer]: #93
[#236 primary_expression]: #68
[#236 relational_expression]: #275
[#236 sampled_texture_type]: #123
[#236 sampler_type]: #121
[#236 shift_expression]: #55
[#236 singular_expression]: #62
[#236 star]: #66
[#236 storage_texture_type]: #125
[#236 texture_and_sampler_types]: #95
[#236 tilde]: #65
[#236 type_decl_without_ident]: #80
[#236 uint32]: #92
[#236 unary_expression]: #274
[#236 vec_prefix]: #81
[#238 additive_expression]: #59
[#238 and]: #67
[#238 array_type_decl]: #94
[#238 bang]: #64
[#238 bool_literal]: #86
[#238 callable]: #75
[#238 const_literal]: #76
[#238 decimal_float_literal]: #111
[#238 depth_texture_type]: #122
[#238 float16]: #90
[#238 float32]: #89
[#238 float_literal]: #85
[#238 hex_float_literal]: #112
[#238 ident]: #74
[#238 int32]: #91
[#238 int_literal]: #84
[#238 mat_prefix]: #82
[#238 minus]: #63
[#238 multiplicative_expression]: #61
[#238 multisampled_texture_type]: #124
[#238 paren_expression]: #77
[#238 paren_left]: #87
[#238 pointer]: #93
[#238 primary_expression]: #68
[#238 relational_expression]: #273
[#238 sampled_texture_type]: #123
[#238 sampler_type]: #121
[#238 shift_expression]: #55
[#238 singular_expression]: #62
[#238 star]: #66
[#238 storage_texture_type]: #125
[#238 texture_and_sampler_types]: #95
[#238 tilde]: #65
[#238 type_decl_without_ident]: #80
[#238 uint32]: #92
[#238 unary_expression]: #274
[#238 vec_prefix]: #81
[#240 additive_expression]: #59
[#240 and]: #67
[#240 array_type_decl]: #94
[#240 bang]: #64
[#240 binary_and_expression]: #56
[#240 binary_or_expression]: #57
[#240 binary_xor_expression]: #58
[#240 bitwise_expression]: #54
[#240 bool_literal]: #86
[#240 callable]: #75
[#240 const_literal]: #76
[#240 decimal_float_literal]: #111
[#240 depth_texture_type]: #122
[#240 expression]: #272
[#240 float16]: #90
[#240 float32]: #89
[#240 float_literal]: #85
[#240 hex_float_literal]: #112
[#240 ident]: #74
[#240 int32]: #91
[#240 int_literal]: #84
[#240 mat_prefix]: #82
[#240 minus]: #63
[#240 multiplicative_expression]: #61
[#240 multisampled_texture_type]: #124
[#240 paren_expression]: #77
[#240 paren_left]: #87
[#240 pointer]: #93
[#240 primary_expression]: #68
[#240 relational_expression]: #51
[#240 sampled_texture_type]: #123
[#240 sampler_type]: #121
[#240 shift_expression]: #55
[#240 short_circuit_and_expression]: #53
[#240 short_circuit_or_expression]: #52
[#240 singular_expression]: #62
[#240 star]: #66
[#240 storage_texture_type]: #125
[#240 texture_and_sampler_types]: #95
[#240 tilde]: #65
[#240 type_decl_without_ident]: #80
[#240 uint32]: #92
[#240 unary_expression]: #60
[#240 vec_prefix]: #81
[#241 additive_expression]: #59
[#241 and]: #67
[#241 array_type_decl]: #94
[#241 bang]: #64
[#241 binary_and_expression]: #56
[#241 binary_or_expression]: #57
[#241 binary_xor_expression]: #58
[#241 bitwise_expression]: #54
[#241 bool_literal]: #86
[#241 callable]: #75
[#241 const_literal]: #76
[#241 decimal_float_literal]: #111
[#241 depth_texture_type]: #122
[#241 expression]: #271
[#241 float16]: #90
[#241 float32]: #89
[#241 float_literal]: #85
[#241 hex_float_literal]: #112
[#241 ident]: #74
[#241 int32]: #91
[#241 int_literal]: #84
[#241 mat_prefix]: #82
[#241 minus]: #63
[#241 multiplicative_expression]: #61
[#241 multisampled_texture_type]: #124
[#241 paren_expression]: #77
[#241 paren_left]: #87
[#241 pointer]: #93
[#241 primary_expression]: #68
[#241 relational_expression]: #51
[#241 sampled_texture_type]: #123
[#241 sampler_type]: #121
[#241 shift_expression]: #55
[#241 short_circuit_and_expression]: #53
[#241 short_circuit_or_expression]: #52
[#241 singular_expression]: #62
[#241 star]: #66
[#241 storage_texture_type]: #125
[#241 texture_and_sampler_types]: #95
[#241 tilde]: #65
[#241 type_decl_without_ident]: #80
[#241 uint32]: #92
[#241 unary_expression]: #60
[#241 vec_prefix]: #81
[#242 additive_expression]: #59
[#242 and]: #67
[#242 array_type_decl]: #94
[#242 bang]: #64
[#242 binary_and_expression]: #56
[#242 binary_or_expression]: #57
[#242 binary_xor_expression]: #58
[#242 bitwise_expression]: #54
[#242 bool_literal]: #86
[#242 callable]: #75
[#242 const_literal]: #76
[#242 decimal_float_literal]: #111
[#242 depth_texture_type]: #122
[#242 expression]: #270
[#242 float16]: #90
[#242 float32]: #89
[#242 float_literal]: #85
[#242 hex_float_literal]: #112
[#242 ident]: #74
[#242 int32]: #91
[#242 int_literal]: #84
[#242 mat_prefix]: #82
[#242 minus]: #63
[#242 multiplicative_expression]: #61
[#242 multisampled_texture_type]: #124
[#242 paren_expression]: #77
[#242 paren_left]: #87
[#242 pointer]: #93
[#242 primary_expression]: #68
[#242 relational_expression]: #51
[#242 sampled_texture_type]: #123
[#242 sampler_type]: #121
[#242 shift_expression]: #55
[#242 short_circuit_and_expression]: #53
[#242 short_circuit_or_expression]: #52
[#242 singular_expression]: #62
[#242 star]: #66
[#242 storage_texture_type]: #125
[#242 texture_and_sampler_types]: #95
[#242 tilde]: #65
[#242 type_decl_without_ident]: #80
[#242 uint32]: #92
[#242 unary_expression]: #60
[#242 vec_prefix]: #81
[#243 interpolation_type_name]: #266
[#244 additive_expression]: #59
[#244 and]: #67
[#244 array_type_decl]: #94
[#244 bang]: #64
[#244 binary_and_expression]: #56
[#244 binary_or_expression]: #57
[#244 binary_xor_expression]: #58
[#244 bitwise_expression]: #54
[#244 bool_literal]: #86
[#244 callable]: #75
[#244 const_literal]: #76
[#244 decimal_float_literal]: #111
[#244 depth_texture_type]: #122
[#244 expression]: #265
[#244 float16]: #90
[#244 float32]: #89
[#244 float_literal]: #85
[#244 hex_float_literal]: #112
[#244 ident]: #74
[#244 int32]: #91
[#244 int_literal]: #84
[#244 mat_prefix]: #82
[#244 minus]: #63
[#244 multiplicative_expression]: #61
[#244 multisampled_texture_type]: #124
[#244 paren_expression]: #77
[#244 paren_left]: #87
[#244 pointer]: #93
[#244 primary_expression]: #68
[#244 relational_expression]: #51
[#244 sampled_texture_type]: #123
[#244 sampler_type]: #121
[#244 shift_expression]: #55
[#244 short_circuit_and_expression]: #53
[#244 short_circuit_or_expression]: #52
[#244 singular_expression]: #62
[#244 star]: #66
[#244 storage_texture_type]: #125
[#244 texture_and_sampler_types]: #95
[#244 tilde]: #65
[#244 type_decl_without_ident]: #80
[#244 uint32]: #92
[#244 unary_expression]: #60
[#244 vec_prefix]: #81
[#245 additive_expression]: #59
[#245 and]: #67
[#245 array_type_decl]: #94
[#245 bang]: #64
[#245 binary_and_expression]: #56
[#245 binary_or_expression]: #57
[#245 binary_xor_expression]: #58
[#245 bitwise_expression]: #54
[#245 bool_literal]: #86
[#245 callable]: #75
[#245 const_literal]: #76
[#245 decimal_float_literal]: #111
[#245 depth_texture_type]: #122
[#245 expression]: #264
[#245 float16]: #90
[#245 float32]: #89
[#245 float_literal]: #85
[#245 hex_float_literal]: #112
[#245 ident]: #74
[#245 int32]: #91
[#245 int_literal]: #84
[#245 mat_prefix]: #82
[#245 minus]: #63
[#245 multiplicative_expression]: #61
[#245 multisampled_texture_type]: #124
[#245 paren_expression]: #77
[#245 paren_left]: #87
[#245 pointer]: #93
[#245 primary_expression]: #68
[#245 relational_expression]: #51
[#245 sampled_texture_type]: #123
[#245 sampler_type]: #121
[#245 shift_expression]: #55
[#245 short_circuit_and_expression]: #53
[#245 short_circuit_or_expression]: #52
[#245 singular_expression]: #62
[#245 star]: #66
[#245 storage_texture_type]: #125
[#245 texture_and_sampler_types]: #95
[#245 tilde]: #65
[#245 type_decl_without_ident]: #80
[#245 uint32]: #92
[#245 unary_expression]: #60
[#245 vec_prefix]: #81
[#246 builtin_value_name]: #251
[#247 additive_expression]: #59
[#247 and]: #67
[#247 array_type_decl]: #94
[#247 bang]: #64
[#247 binary_and_expression]: #56
[#247 binary_or_expression]: #57
[#247 binary_xor_expression]: #58
[#247 bitwise_expression]: #54
[#247 bool_literal]: #86
[#247 callable]: #75
[#247 const_literal]: #76
[#247 decimal_float_literal]: #111
[#247 depth_texture_type]: #122
[#247 expression]: #250
[#247 float16]: #90
[#247 float32]: #89
[#247 float_literal]: #85
[#247 hex_float_literal]: #112
[#247 ident]: #74
[#247 int32]: #91
[#247 int_literal]: #84
[#247 mat_prefix]: #82
[#247 minus]: #63
[#247 multiplicative_expression]: #61
[#247 multisampled_texture_type]: #124
[#247 paren_expression]: #77
[#247 paren_left]: #87
[#247 pointer]: #93
[#247 primary_expression]: #68
[#247 relational_expression]: #51
[#247 sampled_texture_type]: #123
[#247 sampler_type]: #121
[#247 shift_expression]: #55
[#247 short_circuit_and_expression]: #53
[#247 short_circuit_or_expression]: #52
[#247 singular_expression]: #62
[#247 star]: #66
[#247 storage_texture_type]: #125
[#247 texture_and_sampler_types]: #95
[#247 tilde]: #65
[#247 type_decl_without_ident]: #80
[#247 uint32]: #92
[#247 unary_expression]: #60
[#247 vec_prefix]: #81
[#248 additive_expression]: #59
[#248 and]: #67
[#248 array_type_decl]: #94
[#248 bang]: #64
[#248 binary_and_expression]: #56
[#248 binary_or_expression]: #57
[#248 binary_xor_expression]: #58
[#248 bitwise_expression]: #54
[#248 bool_literal]: #86
[#248 callable]: #75
[#248 const_literal]: #76
[#248 decimal_float_literal]: #111
[#248 depth_texture_type]: #122
[#248 expression]: #249
[#248 float16]: #90
[#248 float32]: #89
[#248 float_literal]: #85
[#248 hex_float_literal]: #112
[#248 ident]: #74
[#248 int32]: #91
[#248 int_literal]: #84
[#248 mat_prefix]: #82
[#248 minus]: #63
[#248 multiplicative_expression]: #61
[#248 multisampled_texture_type]: #124
[#248 paren_expression]: #77
[#248 paren_left]: #87
[#248 pointer]: #93
[#248 primary_expression]: #68
[#248 relational_expression]: #51
[#248 sampled_texture_type]: #123
[#248 sampler_type]: #121
[#248 shift_expression]: #55
[#248 short_circuit_and_expression]: #53
[#248 short_circuit_or_expression]: #52
[#248 singular_expression]: #62
[#248 star]: #66
[#248 storage_texture_type]: #125
[#248 texture_and_sampler_types]: #95
[#248 tilde]: #65
[#248 type_decl_without_ident]: #80
[#248 uint32]: #92
[#248 unary_expression]: #60
[#248 vec_prefix]: #81
[#249 attrib_end]: #508
[#249 attrib_end/0.0]: #498
[#249 comma]: #500
[#250 attrib_end]: #507
[#250 attrib_end/0.0]: #498
[#250 comma]: #500
[#251 attrib_end]: #506
[#251 attrib_end/0.0]: #498
[#251 comma]: #500
[#264 attrib_end]: #505
[#264 attrib_end/0.0]: #498
[#264 comma]: #500
[#265 attrib_end]: #504
[#265 attrib_end/0.0]: #498
[#265 comma]: #500
[#266 attrib_end]: #502
[#266 attrib_end/0.0]: #498
[#266 comma]: #503
[#270 attrib_end]: #501
[#270 attrib_end/0.0]: #498
[#270 comma]: #500
[#271 attrib_end]: #499
[#271 attrib_end/0.0]: #498
[#271 comma]: #500
[#272 attrib_end]: #496
[#272 attrib_end/0.0]: #498
[#272 comma]: #497
[#274 shift_left]: #213
[#274 shift_right]: #214
[#285 forward_slash]: #209
[#285 modulo]: #210
[#285 star]: #208
[#287 forward_slash]: #209
[#287 modulo]: #210
[#287 star]: #208
[#293 bracket_left]: #199
[#293 period]: #200
[#293 postfix_expression]: #495
[#293 postfix_expression/1.2]: #494
[#294 bracket_left]: #199
[#294 period]: #200
[#294 postfix_expression]: #493
[#294 postfix_expression/2.2]: #492
[#304 bracket_right]: #490
[#305 paren_right]: #489
[#306 additive_expression]: #59
[#306 and]: #67
[#306 array_type_decl]: #94
[#306 bang]: #64
[#306 binary_and_expression]: #56
[#306 binary_or_expression]: #57
[#306 binary_xor_expression]: #58
[#306 bitwise_expression]: #54
[#306 bool_literal]: #86
[#306 callable]: #75
[#306 const_literal]: #76
[#306 decimal_float_literal]: #111
[#306 depth_texture_type]: #122
[#306 expression]: #488
[#306 float16]: #90
[#306 float32]: #89
[#306 float_literal]: #85
[#306 hex_float_literal]: #112
[#306 ident]: #74
[#306 int32]: #91
[#306 int_literal]: #84
[#306 mat_prefix]: #82
[#306 minus]: #63
[#306 multiplicative_expression]: #61
[#306 multisampled_texture_type]: #124
[#306 paren_expression]: #77
[#306 paren_left]: #87
[#306 pointer]: #93
[#306 primary_expression]: #68
[#306 relational_expression]: #51
[#306 sampled_texture_type]: #123
[#306 sampler_type]: #121
[#306 shift_expression]: #55
[#306 short_circuit_and_expression]: #53
[#306 short_circuit_or_expression]: #52
[#306 singular_expression]: #62
[#306 star]: #66
[#306 storage_texture_type]: #125
[#306 texture_and_sampler_types]: #95
[#306 tilde]: #65
[#306 type_decl_without_ident]: #80
[#306 uint32]: #92
[#306 unary_expression]: #60
[#306 vec_prefix]: #81
[#308 additive_expression]: #59
[#308 and]: #67
[#308 argument_expression_list/0.1/0.0/0]: #487
[#308 argument_expression_list/0.1/0.0/0/0.0]: #308
[#308 array_type_decl]: #94
[#308 bang]: #64
[#308 binary_and_expression]: #56
[#308 binary_or_expression]: #57
[#308 binary_xor_expression]: #58
[#308 bitwise_expression]: #54
[#308 bool_literal]: #86
[#308 callable]: #75
[#308 const_literal]: #76
[#308 decimal_float_literal]: #111
[#308 depth_texture_type]: #122
[#308 expression]: #309
[#308 float16]: #90
[#308 float32]: #89
[#308 float_literal]: #85
[#308 hex_float_literal]: #112
[#308 ident]: #74
[#308 int32]: #91
[#308 int_literal]: #84
[#308 mat_prefix]: #82
[#308 minus]: #63
[#308 multiplicative_expression]: #61
[#308 multisampled_texture_type]: #124
[#308 paren_expression]: #77
[#308 paren_left]: #87
[#308 pointer]: #93
[#308 primary_expression]: #68
[#308 relational_expression]: #51
[#308 sampled_texture_type]: #123
[#308 sampler_type]: #121
[#308 shift_expression]: #55
[#308 short_circuit_and_expression]: #53
[#308 short_circuit_or_expression]: #52
[#308 singular_expression]: #62
[#308 star]: #66
[#308 storage_texture_type]: #125
[#308 texture_and_sampler_types]: #95
[#308 tilde]: #65
[#308 type_decl_without_ident]: #80
[#308 uint32]: #92
[#308 unary_expression]: #60
[#308 vec_prefix]: #81
[#309 comma]: #486
[#310 greater_than]: #485
[#313 less_than]: #193
[#314 array_type_decl/0.3]: #483
[#314 comma]: #484
[#317 comma]: #482
[#323 greater_than]: #481
[#324 greater_than]: #480
[#325 comma]: #479
[#342 brace_right]: #477
[#344 and]: #380
[#344 assignment_statement]: #357
[#344 brace_left]: #187
[#344 break_statement]: #354
[#344 compound_statement]: #358
[#344 compound_statement/0.1/0]: #476
[#344 continue_statement]: #355
[#344 decrement_statement]: #360
[#344 for_statement]: #350
[#344 func_call_statement]: #352
[#344 ident]: #368
[#344 if_clause]: #363
[#344 if_statement]: #347
[#344 increment_statement]: #359
[#344 lhs_expression]: #374
[#344 lhs_expression/0.0]: #376
[#344 lhs_expression/0.0/0]: #377
[#344 lhs_expression/0.0/0/0.0]: #378
[#344 loop_statement]: #349
[#344 return_statement]: #346
[#344 semicolon]: #345
[#344 star]: #379
[#344 statement]: #344
[#344 static_assert_statement]: #361
[#344 switch_statement]: #348
[#344 variable_decl]: #369
[#344 variable_statement]: #353
[#344 while_statement]: #351
[#346 semicolon]: #475
[#352 semicolon]: #474
[#353 semicolon]: #473
[#354 semicolon]: #472
[#355 semicolon]: #471
[#356 semicolon]: #470
[#357 semicolon]: #469
[#359 semicolon]: #468
[#360 semicolon]: #467
[#361 semicolon]: #466
[#362 additive_expression]: #59
[#362 and]: #67
[#362 array_type_decl]: #94
[#362 bang]: #64
[#362 binary_and_expression]: #56
[#362 binary_or_expression]: #57
[#362 binary_xor_expression]: #58
[#362 bitwise_expression]: #54
[#362 bool_literal]: #86
[#362 callable]: #75
[#362 const_literal]: #76
[#362 decimal_float_literal]: #111
[#362 depth_texture_type]: #122
[#362 expression]: #465
[#362 float16]: #90
[#362 float32]: #89
[#362 float_literal]: #85
[#362 hex_float_literal]: #112
[#362 ident]: #74
[#362 int32]: #91
[#362 int_literal]: #84
[#362 mat_prefix]: #82
[#362 minus]: #63
[#362 multiplicative_expression]: #61
[#362 multisampled_texture_type]: #124
[#362 paren_expression]: #77
[#362 paren_left]: #87
[#362 pointer]: #93
[#362 primary_expression]: #68
[#362 relational_expression]: #51
[#362 return_statement/0.1]: #464
[#362 sampled_texture_type]: #123
[#362 sampler_type]: #121
[#362 shift_expression]: #55
[#362 short_circuit_and_expression]: #53
[#362 short_circuit_or_expression]: #52
[#362 singular_expression]: #62
[#362 star]: #66
[#362 storage_texture_type]: #125
[#362 texture_and_sampler_types]: #95
[#362 tilde]: #65
[#362 type_decl_without_ident]: #80
[#362 uint32]: #92
[#362 unary_expression]: #60
[#362 vec_prefix]: #81
[#363 else_if_clause]: #462
[#363 if_statement/0.1]: #460
[#363 if_statement/0.1/0]: #461
[#364 additive_expression]: #59
[#364 and]: #67
[#364 array_type_decl]: #94
[#364 bang]: #64
[#364 binary_and_expression]: #56
[#364 binary_or_expression]: #57
[#364 binary_xor_expression]: #58
[#364 bitwise_expression]: #54
[#364 bool_literal]: #86
[#364 callable]: #75
[#364 const_literal]: #76
[#364 decimal_float_literal]: #111
[#364 depth_texture_type]: #122
[#364 expression]: #459
[#364 float16]: #90
[#364 float32]: #89
[#364 float_literal]: #85
[#364 hex_float_literal]: #112
[#364 ident]: #74
[#364 int32]: #91
[#364 int_literal]: #84
[#364 mat_prefix]: #82
[#364 minus]: #63
[#364 multiplicative_expression]: #61
[#364 multisampled_texture_type]: #124
[#364 paren_expression]: #77
[#364 paren_left]: #87
[#364 pointer]: #93
[#364 primary_expression]: #68
[#364 relational_expression]: #51
[#364 sampled_texture_type]: #123
[#364 sampler_type]: #121
[#364 shift_expression]: #55
[#364 short_circuit_and_expression]: #53
[#364 short_circuit_or_expression]: #52
[#364 singular_expression]: #62
[#364 star]: #66
[#364 storage_texture_type]: #125
[#364 texture_and_sampler_types]: #95
[#364 tilde]: #65
[#364 type_decl_without_ident]: #80
[#364 uint32]: #92
[#364 unary_expression]: #60
[#364 vec_prefix]: #81
[#365 brace_left]: #458
[#366 paren_left]: #457
[#367 additive_expression]: #59
[#367 and]: #67
[#367 array_type_decl]: #94
[#367 bang]: #64
[#367 binary_and_expression]: #56
[#367 binary_or_expression]: #57
[#367 binary_xor_expression]: #58
[#367 bitwise_expression]: #54
[#367 bool_literal]: #86
[#367 callable]: #75
[#367 const_literal]: #76
[#367 decimal_float_literal]: #111
[#367 depth_texture_type]: #122
[#367 expression]: #456
[#367 float16]: #90
[#367 float32]: #89
[#367 float_literal]: #85
[#367 hex_float_literal]: #112
[#367 ident]: #74
[#367 int32]: #91
[#367 int_literal]: #84
[#367 mat_prefix]: #82
[#367 minus]: #63
[#367 multiplicative_expression]: #61
[#367 multisampled_texture_type]: #124
[#367 paren_expression]: #77
[#367 paren_left]: #87
[#367 pointer]: #93
[#367 primary_expression]: #68
[#367 relational_expression]: #51
[#367 sampled_texture_type]: #123
[#367 sampler_type]: #121
[#367 shift_expression]: #55
[#367 short_circuit_and_expression]: #53
[#367 short_circuit_or_expression]: #52
[#367 singular_expression]: #62
[#367 star]: #66
[#367 storage_texture_type]: #125
[#367 texture_and_sampler_types]: #95
[#367 tilde]: #65
[#367 type_decl_without_ident]: #80
[#367 uint32]: #92
[#367 unary_expression]: #60
[#367 vec_prefix]: #81
[#368 argument_expression_list]: #455
[#368 paren_left]: #196
[#370 ident]: #453
[#370 variable_ident_decl]: #454
[#370 variable_statement/2.1]: #452
[#371 ident]: #450
[#371 variable_ident_decl]: #451
[#371 variable_statement/3.1]: #449
[#374 and_equal]: #434
[#374 assignment_statement/0.1]: #422
[#374 compound_assignment_operator]: #426
[#374 division_equal]: #432
[#374 equal]: #425
[#374 minus_equal]: #430
[#374 minus_minus]: #424
[#374 modulo_equal]: #433
[#374 or_equal]: #435
[#374 plus_equal]: #429
[#374 plus_plus]: #423
[#374 shift_left_equal]: #438
[#374 shift_right_equal]: #437
[#374 times_equal]: #431
[#374 xor_equal]: #436
[#375 additive_expression]: #59
[#375 and]: #67
[#375 array_type_decl]: #94
[#375 bang]: #64
[#375 binary_and_expression]: #56
[#375 binary_or_expression]: #57
[#375 binary_xor_expression]: #58
[#375 bitwise_expression]: #54
[#375 bool_literal]: #86
[#375 callable]: #75
[#375 const_literal]: #76
[#375 decimal_float_literal]: #111
[#375 depth_texture_type]: #122
[#375 expression]: #421
[#375 float16]: #90
[#375 float32]: #89
[#375 float_literal]: #85
[#375 hex_float_literal]: #112
[#375 ident]: #74
[#375 int32]: #91
[#375 int_literal]: #84
[#375 mat_prefix]: #82
[#375 minus]: #63
[#375 multiplicative_expression]: #61
[#375 multisampled_texture_type]: #124
[#375 paren_expression]: #77
[#375 paren_left]: #87
[#375 pointer]: #93
[#375 primary_expression]: #68
[#375 relational_expression]: #51
[#375 sampled_texture_type]: #123
[#375 sampler_type]: #121
[#375 shift_expression]: #55
[#375 short_circuit_and_expression]: #53
[#375 short_circuit_or_expression]: #52
[#375 singular_expression]: #62
[#375 star]: #66
[#375 storage_texture_type]: #125
[#375 texture_and_sampler_types]: #95
[#375 tilde]: #65
[#375 type_decl_without_ident]: #80
[#375 uint32]: #92
[#375 unary_expression]: #60
[#375 vec_prefix]: #81
[#376 core_lhs_expression]: #418
[#376 ident]: #419
[#376 paren_left]: #420
[#378 and]: #380
[#378 lhs_expression/0.0/0]: #417
[#378 lhs_expression/0.0/0/0.0]: #378
[#378 star]: #379
[#381 attr]: #31
[#381 attribute]: #416
[#381 function_header/0.3]: #408
[#381 param]: #413
[#381 param/0.0]: #414
[#381 param/0.0/0]: #415
[#381 param_list]: #409
[#381 param_list/0.0]: #410
[#381 param_list/0.0/0]: #411
[#381 param_list/0.0/0/0.0]: #412
[#382 attr]: #31
[#382 attribute]: #388
[#382 struct_member]: #407
[#382 struct_member/0.0]: #386
[#382 struct_member/0.0/0]: #387
[#384 attr]: #31
[#384 attribute]: #388
[#384 struct_body_decl/0.1/0]: #406
[#384 struct_body_decl/0.1/0/0.0]: #384
[#384 struct_member]: #385
[#384 struct_member/0.0]: #386
[#384 struct_member/0.0/0]: #387
[#385 comma]: #405
[#386 member_ident]: #404
[#388 attr]: #31
[#388 attribute]: #388
[#388 struct_member/0.0/0]: #403
[#391 additive_expression]: #59
[#391 and]: #67
[#391 array_type_decl]: #94
[#391 bang]: #64
[#391 binary_and_expression]: #56
[#391 binary_or_expression]: #57
[#391 binary_xor_expression]: #58
[#391 bitwise_expression]: #54
[#391 bool_literal]: #86
[#391 callable]: #75
[#391 const_literal]: #76
[#391 decimal_float_literal]: #111
[#391 depth_texture_type]: #122
[#391 expression]: #402
[#391 float16]: #90
[#391 float32]: #89
[#391 float_literal]: #85
[#391 hex_float_literal]: #112
[#391 ident]: #74
[#391 int32]: #91
[#391 int_literal]: #84
[#391 mat_prefix]: #82
[#391 minus]: #63
[#391 multiplicative_expression]: #61
[#391 multisampled_texture_type]: #124
[#391 paren_expression]: #77
[#391 paren_left]: #87
[#391 pointer]: #93
[#391 primary_expression]: #68
[#391 relational_expression]: #51
[#391 sampled_texture_type]: #123
[#391 sampler_type]: #121
[#391 shift_expression]: #55
[#391 short_circuit_and_expression]: #53
[#391 short_circuit_or_expression]: #52
[#391 singular_expression]: #62
[#391 star]: #66
[#391 storage_texture_type]: #125
[#391 texture_and_sampler_types]: #95
[#391 tilde]: #65
[#391 type_decl_without_ident]: #80
[#391 uint32]: #92
[#391 unary_expression]: #60
[#391 vec_prefix]: #81
[#395 comma]: #400
[#395 variable_qualifier/0.2]: #399
[#397 colon]: #175
[#399 greater_than]: #566
[#400 access_mode]: #565
[#404 colon]: #564
[#407 comma]: #563
[#407 struct_body_decl/0.3]: #562
[#408 paren_right]: #561
[#410 attr]: #31
[#410 attribute]: #416
[#410 param]: #560
[#410 param/0.0]: #414
[#410 param/0.0/0]: #415
[#412 attr]: #31
[#412 attribute]: #416
[#412 param]: #413
[#412 param/0.0]: #414
[#412 param/0.0/0]: #415
[#412 param_list/0.0/0]: #559
[#412 param_list/0.0/0/0.0]: #412
[#413 comma]: #558
[#414 ident]: #557
[#414 variable_ident_decl]: #556
[#416 attr]: #31
[#416 attribute]: #416
[#416 param/0.0/0]: #555
[#418 bracket_left]: #199
[#418 lhs_expression/0.2]: #553
[#418 period]: #200
[#418 postfix_expression]: #554
[#420 and]: #380
[#420 lhs_expression]: #552
[#420 lhs_expression/0.0]: #376
[#420 lhs_expression/0.0/0]: #377
[#420 lhs_expression/0.0/0/0.0]: #378
[#420 star]: #379
[#421 brace_left]: #187
[#421 compound_statement]: #551
[#422 additive_expression]: #59
[#422 and]: #67
[#422 array_type_decl]: #94
[#422 bang]: #64
[#422 binary_and_expression]: #56
[#422 binary_or_expression]: #57
[#422 binary_xor_expression]: #58
[#422 bitwise_expression]: #54
[#422 bool_literal]: #86
[#422 callable]: #75
[#422 const_literal]: #76
[#422 decimal_float_literal]: #111
[#422 depth_texture_type]: #122
[#422 expression]: #550
[#422 float16]: #90
[#422 float32]: #89
[#422 float_literal]: #85
[#422 hex_float_literal]: #112
[#422 ident]: #74
[#422 int32]: #91
[#422 int_literal]: #84
[#422 mat_prefix]: #82
[#422 minus]: #63
[#422 multiplicative_expression]: #61
[#422 multisampled_texture_type]: #124
[#422 paren_expression]: #77
[#422 paren_left]: #87
[#422 pointer]: #93
[#422 primary_expression]: #68
[#422 relational_expression]: #51
[#422 sampled_texture_type]: #123
[#422 sampler_type]: #121
[#422 shift_expression]: #55
[#422 short_circuit_and_expression]: #53
[#422 short_circuit_or_expression]: #52
[#422 singular_expression]: #62
[#422 star]: #66
[#422 storage_texture_type]: #125
[#422 texture_and_sampler_types]: #95
[#422 tilde]: #65
[#422 type_decl_without_ident]: #80
[#422 uint32]: #92
[#422 unary_expression]: #60
[#422 vec_prefix]: #81
[#449 equal]: #549
[#450 colon]: #175
[#452 equal]: #548
[#453 colon]: #175
[#456 brace_left]: #187
[#456 compound_statement]: #547
[#457 and]: #380
[#457 assignment_statement]: #545
[#457 decrement_statement]: #544
[#457 for_header]: #539
[#457 for_header/0.0]: #540
[#457 for_init]: #541
[#457 func_call_statement]: #546
[#457 ident]: #368
[#457 increment_statement]: #543
[#457 lhs_expression]: #374
[#457 lhs_expression/0.0]: #376
[#457 lhs_expression/0.0/0]: #377
[#457 lhs_expression/0.0/0/0.0]: #378
[#457 star]: #379
[#457 variable_decl]: #369
[#457 variable_statement]: #542
[#458 and]: #380
[#458 assignment_statement]: #357
[#458 brace_left]: #187
[#458 break_statement]: #354
[#458 compound_statement]: #358
[#458 continue_statement]: #355
[#458 decrement_statement]: #360
[#458 for_statement]: #350
[#458 func_call_statement]: #352
[#458 ident]: #368
[#458 if_clause]: #363
[#458 if_statement]: #347
[#458 increment_statement]: #359
[#458 lhs_expression]: #374
[#458 lhs_expression/0.0]: #376
[#458 lhs_expression/0.0/0]: #377
[#458 lhs_expression/0.0/0/0.0]: #378
[#458 loop_statement]: #349
[#458 loop_statement/0.2]: #536
[#458 loop_statement/0.2/0]: #537
[#458 return_statement]: #346
[#458 semicolon]: #345
[#458 star]: #379
[#458 statement]: #538
[#458 static_assert_statement]: #361
[#458 switch_statement]: #348
[#458 variable_decl]: #369
[#458 variable_statement]: #353
[#458 while_statement]: #351
[#459 brace_left]: #535
[#460 else_clause]: #533
[#460 if_statement/0.2]: #532
[#462 else_if_clause]: #462
[#462 if_statement/0.1/0]: #531
[#479 access_mode]: #526
[#482 array_type_decl]: #94
[#482 depth_texture_type]: #122
[#482 float16]: #90
[#482 float32]: #89
[#482 ident]: #311
[#482 int32]: #91
[#482 multisampled_texture_type]: #124
[#482 pointer]: #93
[#482 sampled_texture_type]: #123
[#482 sampler_type]: #121
[#482 storage_texture_type]: #125
[#482 texture_and_sampler_types]: #95
[#482 type_decl]: #525
[#482 type_decl_without_ident]: #312
[#482 uint32]: #92
[#483 greater_than]: #524
[#484 additive_expression]: #521
[#484 and]: #67
[#484 array_type_decl]: #94
[#484 bang]: #64
[#484 binary_and_expression]: #56
[#484 binary_or_expression]: #57
[#484 binary_xor_expression]: #58
[#484 bitwise_expression]: #522
[#484 bool_literal]: #86
[#484 callable]: #75
[#484 const_literal]: #76
[#484 decimal_float_literal]: #111
[#484 depth_texture_type]: #122
[#484 element_count_expression]: #520
[#484 float16]: #90
[#484 float32]: #89
[#484 float_literal]: #85
[#484 hex_float_literal]: #112
[#484 ident]: #74
[#484 int32]: #91
[#484 int_literal]: #84
[#484 mat_prefix]: #82
[#484 minus]: #63
[#484 multiplicative_expression]: #61
[#484 multisampled_texture_type]: #124
[#484 paren_expression]: #77
[#484 paren_left]: #87
[#484 pointer]: #93
[#484 primary_expression]: #68
[#484 sampled_texture_type]: #123
[#484 sampler_type]: #121
[#484 singular_expression]: #62
[#484 star]: #66
[#484 storage_texture_type]: #125
[#484 texture_and_sampler_types]: #95
[#484 tilde]: #65
[#484 type_decl_without_ident]: #80
[#484 uint32]: #92
[#484 unary_expression]: #523
[#484 vec_prefix]: #81
[#485 paren_expression]: #519
[#485 paren_left]: #87
[#488 argument_expression_list/0.1/0.2]: #517
[#488 comma]: #518
[#490 bracket_left]: #199
[#490 period]: #200
[#490 postfix_expression]: #516
[#490 postfix_expression/0.3]: #515
[#497 additive_expression]: #59
[#497 and]: #67
[#497 array_type_decl]: #94
[#497 bang]: #64
[#497 binary_and_expression]: #56
[#497 binary_or_expression]: #57
[#497 binary_xor_expression]: #58
[#497 bitwise_expression]: #54
[#497 bool_literal]: #86
[#497 callable]: #75
[#497 const_literal]: #76
[#497 decimal_float_literal]: #111
[#497 depth_texture_type]: #122
[#497 expression]: #514
[#497 float16]: #90
[#497 float32]: #89
[#497 float_literal]: #85
[#497 hex_float_literal]: #112
[#497 ident]: #74
[#497 int32]: #91
[#497 int_literal]: #84
[#497 mat_prefix]: #82
[#497 minus]: #63
[#497 multiplicative_expression]: #61
[#497 multisampled_texture_type]: #124
[#497 paren_expression]: #77
[#497 paren_left]: #87
[#497 pointer]: #93
[#497 primary_expression]: #68
[#497 relational_expression]: #51
[#497 sampled_texture_type]: #123
[#497 sampler_type]: #121
[#497 shift_expression]: #55
[#497 short_circuit_and_expression]: #53
[#497 short_circuit_or_expression]: #52
[#497 singular_expression]: #62
[#497 star]: #66
[#497 storage_texture_type]: #125
[#497 texture_and_sampler_types]: #95
[#497 tilde]: #65
[#497 type_decl_without_ident]: #80
[#497 uint32]: #92
[#497 unary_expression]: #60
[#497 vec_prefix]: #81
[#498 paren_right]: #513
[#503 interpolation_sample_name]: #509
[#509 attrib_end]: #595
[#509 attrib_end/0.0]: #498
[#509 comma]: #500
[#514 attrib_end]: #593
[#514 attrib_end/0.0]: #498
[#514 comma]: #594
[#521 minus]: #218
[#521 plus]: #217
[#525 comma]: #592
[#525 type_decl_without_ident/7.5]: #591
[#526 greater_than]: #590
[#530 additive_expression]: #59
[#530 and]: #67
[#530 array_type_decl]: #94
[#530 bang]: #64
[#530 binary_and_expression]: #56
[#530 binary_or_expression]: #57
[#530 binary_xor_expression]: #58
[#530 bitwise_expression]: #54
[#530 bool_literal]: #86
[#530 callable]: #75
[#530 const_literal]: #76
[#530 decimal_float_literal]: #111
[#530 depth_texture_type]: #122
[#530 expression]: #589
[#530 float16]: #90
[#530 float32]: #89
[#530 float_literal]: #85
[#530 hex_float_literal]: #112
[#530 ident]: #74
[#530 int32]: #91
[#530 int_literal]: #84
[#530 mat_prefix]: #82
[#530 minus]: #63
[#530 multiplicative_expression]: #61
[#530 multisampled_texture_type]: #124
[#530 paren_expression]: #77
[#530 paren_left]: #87
[#530 pointer]: #93
[#530 primary_expression]: #68
[#530 relational_expression]: #51
[#530 sampled_texture_type]: #123
[#530 sampler_type]: #121
[#530 shift_expression]: #55
[#530 short_circuit_and_expression]: #53
[#530 short_circuit_or_expression]: #52
[#530 singular_expression]: #62
[#530 star]: #66
[#530 storage_texture_type]: #125
[#530 texture_and_sampler_types]: #95
[#530 tilde]: #65
[#530 type_decl_without_ident]: #80
[#530 uint32]: #92
[#530 unary_expression]: #60
[#530 vec_prefix]: #81
[#534 brace_left]: #187
[#534 compound_statement]: #588
[#535 switch_body]: #585
[#535 switch_statement/0.3]: #583
[#535 switch_statement/0.3/0]: #584
[#536 continuing_statement]: #581
[#536 loop_statement/0.3]: #580
[#538 and]: #380
[#538 assignment_statement]: #357
[#538 brace_left]: #187
[#538 break_statement]: #354
[#538 compound_statement]: #358
[#538 continue_statement]: #355
[#538 decrement_statement]: #360
[#538 for_statement]: #350
[#538 func_call_statement]: #352
[#538 ident]: #368
[#538 if_clause]: #363
[#538 if_statement]: #347
[#538 increment_statement]: #359
[#538 lhs_expression]: #374
[#538 lhs_expression/0.0]: #376
[#538 lhs_expression/0.0/0]: #377
[#538 lhs_expression/0.0/0/0.0]: #378
[#538 loop_statement]: #349
[#538 loop_statement/0.2/0]: #579
[#538 return_statement]: #346
[#538 semicolon]: #345
[#538 star]: #379
[#538 statement]: #538
[#538 static_assert_statement]: #361
[#538 switch_statement]: #348
[#538 variable_decl]: #369
[#538 variable_statement]: #353
[#538 while_statement]: #351
[#539 paren_right]: #578
[#540 semicolon]: #577
[#548 additive_expression]: #59
[#548 and]: #67
[#548 array_type_decl]: #94
[#548 bang]: #64
[#548 binary_and_expression]: #56
[#548 binary_or_expression]: #57
[#548 binary_xor_expression]: #58
[#548 bitwise_expression]: #54
[#548 bool_literal]: #86
[#548 callable]: #75
[#548 const_literal]: #76
[#548 decimal_float_literal]: #111
[#548 depth_texture_type]: #122
[#548 expression]: #576
[#548 float16]: #90
[#548 float32]: #89
[#548 float_literal]: #85
[#548 hex_float_literal]: #112
[#548 ident]: #74
[#548 int32]: #91
[#548 int_literal]: #84
[#548 mat_prefix]: #82
[#548 minus]: #63
[#548 multiplicative_expression]: #61
[#548 multisampled_texture_type]: #124
[#548 paren_expression]: #77
[#548 paren_left]: #87
[#548 pointer]: #93
[#548 primary_expression]: #68
[#548 relational_expression]: #51
[#548 sampled_texture_type]: #123
[#548 sampler_type]: #121
[#548 shift_expression]: #55
[#548 short_circuit_and_expression]: #53
[#548 short_circuit_or_expression]: #52
[#548 singular_expression]: #62
[#548 star]: #66
[#548 storage_texture_type]: #125
[#548 texture_and_sampler_types]: #95
[#548 tilde]: #65
[#548 type_decl_without_ident]: #80
[#548 uint32]: #92
[#548 unary_expression]: #60
[#548 vec_prefix]: #81
[#549 additive_expression]: #59
[#549 and]: #67
[#549 array_type_decl]: #94
[#549 bang]: #64
[#549 binary_and_expression]: #56
[#549 binary_or_expression]: #57
[#549 binary_xor_expression]: #58
[#549 bitwise_expression]: #54
[#549 bool_literal]: #86
[#549 callable]: #75
[#549 const_literal]: #76
[#549 decimal_float_literal]: #111
[#549 depth_texture_type]: #122
[#549 expression]: #575
[#549 float16]: #90
[#549 float32]: #89
[#549 float_literal]: #85
[#549 hex_float_literal]: #112
[#549 ident]: #74
[#549 int32]: #91
[#549 int_literal]: #84
[#549 mat_prefix]: #82
[#549 minus]: #63
[#549 multiplicative_expression]: #61
[#549 multisampled_texture_type]: #124
[#549 paren_expression]: #77
[#549 paren_left]: #87
[#549 pointer]: #93
[#549 primary_expression]: #68
[#549 relational_expression]: #51
[#549 sampled_texture_type]: #123
[#549 sampler_type]: #121
[#549 shift_expression]: #55
[#549 short_circuit_and_expression]: #53
[#549 short_circuit_or_expression]: #52
[#549 singular_expression]: #62
[#549 star]: #66
[#549 storage_texture_type]: #125
[#549 texture_and_sampler_types]: #95
[#549 tilde]: #65
[#549 type_decl_without_ident]: #80
[#549 uint32]: #92
[#549 unary_expression]: #60
[#549 vec_prefix]: #81
[#552 paren_right]: #574
[#557 colon]: #175
[#560 comma]: #573
[#560 param_list/0.2]: #572
[#561 arrow]: #570
[#561 function_header/0.5]: #569
[#562 brace_right]: #568
[#564 array_type_decl]: #94
[#564 depth_texture_type]: #122
[#564 float16]: #90
[#564 float32]: #89
[#564 ident]: #311
[#564 int32]: #91
[#564 multisampled_texture_type]: #124
[#564 pointer]: #93
[#564 sampled_texture_type]: #123
[#564 sampler_type]: #121
[#564 storage_texture_type]: #125
[#564 texture_and_sampler_types]: #95
[#564 type_decl]: #567
[#564 type_decl_without_ident]: #312
[#564 uint32]: #92
[#570 attr]: #31
[#570 attribute]: #614
[#570 function_header/0.5/0.1]: #612
[#570 function_header/0.5/0.1/0]: #613
[#577 additive_expression]: #59
[#577 and]: #67
[#577 array_type_decl]: #94
[#577 bang]: #64
[#577 binary_and_expression]: #56
[#577 binary_or_expression]: #57
[#577 binary_xor_expression]: #58
[#577 bitwise_expression]: #54
[#577 bool_literal]: #86
[#577 callable]: #75
[#577 const_literal]: #76
[#577 decimal_float_literal]: #111
[#577 depth_texture_type]: #122
[#577 expression]: #611
[#577 float16]: #90
[#577 float32]: #89
[#577 float_literal]: #85
[#577 for_header/0.2]: #610
[#577 hex_float_literal]: #112
[#577 ident]: #74
[#577 int32]: #91
[#577 int_literal]: #84
[#577 mat_prefix]: #82
[#577 minus]: #63
[#577 multiplicative_expression]: #61
[#577 multisampled_texture_type]: #124
[#577 paren_expression]: #77
[#577 paren_left]: #87
[#577 pointer]: #93
[#577 primary_expression]: #68
[#577 relational_expression]: #51
[#577 sampled_texture_type]: #123
[#577 sampler_type]: #121
[#577 shift_expression]: #55
[#577 short_circuit_and_expression]: #53
[#577 short_circuit_or_expression]: #52
[#577 singular_expression]: #62
[#577 star]: #66
[#577 storage_texture_type]: #125
[#577 texture_and_sampler_types]: #95
[#577 tilde]: #65
[#577 type_decl_without_ident]: #80
[#577 uint32]: #92
[#577 unary_expression]: #60
[#577 vec_prefix]: #81
[#578 brace_left]: #187
[#578 compound_statement]: #609
[#580 brace_right]: #608
[#582 brace_left]: #607
[#582 continuing_compound_statement]: #606
[#583 brace_right]: #605
[#585 switch_body]: #585
[#585 switch_statement/0.3/0]: #604
[#586 additive_expression]: #59
[#586 and]: #67
[#586 array_type_decl]: #94
[#586 bang]: #64
[#586 binary_and_expression]: #56
[#586 binary_or_expression]: #57
[#586 binary_xor_expression]: #58
[#586 bitwise_expression]: #54
[#586 bool_literal]: #86
[#586 callable]: #75
[#586 case_selectors]: #602
[#586 const_literal]: #76
[#586 decimal_float_literal]: #111
[#586 depth_texture_type]: #122
[#586 expression]: #603
[#586 float16]: #90
[#586 float32]: #89
[#586 float_literal]: #85
[#586 hex_float_literal]: #112
[#586 ident]: #74
[#586 int32]: #91
[#586 int_literal]: #84
[#586 mat_prefix]: #82
[#586 minus]: #63
[#586 multiplicative_expression]: #61
[#586 multisampled_texture_type]: #124
[#586 paren_expression]: #77
[#586 paren_left]: #87
[#586 pointer]: #93
[#586 primary_expression]: #68
[#586 relational_expression]: #51
[#586 sampled_texture_type]: #123
[#586 sampler_type]: #121
[#586 shift_expression]: #55
[#586 short_circuit_and_expression]: #53
[#586 short_circuit_or_expression]: #52
[#586 singular_expression]: #62
[#586 star]: #66
[#586 storage_texture_type]: #125
[#586 texture_and_sampler_types]: #95
[#586 tilde]: #65
[#586 type_decl_without_ident]: #80
[#586 uint32]: #92
[#586 unary_expression]: #60
[#586 vec_prefix]: #81
[#587 colon]: #601
[#587 switch_body/1.1]: #600
[#589 brace_left]: #187
[#589 compound_statement]: #599
[#591 greater_than]: #598
[#592 access_mode]: #597
[#594 additive_expression]: #59
[#594 and]: #67
[#594 array_type_decl]: #94
[#594 bang]: #64
[#594 binary_and_expression]: #56
[#594 binary_or_expression]: #57
[#594 binary_xor_expression]: #58
[#594 bitwise_expression]: #54
[#594 bool_literal]: #86
[#594 callable]: #75
[#594 const_literal]: #76
[#594 decimal_float_literal]: #111
[#594 depth_texture_type]: #122
[#594 expression]: #596
[#594 float16]: #90
[#594 float32]: #89
[#594 float_literal]: #85
[#594 hex_float_literal]: #112
[#594 ident]: #74
[#594 int32]: #91
[#594 int_literal]: #84
[#594 mat_prefix]: #82
[#594 minus]: #63
[#594 multiplicative_expression]: #61
[#594 multisampled_texture_type]: #124
[#594 paren_expression]: #77
[#594 paren_left]: #87
[#594 pointer]: #93
[#594 primary_expression]: #68
[#594 relational_expression]: #51
[#594 sampled_texture_type]: #123
[#594 sampler_type]: #121
[#594 shift_expression]: #55
[#594 short_circuit_and_expression]: #53
[#594 short_circuit_or_expression]: #52
[#594 singular_expression]: #62
[#594 star]: #66
[#594 storage_texture_type]: #125
[#594 texture_and_sampler_types]: #95
[#594 tilde]: #65
[#594 type_decl_without_ident]: #80
[#594 uint32]: #92
[#594 unary_expression]: #60
[#594 vec_prefix]: #81
[#596 attrib_end]: #629
[#596 attrib_end/0.0]: #498
[#596 comma]: #500
[#600 brace_left]: #628
[#600 case_compound_statement]: #627
[#602 colon]: #626
[#602 switch_body/0.2]: #625
[#603 case_selectors/0.1]: #621
[#603 case_selectors/0.1/0]: #622
[#603 case_selectors/0.1/0/0.0]: #623
[#603 comma]: #624
[#607 and]: #380
[#607 assignment_statement]: #357
[#607 brace_left]: #187
[#607 break_statement]: #354
[#607 compound_statement]: #358
[#607 continue_statement]: #355
[#607 continuing_compound_statement/0.1]: #618
[#607 continuing_compound_statement/0.1/0]: #619
[#607 decrement_statement]: #360
[#607 for_statement]: #350
[#607 func_call_statement]: #352
[#607 ident]: #368
[#607 if_clause]: #363
[#607 if_statement]: #347
[#607 increment_statement]: #359
[#607 lhs_expression]: #374
[#607 lhs_expression/0.0]: #376
[#607 lhs_expression/0.0/0]: #377
[#607 lhs_expression/0.0/0/0.0]: #378
[#607 loop_statement]: #349
[#607 return_statement]: #346
[#607 semicolon]: #345
[#607 star]: #379
[#607 statement]: #620
[#607 static_assert_statement]: #361
[#607 switch_statement]: #348
[#607 variable_decl]: #369
[#607 variable_statement]: #353
[#607 while_statement]: #351
[#610 semicolon]: #617
[#612 array_type_decl]: #94
[#612 depth_texture_type]: #122
[#612 float16]: #90
[#612 float32]: #89
[#612 ident]: #311
[#612 int32]: #91
[#612 multisampled_texture_type]: #124
[#612 pointer]: #93
[#612 sampled_texture_type]: #123
[#612 sampler_type]: #121
[#612 storage_texture_type]: #125
[#612 texture_and_sampler_types]: #95
[#612 type_decl]: #616
[#612 type_decl_without_ident]: #312
[#612 uint32]: #92
[#614 attr]: #31
[#614 attribute]: #614
[#614 function_header/0.5/0.1/0]: #615
[#617 and]: #380
[#617 assignment_statement]: #646
[#617 decrement_statement]: #645
[#617 for_header/0.4]: #642
[#617 for_update]: #643
[#617 func_call_statement]: #647
[#617 ident]: #368
[#617 increment_statement]: #644
[#617 lhs_expression]: #374
[#617 lhs_expression/0.0]: #376
[#617 lhs_expression/0.0/0]: #377
[#617 lhs_expression/0.0/0/0.0]: #378
[#617 star]: #379
[#618 break_if_statement]: #640
[#618 continuing_compound_statement/0.2]: #639
[#620 and]: #380
[#620 assignment_statement]: #357
[#620 brace_left]: #187
[#620 break_statement]: #354
[#620 compound_statement]: #358
[#620 continue_statement]: #355
[#620 continuing_compound_statement/0.1/0]: #638
[#620 decrement_statement]: #360
[#620 for_statement]: #350
[#620 func_call_statement]: #352
[#620 ident]: #368
[#620 if_clause]: #363
[#620 if_statement]: #347
[#620 increment_statement]: #359
[#620 lhs_expression]: #374
[#620 lhs_expression/0.0]: #376
[#620 lhs_expression/0.0/0]: #377
[#620 lhs_expression/0.0/0/0.0]: #378
[#620 loop_statement]: #349
[#620 return_statement]: #346
[#620 semicolon]: #345
[#620 star]: #379
[#620 statement]: #620
[#620 static_assert_statement]: #361
[#620 switch_statement]: #348
[#620 variable_decl]: #369
[#620 variable_statement]: #353
[#620 while_statement]: #351
[#621 case_selectors/0.2]: #636
[#621 comma]: #637
[#623 case_selectors/0.1/0]: #635
[#623 case_selectors/0.1/0/0.0]: #623
[#623 comma]: #624
[#624 additive_expression]: #59
[#624 and]: #67
[#624 array_type_decl]: #94
[#624 bang]: #64
[#624 binary_and_expression]: #56
[#624 binary_or_expression]: #57
[#624 binary_xor_expression]: #58
[#624 bitwise_expression]: #54
[#624 bool_literal]: #86
[#624 callable]: #75
[#624 const_literal]: #76
[#624 decimal_float_literal]: #111
[#624 depth_texture_type]: #122
[#624 expression]: #634
[#624 float16]: #90
[#624 float32]: #89
[#624 float_literal]: #85
[#624 hex_float_literal]: #112
[#624 ident]: #74
[#624 int32]: #91
[#624 int_literal]: #84
[#624 mat_prefix]: #82
[#624 minus]: #63
[#624 multiplicative_expression]: #61
[#624 multisampled_texture_type]: #124
[#624 paren_expression]: #77
[#624 paren_left]: #87
[#624 pointer]: #93
[#624 primary_expression]: #68
[#624 relational_expression]: #51
[#624 sampled_texture_type]: #123
[#624 sampler_type]: #121
[#624 shift_expression]: #55
[#624 short_circuit_and_expression]: #53
[#624 short_circuit_or_expression]: #52
[#624 singular_expression]: #62
[#624 star]: #66
[#624 storage_texture_type]: #125
[#624 texture_and_sampler_types]: #95
[#624 tilde]: #65
[#624 type_decl_without_ident]: #80
[#624 uint32]: #92
[#624 unary_expression]: #60
[#624 vec_prefix]: #81
[#625 brace_left]: #628
[#625 case_compound_statement]: #633
[#628 and]: #380
[#628 assignment_statement]: #357
[#628 brace_left]: #187
[#628 break_statement]: #354
[#628 case_compound_statement/0.1]: #630
[#628 case_compound_statement/0.1/0]: #631
[#628 compound_statement]: #358
[#628 continue_statement]: #355
[#628 decrement_statement]: #360
[#628 for_statement]: #350
[#628 func_call_statement]: #352
[#628 ident]: #368
[#628 if_clause]: #363
[#628 if_statement]: #347
[#628 increment_statement]: #359
[#628 lhs_expression]: #374
[#628 lhs_expression/0.0]: #376
[#628 lhs_expression/0.0/0]: #377
[#628 lhs_expression/0.0/0/0.0]: #378
[#628 loop_statement]: #349
[#628 return_statement]: #346
[#628 semicolon]: #345
[#628 star]: #379
[#628 statement]: #632
[#628 static_assert_statement]: #361
[#628 switch_statement]: #348
[#628 variable_decl]: #369
[#628 variable_statement]: #353
[#628 while_statement]: #351
[#630 case_compound_statement/0.2]: #651
[#630 fallthrough_statement]: #652
[#632 and]: #380
[#632 assignment_statement]: #357
[#632 brace_left]: #187
[#632 break_statement]: #354
[#632 case_compound_statement/0.1/0]: #650
[#632 compound_statement]: #358
[#632 continue_statement]: #355
[#632 decrement_statement]: #360
[#632 for_statement]: #350
[#632 func_call_statement]: #352
[#632 ident]: #368
[#632 if_clause]: #363
[#632 if_statement]: #347
[#632 increment_statement]: #359
[#632 lhs_expression]: #374
[#632 lhs_expression/0.0]: #376
[#632 lhs_expression/0.0/0]: #377
[#632 lhs_expression/0.0/0/0.0]: #378
[#632 loop_statement]: #349
[#632 return_statement]: #346
[#632 semicolon]: #345
[#632 star]: #379
[#632 statement]: #632
[#632 static_assert_statement]: #361
[#632 switch_statement]: #348
[#632 variable_decl]: #369
[#632 variable_statement]: #353
[#632 while_statement]: #351
[#639 brace_right]: #649
[#648 additive_expression]: #59
[#648 and]: #67
[#648 array_type_decl]: #94
[#648 bang]: #64
[#648 binary_and_expression]: #56
[#648 binary_or_expression]: #57
[#648 binary_xor_expression]: #58
[#648 bitwise_expression]: #54
[#648 bool_literal]: #86
[#648 callable]: #75
[#648 const_literal]: #76
[#648 decimal_float_literal]: #111
[#648 depth_texture_type]: #122
[#648 expression]: #656
[#648 float16]: #90
[#648 float32]: #89
[#648 float_literal]: #85
[#648 hex_float_literal]: #112
[#648 ident]: #74
[#648 int32]: #91
[#648 int_literal]: #84
[#648 mat_prefix]: #82
[#648 minus]: #63
[#648 multiplicative_expression]: #61
[#648 multisampled_texture_type]: #124
[#648 paren_expression]: #77
[#648 paren_left]: #87
[#648 pointer]: #93
[#648 primary_expression]: #68
[#648 relational_expression]: #51
[#648 sampled_texture_type]: #123
[#648 sampler_type]: #121
[#648 shift_expression]: #55
[#648 short_circuit_and_expression]: #53
[#648 short_circuit_or_expression]: #52
[#648 singular_expression]: #62
[#648 star]: #66
[#648 storage_texture_type]: #125
[#648 texture_and_sampler_types]: #95
[#648 tilde]: #65
[#648 type_decl_without_ident]: #80
[#648 uint32]: #92
[#648 unary_expression]: #60
[#648 vec_prefix]: #81
[#651 brace_right]: #655
[#653 semicolon]: #654
[#656 semicolon]: #657
